[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d Lost and Found"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W12-1/main[image:https://travis-ci.org/CS2103-AY1819S1-W12-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "https://ci.appveyor.com/project/CS2103-AY1819S1-W12-1/main/branch/master[image:https://ci.appveyor.com/api/projects/status/yvil727ad656xo0d/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W12-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W12-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "https://www.codacy.com/app/CS2103-AY1819S1-W12-1/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W12-1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/8659d1e101a3438cb1fdcff23080c3b4[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Welcome to *LostBUTFound*! *LostBUTFound* is a management tool designed to help *administrators manage lost and found articles*."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Managing lost and found articles can be a frustrating experience, especially when there are a huge amount of articles to keep track of. LostBUTFound streamlines this management process and help you to increase your productivity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "More importantly, LostBUTFound is optimized for those who prefer to work with a Command Line Interface (CLI), while still having the benefits of a Graphical User Interface (GUI). Fast typists will find that LostBUTFound can manage lost and found articles faster than traditional GUI applications."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* This application is based on se-edu\u0027s https://github.com/se-edu/addressbook-level4/[Address Book] application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "Bobbie R. Soedirgo": 4,
      "Swiftkage": 6,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "mainClassName \u003d \u0027seedu.lostandfound.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    archiveName \u003d \u0027LostBUTFound.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "            test.include \u0027seedu/lostandfound/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plty"
        },
        "content": "            test.include \u0027seedu/lostandfound/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plty"
        },
        "content": "            test.exclude \u0027seedu/lostandfound/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "Swiftkage": 1,
      "-": 242
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "Lost and Found team! +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Bobbie Ramadhani Soedirgo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::dan-delion.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://github.com/dan-delion[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://cs2103-ay1819s1-w12-1.github.io/main/team/dan-delion.html[portfolio]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Jerrell Ezralemuel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "image::plty.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://github.com/plty[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://cs2103-ay1819s1-w12-1.github.io/main/team/plty.html[portfolio]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Responsibilities: Logic and Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Kevin Law"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "image::kevvvinn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://github.com/kevvvinn[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://cs2103-ay1819s1-w12-1.github.io/main/team/kevvvinn.html[portfolio]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Lim Yu Xi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::swiftkage.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://github.com/Swiftkage[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "{empty}[https://cs2103-ay1819s1-w12-1.github.io/main/team/swiftkage.html[portfolio]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Responsibilities: Logic and Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "Bobbie R. Soedirgo": 1,
      "Swiftkage": 15,
      "-": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W12-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Email us* : You can also reach us at `sram-b [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "Bobbie R. Soedirgo": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d LostBUTFound - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jun An"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "By: `Team W12-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/lostandfound/storage/XmlAdaptedArticle.java[`XmlAdaptedArticle.java`] and link:{repoURL}/src/main/java/seedu/lostandfound/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jun An"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jun An"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/lostandfound/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/lostandfound/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": ". Run the `seedu.lostandfound.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/articlelist-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/articlelist-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/lostandfound/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plty"
        },
        "content": "image::SDforDeleteArticle.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plty"
        },
        "content": "Note how the `Model` simply raises a `ArticleListChangedEvent` when the article list data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "image::SDforDeleteArticleEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plty"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/lostandfound/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ArticleListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plty"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/lostandfound/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "plty"
        },
        "content": "link:{repoURL}/src/main/java/seedu/lostandfound/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "plty"
        },
        "content": ".  `Logic` uses the `ArticleListParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a article) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plty"
        },
        "content": "image::DeleteArticleSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plty"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/lostandfound/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plty"
        },
        "content": "* stores the article list data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "plty"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cArticle\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "plty"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `article list`, which `Article` can reference. This would allow `article list` to only require one `Tag` object per unique `Tag`, instead of each `Article` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "plty"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/lostandfound/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "plty"
        },
        "content": "* can save the article list data in xml format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "plty"
        },
        "content": "Classes used by multiple components are in the `seedu.articlelist.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "plty"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedArticleList`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "plty"
        },
        "content": "It extends `ArticleList` with an undo/redo history, stored internally as an `articleListStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "plty"
        },
        "content": "* `VersionedArticleList#commit()` -- Saves the current article list state in its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plty"
        },
        "content": "* `VersionedArticleList#undo()` -- Restores the previous article list state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plty"
        },
        "content": "* `VersionedArticleList#redo()` -- Restores a previously undone article list state from its history."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "plty"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitArticleList()`, `Model#undoArticleList()` and `Model#redoArticleList()` respectively."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "plty"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedArticleList` will be initialized with the initial article list state, and the `currentStatePointer` pointing to that single article list state."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th article in the article list. The `delete` command calls `Model#commitArticleList()`, causing the modified state of the article list after the `delete 5` command executes to be saved in the `articleListStateList`, and the `currentStatePointer` is shifted to the newly inserted article list state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Step 3. The user executes `add n/Wallet ...` to add a new article. The `add` command also calls `Model#commitArticleList()`, causing another modified article list state to be saved into the `articleListStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "plty"
        },
        "content": "If a command fails its execution, it will not call `Model#commitArticleList()`, so the article list state will not be saved into the `articleListStateList`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Step 4. The user now decides that adding the article was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoArticleList()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous article list state, and restores the article list to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "plty"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial article list state, then there are no previous article list states to restore. The `undo` command uses `Model#canUndoArticleList()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "plty"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoArticleList()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the article list to that state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "plty"
        },
        "content": "If the `currentStatePointer` is at index `articleListStateList.size() - 1`, pointing to the latest article list state, then there are no undone article list states to restore. The `redo` command uses `Model#canRedoArticleList()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "plty"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the article list, such as `list`, will usually not call `Model#commitArticleList()`, `Model#undoArticleList()` or `Model#redoArticleList()`. Thus, the `articleListStateList` remains unchanged."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitArticleList()`. Since the `currentStatePointer` is not pointing at the end of the `articleListStateList`, all article list states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/Wallet ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "plty"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire article list."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the article being deleted)."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "plty"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of article list states."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "plty"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedArticleList`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The `find-(FIELD)` command allows users to find unresolved articles by `name`, `description` or `finder` with keywords. The command finds all article whose fields contain all of the given keywords."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The below diagram illustrates the interaction between the `Logic` and `Model` components in finding an article with the specified keyword. In this example, `find-n wallet` command was executed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::FindSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The `find-(FIELD)` command input is passed into an ArticleListParser object. The ArticleListParser reads the command word `find` and creates a `FindCommandParser` object that further parses the command input and creates a `FindCommand`. The `FindCommand` filters the the article list based on the keywords and updates the `Model` component on changes in the filtered article list."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The `find` command is facilitated by the `Predicate` class, which have a number of predicates that determine the fields ad type of keyword matching that are supported by the search. The diagram below shows the different predicates implemented."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::PredicateClassDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The following code snippet shows an example of one type of predicate - `ResolvedAndContainsKeywordsPredicate`. If no keywords are given, all resolved articles will be returned. If keywords are given, all fields of an Article object will be matched."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public boolean test(Article article) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return article.getIsResolved();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return article.getIsResolved()"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 (keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getName().fullName, keyword))"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getPhone().value, keyword))"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getEmail().value, keyword))"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getDescription().value, keyword))"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getFinder().fullName, keyword))"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getOwner().fullName, keyword))"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getStringTags(), keyword)));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Keyword matching"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* **Alternative 1 (current choice):** Match all of the keywords"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: Find command would be more targeted and precise."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Cons: User cannot find multiple articles using multiple keywords at the same time."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* **Alternative 2:** Match any of the keywords"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: User can find multiple articles using multiple keywords at the same time."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Cons: Harder for user to accurately find a specific article if there are multiple articles with the same keywords."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* **Alternative 3:** Approximate matching"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: User can easily find articles even if they are unsure of the keywords."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Cons: Harder to implement the find feature."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "// tag::resolve[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Resolve feature"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "plty"
        },
        "content": "The `resolve` command allows users to resolve articles when they are claimed but the owner."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The below diagram illustrates the interaction between the `Logic` and `Model` components in resolving an article."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::ResolveSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The `resolve` command input is passed into an ArticleListParser object. The ArticleListParser reads the command word `resolve` and creates a `ResolveCommandParser` object that further parses the command input and creates a `ResolveCommand`. The `ResolveCommand` then updates the article with the new information and updates the `Model` component on changes in the filtered unresolved article list."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The following activity diagram shows the workflow when resolving an article."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "image::ResolveActivityDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "In the ResolveCommand, a new `Article` object is created directly with the following information:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Article editedArticle \u003d new Article(articleToEdit.getName(), articleToEdit.getPhone(),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    articleToEdit.getEmail(), articleToEdit.getDescription(),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        articleToEdit.getFinder(), owner, SET_ISRESOLVED,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            articleToEdit.getTags());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Unlike the `edit` command where there can be multiple fields edited, only 2 fields - `owner` and `isResolved` is changed for the `resolve` feature. The `isResolved` field is set to `true`, and  once the `owner` field is parsed and accepted, a new `Article` object can be created. The Article would have the same data as the target Article, except for the new `owner` and `isResolved` field. The target Article will be replaced with the newly created Article."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: changing the owner and isResolved field"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* **Alternative 1 (current choice):** Create a new `Article` object"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: Easy implementation without affecting other functions."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Cons: Parsing and exception handling would have to be added to the feature."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* **Alternative 2:** Call the `EditCommand` method"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Pros: Use of existing function to change the relevant fields."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Cons: Increase coupling of project."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "// end::resolve[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "plty"
        },
        "content": "// tag::imageclass[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Image Class"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "plty"
        },
        "content": "Image class is created to introduce image into the ecosystem of the ArticleList with ease"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "plty"
        },
        "content": "Current implementation of Image is possible with help of Sequence class, in which Sequence class is creating a unique id for any new image created, to ease the import of new image this is handled by `Image.create` as this method copies the image to the jar directory such that the original image can be deleted afterwards, and because of the unique id and writing it not on the same directory on update / edit make undo-redo operation po* **Alternative 2:** Creating it from random"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "plty"
        },
        "content": "image::imageclass.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "plty"
        },
        "content": "* **Alternative 1 :** creating the image name from a hash"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "plty"
        },
        "content": "** Pros: If this is safe enough for git to use SHA-1 for commit message, it is good enough for us to use the image checksum as the name. or use stronger hash like SHA256 or even SHA-3 standard like KECCAK Hash"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "plty"
        },
        "content": "** Cons: We have weird and long names for the file and it\u0027s harder to refer to the specific file if the user needed it."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "plty"
        },
        "content": "* **Alternative 2:** Creating it from random"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "plty"
        },
        "content": "** Pros: It is statistically impossible to create the same random twice if the word length is long enough."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "plty"
        },
        "content": "** Cons: It would be super long name to reduce the effect of birthday problem collision and reducing error."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "plty"
        },
        "content": "* **Alternative 2 (current implementation):** Sequence Class"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "plty"
        },
        "content": "** Pros: It\u0027s a sequence such that it is sequential, and the name generated would be super short, we can use this class for another thing as well to create such unique id."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "plty"
        },
        "content": "** Cons: We have to create a class, introduce coupling and basically more work."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "plty"
        },
        "content": "// end::imageclass[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "plty"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation articles."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "plty"
        },
        "content": "This will cause the associated article in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "plty"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.lostandfound.ui` package."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "plty"
        },
        "content": "e.g. `seedu.lostandfound.commons.StringUtilTest`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "plty"
        },
        "content": "e.g. `seedu.lostandfound.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "plty"
        },
        "content": "e.g. `seedu.lostandfound.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "plty"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/lostandfound/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "plty"
        },
        "content": "A project often depends on third-party libraries. For example, article list depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//tag::user[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*Target user profile*: an administrator who"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "plty"
        },
        "content": "* has a need to manage a lot of lost and found articles"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "plty"
        },
        "content": "* prefer desktop apps over web equivalents"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "plty"
        },
        "content": "* prefer typing over mouse input"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "plty"
        },
        "content": "*Value proposition*: make it faster and easier to manage lost and found articles compared to GUI apps."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |new administrator |see usage instructions | Refer to instructions when I forget how to use the commands"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator who received a lost article|add an article | Make a new entry"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator |delete an article | Remove articles that are no longer relevant"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |careless administrator |edit an article | Change details of an article that I made by mistake"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator |Set the photo of the article | Identify the article easily by sight"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator |Differentiate resolved and unresolved articles | Identify different types of articles easily"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |detailed administrator |Show the number of listings| Keep track of the number of entries"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |detailed administrator |View the details of a selected article| See the specific details of the article"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator who received a claim request |Find articles using the name of the article| Find the article easily"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* *`   |administrator who received a claim request |Find articles with matching keywords in their description| Find the articles easily"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator who received a claim request|Resolve articles that have been claimed| Separate resolved and unresolved articles"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* * *` |administrator who received a claim dispute|View resolved articles that have been previously claimed| Check the article\u0027s claim of ownership"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* *`   |careless administrator |Undo the last n actions|Cancel actions I did by mistake"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "|`* *`   |careless administrator |Redo the last n actions|Cancel undo actions that I did by mistake"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "(For all use cases below, the *System* is the `LostBUTFound` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Use Cases: Add article"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "plty"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "plty"
        },
        "content": "1.  User requests to add article"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "plty"
        },
        "content": "2.  System adds the article"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "plty"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "plty"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "plty"
        },
        "content": "* 1a. The command format is invalid."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "plty"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "plty"
        },
        "content": "** 1b. System sends error message and command instruction to user."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "plty"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Use Cases: Delete unresolved article"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "plty"
        },
        "content": "1.  User requests to list article"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of unresolved articles"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "plty"
        },
        "content": "3.  User requests to delete a specific article from the list"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "plty"
        },
        "content": "4.  System deletes the article"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "plty"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "plty"
        },
        "content": "* 2b. The given index is invalid."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "plty"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Use Cases: Delete resolved article"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "1.  User requests to find list of resolved article"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of resolved articles"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "3.  User requests to delete a specific article from the list"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "4.  System deletes the article"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 3a. The list is empty"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "+"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 3b. The given index is invalid."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Use Cases: Find unresolved article by name"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "1.  User requests to find articles using keywords"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of unresolved articles matching the given keywords"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 4a. Invalid command format"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** 4aa. Systems sends error message to user"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Use Cases: Find resolved article by keyword"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "plty"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "1.  User requests to find list of resolved article using keywords"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of resolved articles matching the keywords"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "plty"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 5a. Invalid command format"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "plty"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** 5aa. Systems sends error message to user"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "plty"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003d\u003d\u003d Use Cases: Resolve article"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "plty"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "plty"
        },
        "content": "1.  User requests to list article"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of unresolved articles"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "3.  User requests to resolve a specific article from the list, along with the Owner\u0027s name"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "4.  System sets the state of the article to resolved"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "plty"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "plty"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 6a. The list is empty"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 6b. The given index is invalid."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "plty"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Use Cases: Edit description of a unresolved article"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "plty"
        },
        "content": "1.  User requests to list article"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "2.  System shows a list of unresolved articles"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "plty"
        },
        "content": "3.  User requests to set the description of a specific article from the list"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "plty"
        },
        "content": "4.  System changes the description of the article"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 7a. The list is empty"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* 7b. The given index is invalid."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "plty"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "plty"
        },
        "content": ".  Should be able to hold up to 1000 Articles without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  Should take less than 3 seconds to respond to each command on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  Should receive feedback after executing commands."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  Should have correct error handling for unexpected behavior to prevent the application from crashing."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  The commands and the function it provides should be clear to the user."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  The user interface’s font and size should be legible by user."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  Should be able to retain information in event of crash or force shutdown."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//end::user[]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Adding an article"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ". Adding an article to LostBUTFound"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".. Prerequisites: No article in LostBUTFound has the same name and description as the article to be added."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".. Test case: `add` +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "   Expected: No article is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Deleting a article"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ". Deleting a article while all articles are listed"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".. Prerequisites: List all articles using the `list` command. Multiple articles in the list."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "   Expected: No article is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "plty": 116,
      "Swiftkage": 171,
      "-": 619,
      "Jun An": 3
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d LostBUTFound - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": ":xrefstyle: short"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "By: `Team W12-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Welcome to *LostBUTFound*! *LostBUTFound* is a management tool designed to help *administrators manage lost and found articles*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Managing lost and found articles can be a frustrating experience, especially when there are a huge amount of articles to keep track of. LostBUTFound streamlines this management process and help you to increase your productivity. Using LostBUTFound, you can manage articles, find relevant articles and resolve articles that have been claimed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "More importantly, LostBUTFound is optimized for those who prefer to work with a Command Line Interface (CLI), while still having the benefits of a Graphical User Interface (GUI). Fast typists will find that LostBUTFound can manage lost and found articles faster than traditional GUI applications."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Accessing the user guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Everything you need to know about LostBUTFound is in this user guide."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "You can quickly navigate the user guide by clicking on the links found in the table of contents at the top of the user guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ".  Download the latest `LostBUTFound.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Lost and Found app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *`list`* : list all articles"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* **`delete`**`3` : delete the 3rd article shown in the current list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *`exit`* : exit the app"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "LostBUTFound have many features to help administrators, and the subsequent section provides a step-by-step guide of all the commands LostBUTFound can offer to you."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Wallet`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Parameters in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Wallet t/brown` or as `n/Wallet`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Parameters with `…` after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/yellow`, `t/yellow t/empty` etc."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME t/TAG`, `t/TAG n/NAME` is also acceptable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Opens the user guide in a new window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Managing articles"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "This section will detail commands that are used to managed article entries in LostBUTFound."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "//tag::add[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an article : `add`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Add a new article to LostBUTFound."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `add n/NAME d/DESCRIPTION f/FINDER p/PHONE e/EMAIL [t/TAG]...`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Articles added are in an unresolved state."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* An article can have any number of tags (including 0)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `add n/Wallet d/Empty Wallet found in COM1 f/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `add n/Nike Bag d/Found at YIH f/Betsy Crowe t/blue e/betsycrowe@example.com p/1234567`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//tag::resolvefeature[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Resolving an article: `resolve`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Resolves the specified article from LostBUTFound when the owner claims their article."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `resolve INDEX o/OWNER`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Resolves the article at the specified INDEX"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* The index refers to the index number shown in the displayed article list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* The index must be a positive number 1, 2, 3, ..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "`resolve` and `delete` are different commands . By resolving the article, the article entry would still exist in LostBUTFound for logging purposes in the case of claim disputes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `resolve 2 o/John` resolves the second article in the list when John claims his article."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//end::resolvefeature[]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all articles : `list`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Shows a list of all unresolved articles in LostBUTFound. Resolved articles will not appear in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an article : `edit`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Edits an unresolved article from LostBUTFound. Resolved articles cannot be edited."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "Format `edit INDEX [n/NAME] [d/DESCRIPTION] [i/IMAGE] [f/FINDER] [p/PHONE] [e/EMAIL] [t/TAG]...`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Edits the article at the specific INDEX. The index refers to the index number shown in the displayed list. The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* When editing tags, the existing tags of the article will be removed i.e. adding of tags is not cumulative."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* You can remove all the article\u0027s tags by typing t/ without specifying any tags after it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* `edit 2 n/Bag t/` edits the name of the second article to be `Bag` and clears all existing tags."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an article: `delete`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Deletes the specified article from LostBUTFound. Both resolved and unresolved articles can be deleted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Deletes the article at the specified INDEX"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* The index refers to the index number shown in the displayed article list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "* The index must be a positive number 1, 2, 3, ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* `delete 2` deletes the second article in the list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an article: `select`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Selects the article identified by the index number from LostBUTFound."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Selects the article and shows a more detailed description of the article at the specified INDEX."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* The index refers to the index number shown in the displayed list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plty"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* `select 2` selects the second article in the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//tag::findfeature[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Finding articles"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "This section will detail commands that are used to find article entries using various parameters in LostBUTFound. The list shown in the interface will only show matching article entries after executing the command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "The following rules apply to all `find` commands"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* The keyword is case insensitive e.g. `wallet` will match `Wallet`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* The order of the keywords does not matter. e.g. `iPhone XS` will match `XS iPhone`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Only full words will be matched with the keyword. e.g. `Phone` will not match `iPhone`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding unresolved articles by name: `find-n`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds unresolved articles whose name contains *all* of the given keywords."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `find-n KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Only the name field of unresolved articles will be searched."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Unresolved articles matching all the keyword in the name field will be returned (AND operation)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-n Jacket` returns unresolved article entries with name `Jacket` and `Torn Jacket`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-n wallet blue` returns unresolved article entries with names `wallet blue` and `big blue wallet`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding unresolved articles by description: `find-d`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds unresolved articles whose description contains *all* of the given keywords."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `find-d KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Only the description field of unresolved articles will be searched."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Unresolved articles matching all the keyword in the description field will be returned (AND operation)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-d Jacket` returns unresolved article entries with description `Jacket` and `Torn Jacket`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-d central library` returns unresolved article entries with description `near Central library`, `Central library toilet`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding unresolved articles by finder: `find-f`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds unresolved articles whose finder\u0027s name contains *all* of the given keywords."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `find-f KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Only the finder field of unresolved articles will be searched."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Unresolved articles matching all the keyword in the finder field will be returned (AND operation)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-f John` returns unresolved article entries with finder `John Doe` and `John Ham`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-f John Doe` returns unresolved article entries with finder `John Doe` and `John Hamilton Doe`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding unresolved articles by tag: `find-t`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds unresolved articles whose tag\u0027s contains *all* of the given keywords."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `find-t KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Only the tag field of unresolved articles will be searched."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Unresolved articles matching all the keyword in the tag field will be returned (AND operation)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-t black` returns unresolved article entries with tags containing `Black` or `black`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `find-t black worn` returns unresolved article entries with tags `Black` and `worn`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding unresolved articles by keyword: `findall`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds unresolved articles which contains *any* of the given keywords."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `findall KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* All fields of unresolved articles will be searched."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* Unresolved articles matching at least one of the keyword will be returned (OR operation)."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `findall Jacket` returns unresolved article entries which have fields having keywords `Jacket`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `findall Tom wallet` returns unresolved article entries which have fields having keywords `Tom`, `Wallet`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Finding resolved articles by keyword: `findresolved`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Finds resolved articles which contains *any* of the keywords if given."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Format: `findresolved [KEYWORD] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* A list of resolved articles will be returned if no keywords are entered."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* All fields of resolved articles will be searched."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* If Resolved articles matching the keyword will be returned (OR operation)."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `findresolved` returns all resolved article entries."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `findresolved Jacket` returns resolved article entries which have fields having keywords `Jacket`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* `findresolved Tom wallet` returns resolved article entries which have fields having keywords `Tom`, `Wallet`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "//end::findfeature[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d Miscellaneous Commands"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "This section will detail other commands that facilitate use in LostBUTFound."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands: `history`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "plty"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d  Undoing previous command: `undo`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Restores the app to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d  Redoing previous command: `redo`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Reverses the undo command. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries: `clear`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Clears all article entries. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program: `exit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Exits LostBUTFound. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "Description: Data in LostBUTFound is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Lost and Found folder."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Add* `add n/NAME [t/TAG]...` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "e.g. `add n/Wallet t/brown t/empty`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [t/TAG]...` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "e.g. `edit 2 n/Jacket t/leather`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "e.g. `find brown wallet`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "Bobbie R. Soedirgo": 32,
      "Swiftkage": 131,
      "-": 123
    }
  },
  {
    "path": "docs/team/dan-delion.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d Bobbie Soedirgo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d\u003d PROJECT: Lost and Found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "Lost and Found is a desktop application used for managing lost and found articles."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Major enhancement*: revamp of GUI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** What it does: change what was previously the browser panel to show the details of a selected article."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** Justification: this allows the user to view further information about the selected article, including the finder and claimer of an article."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Minor enhancement*: remove support for browser panel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** What it does: remove every trace of browser panel from the already tightly-coupled source code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** Justification: allows for further development without browser panel support breaking tests or the like."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddan-delion\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-10\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense Report]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** Enhancement:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*** Changed displayed fields on article cards"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*** Allow displaying of images in the GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*** Drafted user stories"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "*** Updated User Guide, Contact Us, About Us."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Introduction: remake for the new app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** Change terms to reflect new app (e.g. persons to articles)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Bobbie R. Soedirgo"
        },
        "content": "** Add/remove some features to reflect new app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 1,
      "dan-delion": 3,
      "Bobbie R. Soedirgo": 16,
      "-": 25
    }
  },
  {
    "path": "docs/team/kevvvinn.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d Kevin Law - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d\u003d PROJECT: Lost and Found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "Lost and Found is a desktop application used for managing lost and found articles."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 3,
      "-": 63
    }
  },
  {
    "path": "docs/team/plty.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d Jerrell Ezralemuel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d\u003d PROJECT: Lost and Found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "LostBUTFound is a desktop application used for managing lost and found articles."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "* *Major enhancement*: added *the ability to add images into an article*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "** What it does: allows the user add an image into an article."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "** Justification: This feature improves the product significantly because a user can add images to an article hence, ease them in differentiating two items and knowing which one is theirs and making more sense of finding and differentiate our system with the simple logbook based lost and found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "** Highlights: This feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "* *Minor enhancement*: added a *Sequence* class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "** What it does: Allow creation of unique id."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "** Justification: unique id is needed to create a file / id without any collision, hence this is perfect for Image class, by using this as image is not replaced, image is not written in the xml file in Base64 or any other encoding but can still be undoable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "** Highlight: Singleton is used in this Sequence class and made me realized the ingenuity of singleton."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "** Credit: inspiration from how postgresql handles their unique id by having a table specifically made for keeping track what is the last number dispatched into the tables."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dplty\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-10\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense Report]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Setting up all of the CI before the project started, way before the start of the first sprint of `v1.1` to give a good foundation to work on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Setting up the branch protection before `v1.1`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Creating and delegating tasks on `v1.1` and changing accordingly"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Creating the first draft of the UG DG."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Updating the name of the whole project from \"Item\" to \"Article\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Reviewing the PR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Integrated the CI stack to this group"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "*** Manage the Kanban which we use as a simpler scrum on the project page"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "I co-write the general structure to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimageclass]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "// tag::imageclass[]---"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 1,
      "plty": 24,
      "dan-delion": 2,
      "-": 34
    }
  },
  {
    "path": "docs/team/swiftkage.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003d Lim Yu Xi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\u003d\u003d PROJECT: LostBUTFound"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "LostBUTFound is a desktop application used for *managing lost and found articles*. Users will be able to manage the articles, find relevant articles and resolve articles that have been claimed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "LostBUTFound has a graphical user interface built with JavaFX but most of the user interactions are done using command line interface. It is written in Java and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* *Major enhancement*: added *the ability to resolve articles*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** What it does: It allows the user to resolve articles once it have been claimed by the owner. Resolved articles would still be stored for logging purposes and can be deleted using the `delete` command, but they cannot be edited. Resolved articles would also not appear in the list unless the `findresolved` command is executed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Justification: This feature helps users keep track of both resolved and unresolved articles. If there are claim disputes for articles that have previously been claimed, the administrator could find find the resolved article easily in LostBUTFound."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* *Minor enhancement*: added *the ability to find articles based on specific fields*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** What it does: It allows the user to search for articles depending on different fields and parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Justification: This features helps users find relevant articles quickly and easily."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dswiftkage[RepoSense Report]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Project management"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*** Managed release `v1.3.1` on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*** Responded and assigned issues to team members"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*** Overall updating and formatting of User Guide, Developer Guide and ReadMe [https://github.com/CS2103-AY1819S1-W12-1/main/pull/71/commits/34f91727e4e30a99a4129c8ee0971088c17bee31[PR #71]] [https://github.com/CS2103-AY1819S1-W12-1/main/pull/122/commits/e065166655947ff0ac060964eedd9eceadf38c02[PR #122]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class [https://github.com/CS2103-AY1819S1-T12-4/main/issues/154[#154]] [https://github.com/CS2103-AY1819S1-T12-4/main/issues/155[#155]] [https://github.com/CS2103-AY1819S1-T12-4/main/issues/159[#159]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "include::../UserGuide.adoc[tag\u003dresolvefeature]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindfeature]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dresolve]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 1,
      "dan-delion": 1,
      "Swiftkage": 29,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.ArticleListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlArticleListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ArticleList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleListStorage articleListStorage \u003d new XmlArticleListStorage(userPrefs.getArticleListFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        storage \u003d new StorageManager(articleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateFilteredArticleList(Model.NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s article list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The data from the sample article list will be used instead if {@code storage}\u0027s article list is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "     * or an empty article list will be used instead if errors occur when reading {@code storage}\u0027s article list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        Optional\u003cReadOnlyArticleList\u003e articleListOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        ReadOnlyArticleList initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleListOptional \u003d storage.readArticleList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "            if (!articleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ArticleList\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            initialData \u003d articleListOptional.orElseGet(SampleDataUtil::getAllSampleArticleList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ArticleList\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "            initialData \u003d new ArticleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ArticleList\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "            initialData \u003d new ArticleList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ArticleList\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plty"
        },
        "content": "        logger.info(\"Starting ArticleList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plty"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Article List ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 43,
      "Swiftkage": 4,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private String appTitle \u003d \"LostBUTFound\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "Swiftkage": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "dan-delion": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String LOG_FILE \u003d \"articlelist.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX \u003d \"The article index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_ARTICLES_LISTED_OVERVIEW \u003d \"%1$d articles listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_EDIT_INVALID_RESOLVED \u003d \"Resolved articles cannot be edited!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_RESOLVE_INVALID_RESOLVED \u003d \"Resolved articles cannot be resolved again!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "Swiftkage": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/model/ArticleListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "/** Indicates the ArticleList in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "    public final ReadOnlyArticleList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListChangedEvent(ReadOnlyArticleList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "        return \"number of articles \" + data.getArticleList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/ui/ArticlePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a selection change in the Article List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticlePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Article newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticlePanelSelectionChangedEvent(Article newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Article getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 26
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Indicates a request to jump to the list of articles"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * {@link java.nio.file.Paths#get(String, String...)}, otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void copy(Path source, Path target) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getFilename(Path path) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        return path.getFileName().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getBasename(Path path) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "        String[] split \u003d getFilename(path).split(\"\\\\.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        return split[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getExtension(Path path) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        String[] split \u003d getFilename(path).split(\"\\\\.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (split.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "            return split[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 22,
      "dan-delion": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of articles */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    ObservableList\u003cArticle\u003e getFilteredArticleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.ArticleListParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ArticleListParser articleListParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListParser \u003d new ArticleListParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "            Command command \u003d articleListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ObservableList\u003cArticle\u003e getFilteredArticleList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        return model.getFilteredArticleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 15,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": " * Adds a article to the article list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jun An"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a article to the article list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_FINDER + \"FINDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_NAME + \"Nike Wallet \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Found at library at 12pm \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_FINDER + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_TAG + \"blue \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + PREFIX_TAG + \"worn\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New article added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ARTICLE \u003d \"This article already exists in the article list\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Article toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Article}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "    public AddCommand(Article article) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(article);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        toAdd \u003d article;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (model.hasArticle(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.addArticle(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 23,
      "Swiftkage": 8,
      "-": 36,
      "Jun An": 1
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": " * Clears the article list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Article list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.resetData(new ArticleList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": " * Deletes a article identified using it\u0027s displayed index from the article list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "            + \": Deletes the article identified by the index number used in the displayed article list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_DELETE_ARTICLE_SUCCESS \u003d \"Deleted Article: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e lastShownList \u003d model.getFilteredArticleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.deleteArticle(articleToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ARTICLE_SUCCESS, articleToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 16,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": " * Edits the details of an existing article in the article list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jun An"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the article identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "            + \"by the index number used in the displayed article list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"[\" + PREFIX_FINDER + \"FINDER] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"IMAGE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_EDIT_ARTICLE_SUCCESS \u003d \"Edited Article: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ARTICLE \u003d \"This article already exists in the article list.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final EditArticleDescriptor editArticleDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param index of the article in the filtered article list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param editArticleDescriptor details to edit the article with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditCommand(Index index, EditArticleDescriptor editArticleDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(editArticleDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.editArticleDescriptor \u003d new EditArticleDescriptor(editArticleDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e lastShownList \u003d model.getFilteredArticleList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (articleToEdit.getIsResolved()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EDIT_INVALID_RESOLVED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article editedArticle \u003d createEditedArticle(articleToEdit, editArticleDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!articleToEdit.isSameArticle(editedArticle) \u0026\u0026 model.hasArticle(editedArticle)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateArticle(articleToEdit, editedArticle);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Creates and returns a {@code Article} with the details of {@code articleToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "     * edited with {@code editArticleDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static Article createEditedArticle(Article articleToEdit, EditArticleDescriptor editArticleDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        assert articleToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "        Name updatedName \u003d editArticleDescriptor.getName().orElse(articleToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        Phone updatedPhone \u003d editArticleDescriptor.getPhone().orElse(articleToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        Email updatedEmail \u003d editArticleDescriptor.getEmail().orElse(articleToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        Description updatedDescription \u003d editArticleDescriptor.getDescription().orElse(articleToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        Image updatedImage \u003d editArticleDescriptor.getImage().orElse(articleToEdit.getImage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name updatedFinder \u003d editArticleDescriptor.getFinder().orElse(articleToEdit.getFinder());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editArticleDescriptor.getTags().orElse(articleToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Article(updatedName, updatedPhone, updatedEmail, updatedDescription, updatedImage, updatedFinder,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                articleToEdit.getOwner(), articleToEdit.getIsResolved(), updatedTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 editArticleDescriptor.equals(e.editArticleDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Stores the details to edit the article with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "     * corresponding field value of the article."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static class EditArticleDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plty"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "        private Image image;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        private Name finder;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "        public EditArticleDescriptor() {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plty"
        },
        "content": "        public EditArticleDescriptor(EditArticleDescriptor toCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plty"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "            setImage(toCopy.image);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            setFinder(toCopy.finder);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plty"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, description, image, finder, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plty"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plty"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plty"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void setImage(Image image) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plty"
        },
        "content": "            this.image \u003d image;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plty"
        },
        "content": "        public Optional\u003cImage\u003e getImage() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plty"
        },
        "content": "            return Optional.ofNullable(image);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        public void setFinder(Name finder) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            this.finder \u003d finder;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        public Optional\u003cName\u003e getFinder() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return Optional.ofNullable(finder);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "plty"
        },
        "content": "            if (!(other instanceof EditArticleDescriptor)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "plty"
        },
        "content": "            EditArticleDescriptor e \u003d (EditArticleDescriptor) other;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                    \u0026\u0026 getFinder().equals(e.getFinder())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plty"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plty"
        },
        "content": "                    \u0026\u0026 getImage().equals(e.getImage())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "plty"
        },
        "content": "                    \u0026\u0026 getFinder().equals(e.getFinder())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 86,
      "Swiftkage": 18,
      "-": 148,
      "Jun An": 6
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Article List as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/FindAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Finds and lists all articles in article list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FindAllCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findall\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Finds all articles which fields contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice wallet\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FindAllCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateFilteredArticleList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                String.format(Messages.MESSAGE_ARTICLES_LISTED_OVERVIEW, model.getFilteredArticleList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof FindAllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAllCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 43
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": " * Finds and lists all articles in article list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"-(FIELD): Finds all articles which field contain all of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"FIELD: n(Name), d(Description), f(Finder), t(Tag)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"-n alice\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Predicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FindCommand(Predicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateFilteredArticleList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "                String.format(Messages.MESSAGE_ARTICLES_LISTED_OVERVIEW, model.getFilteredArticleList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "Swiftkage": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/FindResolvedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.ResolvedAndContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Finds and lists all articles in article list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FindResolvedCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findresolved\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \" : Finds all resolved articles which fields contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Parameters: [KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice wallet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final ResolvedAndContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FindResolvedCommand(ResolvedAndContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateFilteredArticleList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                String.format(Messages.MESSAGE_ARTICLES_LISTED_OVERVIEW, model.getFilteredArticleList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof FindResolvedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindResolvedCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 44
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": " * Lists all articles in the article list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all unresolved articles\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 4,
      "Swiftkage": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": " * Reverts the {@code model}\u0027s article list to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!model.canRedoArticleList()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.redoArticleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/ResolveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_OWNER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Resolves an article identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ResolveCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resolve\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \": Resolves the article identified by the index number used in the displayed article list\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \" when owner claims their article.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \" + PREFIX_OWNER + \"OWNER\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_OWNER + \"John\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_RESOLVED_ARTICLE_SUCCESS \u003d \"Resolved Article: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_NOT_RESOLVED \u003d \"Owner need to be specified!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final boolean SET_ISRESOLVED \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Name owner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ResolveCommand(Index targetIndex, Name owner) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cArticle\u003e lastShownList \u003d model.getFilteredArticleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article articleToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (articleToEdit.getIsResolved()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_RESOLVE_INVALID_RESOLVED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedArticle \u003d new Article(articleToEdit.getName(), articleToEdit.getPhone(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleToEdit.getEmail(), articleToEdit.getDescription(), articleToEdit.getImage(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleToEdit.getFinder(), owner, SET_ISRESOLVED, articleToEdit.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateArticle(articleToEdit, editedArticle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RESOLVED_ARTICLE_SUCCESS, editedArticle));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof ResolveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ResolveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "Swiftkage": 70
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": " * Selects a article identified using it\u0027s displayed index from the article list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "            + \": Selects the article identified by the index number used in the displayed article list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_SELECT_ARTICLE_SUCCESS \u003d \"Selected Article: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e filteredArticleList \u003d model.getFilteredArticleList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredArticleList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ARTICLE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 16,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": " * Reverts the {@code model}\u0027s article list to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!model.canUndoArticleList()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.undoArticleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.lostandfound.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final boolean DEFAULT_ISRESOLVED \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final Name DEFAULT_OWNER \u003d new Name(\"Not Claimed\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "                        PREFIX_IMAGE, PREFIX_FINDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_FINDER)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        Image image \u003d Image.getDefault();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "            image \u003d ParserUtil.parseImage(argMultimap.getValue(PREFIX_IMAGE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name finder \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_FINDER).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d new Article(name, phone, email, description, image, finder,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                DEFAULT_OWNER, DEFAULT_ISRESOLVED, tagList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new AddCommand(article);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 3,
      "plty": 27,
      "Swiftkage": 6,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/ArticleListParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.FindAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.FindResolvedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    //allow only alphabetic letters as commandWord"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e[a-zA-Z]+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case ResolveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new ResolveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FindAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindAllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FindResolvedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindResolvedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 18,
      "Swiftkage": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Prefix PREFIX_FINDER \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Prefix PREFIX_OWNER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final Prefix PREFIX_IMAGE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "Swiftkage": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "                        args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "                        PREFIX_IMAGE, PREFIX_FINDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor editArticleDescriptor \u003d new EditArticleDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "            editArticleDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "            editArticleDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "            editArticleDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "            editArticleDescriptor.setDescription("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "            System.out.println(ParserUtil.parseImage(argMultimap.getValue(PREFIX_IMAGE).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "            editArticleDescriptor.setImage(ParserUtil.parseImage(argMultimap.getValue(PREFIX_IMAGE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FINDER).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            editArticleDescriptor.setFinder(ParserUtil.parseName(argMultimap.getValue(PREFIX_FINDER).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editArticleDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!editArticleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new EditCommand(index, editArticleDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 10,
      "plty": 31,
      "Swiftkage": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/FindAllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.FindAllCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Parses input arguments and creates a new FindAllCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FindAllCommandParser implements Parser\u003cFindAllCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAllCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * and returns an FindAllCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FindAllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        logger.info((Arrays.toString(nameKeywords)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new FindAllCommand(new ContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 37
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.FinderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String FIND_BY_NAME \u003d \"-n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String FIND_BY_DESCRIPTION \u003d \"-d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String FIND_BY_FINDER \u003d \"-f\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String FIND_BY_TAG \u003d \"-t\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e listKeywords \u003d new LinkedList\u003c\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String parameter \u003d listKeywords.remove(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        //different operations depending on FIELD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FIND_BY_NAME:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(listKeywords));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FIND_BY_DESCRIPTION:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindCommand(new DescriptionContainsKeywordsPredicate(listKeywords));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FIND_BY_FINDER:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindCommand(new FinderContainsKeywordsPredicate(listKeywords));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        case FIND_BY_TAG:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindCommand(new TagContainsKeywordsPredicate(listKeywords));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "Swiftkage": 35,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/FindResolvedCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.FindResolvedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.ResolvedAndContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Parses input arguments and creates a new FindAllCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FindResolvedCommandParser implements Parser\u003cFindResolvedCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAllCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * and returns an FindAllCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FindResolvedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return new FindResolvedCommand(new ResolvedAndContainsKeywordsPredicate(Collections.emptyList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        logger.info((Arrays.toString(nameKeywords)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new FindResolvedCommand(new ResolvedAndContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 36
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Name.isValid(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Phone.isValid(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Description.isValid(trimmedDescription)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Email.isValid(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Parses a {@code String image} into an {@code Image}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @throws ParseException if the given {@code image} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Image parseImage(String image) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "            return Image.getDefault();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        String trimmedFile \u003d image.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Image.isValid(trimmedFile)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Image.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Image(image);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 42,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/ResolveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_OWNER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ResolveCommandParser implements Parser\u003cResolveCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ResolveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        args, PREFIX_OWNER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResolveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_OWNER).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new ParseException(ResolveCommand.MESSAGE_NOT_RESOLVED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name owner \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_OWNER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new ResolveCommand(index, owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 44
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/ArticleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.UniqueArticleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": " * Wraps all data at the description-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": " * Duplicates are not allowed (by .isSameArticle comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleList implements ReadOnlyArticleList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final UniqueArticleList articles;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Creates an ArticleList using the Articles in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleList(ReadOnlyArticleList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Replaces the contents of the article list with {@code articles}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code articles} must not contain duplicate articles."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles(List\u003cArticle\u003e articles) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.articles.setArticles(articles);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Resets the existing data of this {@code ArticleList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void resetData(ReadOnlyArticleList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        setArticles(newData.getArticleList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    //// article-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if a article with the same identity as {@code article} exists in the article list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean hasArticle(Article article) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(article);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articles.contains(article);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Adds a article to the article list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article must not already exist in the article list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void addArticle(Article p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Replaces the given article {@code target} in the list with {@code editedArticle}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code target} must exist in the article list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article identity of {@code editedArticle} must not be the same as another existing article in the description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void updateArticle(Article target, Article editedArticle) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(editedArticle);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles.setArticle(target, editedArticle);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Removes {@code key} from this {@code ArticleList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code key} must exist in the article list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void removeArticle(Article key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articles.asUnmodifiableObservableList().size() + \" articles\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ObservableList\u003cArticle\u003e getArticleList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articles.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "                || (other instanceof ArticleList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 articles.equals(((ArticleList) other).articles));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articles.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 8,
      "plty": 43,
      "dan-delion": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.NotResolvedPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /** {@code Predicate} that always returns unresolved articles */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    Predicate\u003cArticle\u003e NOT_RESOLVED_PREDICATE \u003d new NotResolvedPredicate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "    void resetData(ReadOnlyArticleList newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    /** Returns the ArticleList */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    ReadOnlyArticleList getArticleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if a article with the same identity as {@code article} exists in the article list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    boolean hasArticle(Article article);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Deletes the given article."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article must exist in the article list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    void deleteArticle(Article target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Adds the given article."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code article} must not already exist in the article list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    void addArticle(Article article);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Replaces the given article {@code target} with {@code editedArticle}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code target} must exist in the article list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article identity of {@code editedArticle} must not be the same as another existing article in the description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "    void updateArticle(Article target, Article editedArticle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    /** Returns an unmodifiable view of the filtered article list */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "    ObservableList\u003cArticle\u003e getFilteredArticleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Updates the filter of the filtered article list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    void updateFilteredArticleList(Predicate\u003cArticle\u003e predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if the model has previous article list states to restore."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    boolean canUndoArticleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if the model has undone article list states to restore."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "    boolean canRedoArticleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Restores the model\u0027s article list to its previous state."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    void undoArticleList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Restores the model\u0027s article list to its previously undone state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    void redoArticleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves the current article list state for undo/redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "    void commitArticleList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 7,
      "plty": 31,
      "dan-delion": 1,
      "Swiftkage": 4,
      "-": 23,
      "Jun An": 14
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents the in-memory model of the article list data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final VersionedArticleList versionedArticleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final FilteredList\u003cArticle\u003e filteredArticles;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Initializes a ModelManager with the given articleList and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ModelManager(ReadOnlyArticleList articleList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireAllNonNull(articleList, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        logger.fine(\"Initializing with article list: \" + articleList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList \u003d new VersionedArticleList(articleList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        filteredArticles \u003d new FilteredList\u003c\u003e(versionedArticleList.getArticleList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        this(new ArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void resetData(ReadOnlyArticleList newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ReadOnlyArticleList getArticleList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void indicateArticleListChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        raise(new ArticleListChangedEvent(versionedArticleList));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean hasArticle(Article article) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(article);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList.hasArticle(article);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void deleteArticle(Article target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.removeArticle(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void addArticle(Article article) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.addArticle(article);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void updateArticle(Article target, Article editedArticle) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireAllNonNull(target, editedArticle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.updateArticle(target, editedArticle);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Article List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Article} backed by the internal list of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code versionedArticleList}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ObservableList\u003cArticle\u003e getFilteredArticleList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredArticles);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void updateFilteredArticleList(Predicate\u003cArticle\u003e predicate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        filteredArticles.setPredicate(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean canUndoArticleList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList.canUndo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean canRedoArticleList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList.canRedo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void undoArticleList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.undo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void redoArticleList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.redo();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        indicateArticleListChanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void commitArticleList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.commit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList.equals(other.versionedArticleList)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 filteredArticles.equals(other.filteredArticles);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 3,
      "plty": 57,
      "Swiftkage": 4,
      "-": 71,
      "Jun An": 17
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/ReadOnlyArticleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Unmodifiable view of an article list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "public interface ReadOnlyArticleList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns an unmodifiable view of the articles list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "     * This list will not contain any duplicate articles."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    ObservableList\u003cArticle\u003e getArticleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Path articleListFilePath \u003d Paths.get(\"data\" , \"articlelist.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Path getArticleListFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticleListFilePath(Path articleListFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.articleListFilePath \u003d articleListFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 Objects.equals(articleListFilePath, o.articleListFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Objects.hash(guiSettings, articleListFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + articleListFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 10,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/VersionedArticleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * {@code ArticleList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "public class VersionedArticleList extends ArticleList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final List\u003cReadOnlyArticleList\u003e articleListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "    public VersionedArticleList(ReadOnlyArticleList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListStateList.add(new ArticleList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves a copy of the current {@code ArticleList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListStateList.add(new ArticleList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListStateList.subList(currentStatePointer + 1, articleListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Restores the article list to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        resetData(articleListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Restores the article list to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        resetData(articleListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if {@code undo()} has article list states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if {@code redo()} has article list states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        return currentStatePointer \u003c articleListStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!(other instanceof VersionedArticleList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList otherVersionedArticleList \u003d (VersionedArticleList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        return super.equals(otherVersionedArticleList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 articleListStateList.equals(otherVersionedArticleList.articleListStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedArticleList.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "            super(\"Current state pointer at start of articleListState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "            super(\"Current state pointer at end of articleListState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 24,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/Article.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article in the article list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "public class Article {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Name finder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final Name owner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Image image;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    // Others"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final boolean isResolved;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public Article(Name name, Phone phone, Email email, Description description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "                   Image image, Name finder, Name owner, boolean isResolved, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireAllNonNull(name, phone, email, description, image, finder, owner, isResolved, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.finder \u003d finder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.isResolved \u003d isResolved;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        return image !\u003d null ? image : Image.getDefault();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean getIsResolved() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return isResolved;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public Name getFinder() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return finder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public Name getOwner() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return owner;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public String getStringTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return getTags().toString().replace(\"[\", \"\").replace(\"]\", \"\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .replace(\",\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if both articles of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "     * This defines a weaker notion of equality between two articles."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean isSameArticle(Article otherArticle) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (otherArticle \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        return otherArticle !\u003d null"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getName().equals(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 otherArticle.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if both articles have the same identity and data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "     * This defines a stronger notion of equality between two articles."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!(other instanceof Article)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article otherArticle \u003d (Article) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        return otherArticle.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 otherArticle.getFinder().equals(getFinder())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 otherArticle.getOwner().equals(getOwner())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getImage().equals(getImage())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 otherArticle.getIsResolved() \u003d\u003d getIsResolved()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 otherArticle.getTags().equals(getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Objects.hash(name, phone, email, description, image, finder, owner, isResolved, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "                .append(\" Image: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(getFinder())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plty"
        },
        "content": "                .append(\" Finder: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plty"
        },
        "content": "                .append(getImage())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(\" Owner: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(getOwner())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(\" isResolved: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .append(getIsResolved())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 37,
      "Swiftkage": 42,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/ContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) { // AND operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 (keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getName().fullName, keyword))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getPhone().value, keyword))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getEmail().value, keyword))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getDescription().value, keyword))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getFinder().fullName, keyword))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(article.getStringTags(), keyword)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof ContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 42
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article\u0027s description in the article list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "            \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValid(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 58
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/DescriptionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) { // AND operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.stream().allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getDescription().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 32
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article\u0027s email in the article list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param email A valid email description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValid(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 10,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/FinderContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FinderContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public FinderContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) { // AND operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.stream().allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getFinder().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof FinderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.equals(((FinderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 32
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article\u0027s name in the article list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValid(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 10,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) { // AND operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.stream().allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "Swiftkage": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/NotResolvedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class NotResolvedPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 13
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article\u0027s phone number in the article list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValid(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/ResolvedAndContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ResolvedAndContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ResolvedAndContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            return article.getIsResolved();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return article.getIsResolved()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 (keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getName().fullName, keyword))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getPhone().value, keyword))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getEmail().value, keyword))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getDescription().value, keyword))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getFinder().fullName, keyword))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getOwner().fullName, keyword))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getStringTags(), keyword)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof ResolvedAndContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.equals(((ResolvedAndContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 49
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " * Tests that a {@code Article}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cArticle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean test(Article article) { // AND operation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return !article.getIsResolved()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.stream().allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                StringUtil.containsWordIgnoreCase(article.getStringTags(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 32
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/UniqueArticleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.exceptions.ArticleNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.exceptions.DuplicateArticleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": " * A list of articles that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * A article is considered unique by comparing using {@code Article#isSameArticle(Article)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * updating of articles uses Article#isSameArticle(Article) for equality so as to ensure that the article being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * or updated is unique in terms of identity in the UniqueArticleList. However, the removal of a article uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * Article#equals(Object) so as to ensure that the article with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": " * @see Article#isSameArticle(Article)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "public class UniqueArticleList implements Iterable\u003cArticle\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ObservableList\u003cArticle\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if the list contains an equivalent article as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean contains(Article toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameArticle);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Adds a article to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void add(Article toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new DuplicateArticleException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Replaces the article {@code target} in the list with {@code editedArticle}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article identity of {@code editedArticle} must not be the same as another existing article in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle(Article target, Article editedArticle) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireAllNonNull(target, editedArticle);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ArticleNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!target.isSameArticle(editedArticle) \u0026\u0026 contains(editedArticle)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new DuplicateArticleException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        internalList.set(index, editedArticle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Removes the equivalent article from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "     * The article must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void remove(Article toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new ArticleNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles(UniqueArticleList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Replaces the contents of this list with {@code articles}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code articles} must not contain duplicate articles."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles(List\u003cArticle\u003e articles) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireAllNonNull(articles);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!articlesAreUnique(articles)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new DuplicateArticleException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        internalList.setAll(articles);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ObservableList\u003cArticle\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Iterator\u003cArticle\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "                || (other instanceof UniqueArticleList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueArticleList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if {@code articles} contains only unique articles."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "    private boolean articlesAreUnique(List\u003cArticle\u003e articles) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (int i \u003d 0; i \u003c articles.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "            for (int j \u003d i + 1; j \u003c articles.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "                if (articles.get(i).isSameArticle(articles.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 131,
      "dan-delion": 4
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/exceptions/ArticleNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": " * Signals that the operation is unable to find the specified article."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "plty": 6
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/article/exceptions/DuplicateArticleException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * Signals that the operation will result in duplicate Articles (Articles are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "public class DuplicateArticleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "    public DuplicateArticleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "        super(\"Operation would result in duplicate articles\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 9,
      "dan-delion": 2
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/image/Image.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.image;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.util.Sequence;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Article\u0027s image in the article list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "public class Image {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Path should be valid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"(0|[1-9][0-9]*)\\\\.(png|svg|jpg|jpeg)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Sequence SEQUENCE \u003d Sequence.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path IMAGE_FOLDER \u003d Paths.get(\"data\", \"images\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public final String filename;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    private String basename;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Constructs a {@code Image}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param file a valid image file. will set a reference to that path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Image(String file) throws InvalidPathException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValid(file), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        path \u003d Paths.get(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        filename \u003d FileUtil.getFilename(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        basename \u003d FileUtil.getBasename(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        id \u003d Integer.parseInt(basename);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        SEQUENCE.set(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Constructs a {@code Image}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param file a valid image file. will set a reference to that path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Image(Path file) throws InvalidPathException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        this(file.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Image create(String pathName) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Image.create(Paths.get(pathName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Create image from a path and import it to our own data library."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param path The original image path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @return an image from such path copied to our path"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Image create(Path path) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        Path target \u003d Paths.get(IMAGE_FOLDER.toString() ,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "                SEQUENCE.next().toString() + \".\" + FileUtil.getExtension(path));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        FileUtil.copy(path, target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Image(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if the given string is a valid image path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!FileUtil.isValidPath(test)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!FileUtil.isFileExists(Paths.get(test))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Paths.get(test).getFileName().toString().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Image getDefault() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Image(\"data/images/0.png\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "                || (other instanceof Image // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 path.equals(((Image) other).path)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 111
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a Tag in the article list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be a single alphanumeric word\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "Swiftkage": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": " * Contains utility methods for populating {@code ArticleList} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static Article[] getUnresolvedSampleArticles() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Article[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"Nike Wallet\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "                new Description(\"Found at Blk 30 Geylang Street 29\"), Image.getDefault(), new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                    new Name(\"Not Claimed\"), Boolean.FALSE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                getTagSet(\"Black\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"Nike bag\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "                new Description(\"Found at Blk 30 Lorong 3 Serangoon Gardens\"), Image.getDefault(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "                    new Name(\"Bernice Yu\"), new Name(\"Not Claimed\"), Boolean.FALSE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "                    getTagSet(\"Scratched\", \"Black\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"Fitbit\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "                new Description(\"Found at Blk 11 Ang Mo Kio Street 74\"), Image.getDefault(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "                    new Name(\"Charlotte Oliveiro\"), new Name(\"Not Claimed\"), Boolean.FALSE, getTagSet(\"New\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"Casio watch\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "                new Description(\"Found at Blk 436 Serangoon Gardens Street 26\"), Image.getDefault(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "                    new Name(\"David Li\"), new Name(\"Not Claimed\"), Boolean.FALSE, getTagSet(\"Red\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static Article[] getResolvedSampleArticles() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Article[] {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"Bluetooth speaker\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "                        new Description(\"Found at Blk 47 Tampines Street 20\"), Image.getDefault(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"), new Name(\"Roy Balakrishnan\"), Boolean.TRUE, getTagSet(\"Blue\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            new Article(new Name(\"IPhone 7\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "                    new Description(\"Found at Blk 45 Aljunied Street 85\"), Image.getDefault(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "                        new Name(\"Roy Balakrishnan\"), new Name(\"Alex Yeoh\"), Boolean.TRUE, getTagSet(\"Gold\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static ReadOnlyArticleList getUnresolvedSampleArticleList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ArticleList sampleAb \u003d new ArticleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        for (Article sampleArticle : getUnresolvedSampleArticles()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            sampleAb.addArticle(sampleArticle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static ReadOnlyArticleList getAllSampleArticleList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList sampleAb \u003d new ArticleList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        for (Article sampleArticle : getUnresolvedSampleArticles()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            sampleAb.addArticle(sampleArticle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        for (Article sampleArticle : getResolvedSampleArticles()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "            sampleAb.addArticle(sampleArticle);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 1,
      "plty": 27,
      "Swiftkage": 26,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/model/util/Sequence.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": " * Singleton sequence"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "public class Sequence {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static Sequence theOne;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Integer next;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Sequence() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "        next \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Sequence getInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "            theOne \u003d new Sequence();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Integer next() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        return next++;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void set(Integer x) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        next \u003d Math.max(next, x + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 28
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/ArticleListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a storage for {@link seedu.lostandfound.model.ArticleList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "public interface ArticleListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    Path getArticleListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns ArticleList data as a {@link ReadOnlyArticleList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    Optional\u003cReadOnlyArticleList\u003e readArticleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see #getArticleListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    Optional\u003cReadOnlyArticleList\u003e readArticleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves the given {@link ReadOnlyArticleList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param articleList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    void saveArticleList(ReadOnlyArticleList articleList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see #saveArticleList(ReadOnlyArticleList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    void saveArticleList(ReadOnlyArticleList articleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 15,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "public interface Storage extends ArticleListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    Path getArticleListFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    Optional\u003cReadOnlyArticleList\u003e readArticleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    void saveArticleList(ReadOnlyArticleList articleList) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves the current version of the Article List to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    void handleArticleListChangedEvent(ArticleListChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 12,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": " * Manages storage of ArticleList data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ArticleListStorage articleListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public StorageManager(ArticleListStorage articleListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.articleListStorage \u003d articleListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ArticleList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Path getArticleListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleListStorage.getArticleListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Optional\u003cReadOnlyArticleList\u003e readArticleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        return readArticleList(articleListStorage.getArticleListFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Optional\u003cReadOnlyArticleList\u003e readArticleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleListStorage.readArticleList(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList(ReadOnlyArticleList articleList) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        saveArticleList(articleList, articleListStorage.getArticleListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList(ReadOnlyArticleList articleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListStorage.saveArticleList(articleList, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void handleArticleListChangedEvent(ArticleListChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "            saveArticleList(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 25,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": " * Represents a storage for {@link seedu.lostandfound.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves the given {@link seedu.lostandfound.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/XmlAdaptedArticle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": " * JAXB-friendly version of the Article."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlAdaptedArticle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Article\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    @XmlElement()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    private String image;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private String finder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private String owner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private boolean isResolved;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Constructs an XmlAdaptedArticle."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlAdaptedArticle() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Constructs an {@code XmlAdaptedArticle} with the given article details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlAdaptedArticle(String name, String phone, String email, String description, String image, String finder,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "                             String owner, boolean isResolved, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.finder \u003d finder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.isResolved \u003d isResolved;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Converts a given Article into this class for JAXB use."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedArticle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlAdaptedArticle(Article source) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        image \u003d source.getImage().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        finder \u003d source.getFinder().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        owner \u003d source.getOwner().fullName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        isResolved \u003d source.getIsResolved();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Converts this jaxb-friendly adapted article object into the model\u0027s Article object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted article"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Article toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        final List\u003cTag\u003e articleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Name.isValid(name)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Phone.isValid(phone)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Email.isValid(email)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Description.isValid(description)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "            image \u003d Image.getDefault().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Image.isValid(image)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "        final Image modelImage \u003d new Image(image);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (finder \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Name.isValid(finder)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        final Name modelFinder \u003d new Name(finder);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        if (owner \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!Name.isValid(owner)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        final Name modelOwner \u003d new Name(owner);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        final boolean modelIsResolved \u003d isResolved;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(articleTags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Article(modelName, modelPhone, modelEmail, modelDescription, modelImage, modelFinder, modelOwner,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                modelIsResolved, modelTags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!(other instanceof XmlAdaptedArticle)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle otherArticle \u003d (XmlAdaptedArticle) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Objects.equals(name, otherArticle.name)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherArticle.phone)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherArticle.email)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherArticle.description)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 Objects.equals(image, otherArticle.image)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 tagged.equals(otherArticle.tagged);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 24,
      "plty": 63,
      "Swiftkage": 31,
      "-": 46,
      "Jun An": 20
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted article"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/XmlArticleListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": " * A class to access ArticleList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlArticleListStorage implements ArticleListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlArticleListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlArticleListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Path getArticleListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Optional\u003cReadOnlyArticleList\u003e readArticleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        return readArticleList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Similar to {@link #readArticleList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Optional\u003cReadOnlyArticleList\u003e readArticleList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "            logger.info(\"ArticleList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList xmlArticleList \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "            return Optional.of(xmlArticleList.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList(ReadOnlyArticleList articleList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        saveArticleList(articleList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Similar to {@link #saveArticleList(ReadOnlyArticleList)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList(ReadOnlyArticleList articleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        requireNonNull(articleList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableArticleList(articleList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 24,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": " * Stores articlelist data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves the given articlelist data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableArticleList articleList)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "            XmlUtil.saveDataToFile(file, articleList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns article list in the file or an empty article list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static XmlSerializableArticleList loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/storage/XmlSerializableArticleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": " * An Immutable ArticleList that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "@XmlRootElement(name \u003d \"articlelist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlSerializableArticleList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ARTICLE \u003d \"Articles list contains duplicate article(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private List\u003cXmlAdaptedArticle\u003e articles;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Creates an empty XmlSerializableArticleList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlSerializableArticleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    public XmlSerializableArticleList(ReadOnlyArticleList src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        articles.addAll(src.getArticleList().stream().map(XmlAdaptedArticle::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Converts this articlelist into the model\u0027s {@code ArticleList} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code XmlAdaptedArticle}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList articleList \u003d new ArticleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (XmlAdaptedArticle p : articles) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "            Article article \u003d p.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "            if (articleList.hasArticle(article)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleList.addArticle(article);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!(other instanceof XmlSerializableArticleList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jun An"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articles.equals(((XmlSerializableArticleList) other).articles);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 3,
      "plty": 27,
      "-": 24,
      "Jun An": 16
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/ArticleCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": " * An UI component that displays information of a {@code Article}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final String FXML \u003d \"ArticleCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/articlelist-level4/issues/336\"\u003eThe issue on ArticleList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public final Article article;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleCard(Article article, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.article \u003d article;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        name.setText(article.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        phone.setText(article.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        description.setText(article.getDescription().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        email.setText(article.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        article.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!(other instanceof ArticleCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCard card \u003d (ArticleCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 article.equals(card.article);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 17,
      "dan-delion": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/ArticleDetailsPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ArticlePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * The Article Details Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "public class ArticleDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final String FXML \u003d \"ArticleDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ImageView image;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private Label articleDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private TextArea description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public ArticleDetailsPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Load article details into the panel."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @param article The article to be loaded"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void loadArticleDetails(Article article) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "            image.setImage(new Image(\"file:\" + article.getImage()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            articleDetails.setText(article.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            tags.getChildren().clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            article.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "            description.setText(article.getDescription().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void handleArticlePanelSelectionChangedEvent(ArticlePanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        loadArticleDetails(event.getNewSelection());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 11,
      "dan-delion": 54
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/ArticleListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ArticlePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": " * Panel containing the list of articles."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String FXML \u003d \"ArticleListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ArticleListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ListView\u003cArticle\u003e articleListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListPanel(ObservableList\u003cArticle\u003e articleList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        setConnections(articleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void setConnections(ObservableList\u003cArticle\u003e articleList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListView.setItems(articleList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListView.setCellFactory(listView -\u003e new ArticleListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "                        logger.fine(\"Selection in article list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "                        raise(new ArticlePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Scrolls to the {@code ArticleCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Article} using a {@code ArticleCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    class ArticleListViewCell extends ListCell\u003cArticle\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        protected void updateItem(Article article, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "            super.updateItem(article, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "            if (empty || article \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "                setGraphic(new ArticleCard(article, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 83
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/FinderPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ArticlePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * The Finder Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "public class FinderPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final String FXML \u003d \"FinderPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public FinderPanel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Load finder info from the article onto the panel."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @param article"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void loadFinder(Article article) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            name.setText(article.getFinder().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            phone.setText(article.getPhone().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            email.setText(article.getEmail().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void handleArticlePanelSelectionChangedEvent(ArticlePanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        loadFinder(event.getNewSelection());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "dan-delion": 51
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ArticleListPanel articleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private StackPane articleDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private StackPane finderPanelPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private StackPane ownerPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    private StackPane articleListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        ArticleDetailsPanel articleDetailsPanel \u003d new ArticleDetailsPanel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        articleDetailsPanelPlaceholder.getChildren().add(articleDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        FinderPanel finderPanel \u003d new FinderPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        finderPanelPlaceholder.getChildren().add(finderPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        OwnerPanel ownerPanel \u003d new OwnerPanel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        ownerPanelPlaceholder.getChildren().add(ownerPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListPanel \u003d new ArticleListPanel(logic.getFilteredArticleList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListPanelPlaceholder.getChildren().add(articleListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getArticleListFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListPanel getArticleListPanel() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleListPanel;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 15,
      "dan-delion": 15,
      "-": 178
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/OwnerPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ArticlePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * The Owner Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "public class OwnerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private static final String FXML \u003d \"OwnerPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private Label owner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public OwnerPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void loadOwner(Article article) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Platform.runLater(() -\u003e owner.setText(article.getOwner().fullName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private void handleArticlePanelSelectionChangedEvent(ArticlePanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        loadOwner(event.getNewSelection());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "dan-delion": 36,
      "Swiftkage": 1
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void handleArticleListChangedEvent(ArticleListChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/LBF.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 9,
      "Swiftkage": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/lostandfound/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @param event Event to be raised"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "dan-delion": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/resources/view/ArticleCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100\" maxHeight\u003d\"100\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" minHeight\u003d\"0\" maxHeight\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" minHeight\u003d\"0\" maxHeight\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/resources/view/ArticleDetailsPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"detailsPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cGridPane hgap\u003d\"10\" vgap\u003d\"10\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            AnchorPane.topAnchor\u003d\"15\" AnchorPane.bottomAnchor\u003d\"5\" AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"300\" maxWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"150\" maxWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cImageView fx:id\u003d\"image\" fitWidth\u003d\"240\" fitHeight\u003d\"240\" preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "               GridPane.rowSpan\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Name:\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel fx:id\u003d\"articleDetails\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Tags:\" styleClass\u003d\"label-big\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Description:\" styleClass\u003d\"label-big\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cStackPane GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"2\" \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cTextArea fx:id\u003d\"description\" editable\u003d\"false\" styleClass\u003d\"text-area-big\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 49
    }
  },
  {
    "path": "src/main/resources/view/ArticleListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "  \u003cListView fx:id\u003d\"articleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "dan-delion": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".label-big {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".split-pane .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-color: #4d4d4d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-padding: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-text-fill: gray;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".text-area .content {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".text-area-big {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ".text-area-big .content {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "plty"
        },
        "content": "#filterField, #articleListPanel, #articleWebpage {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "#description .content {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "dan-delion": 40,
      "-": 341
    }
  },
  {
    "path": "src/main/resources/view/FinderPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"detailsPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cLabel text\u003d\"Finder\" alignment\u003d\"CENTER\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "         AnchorPane.topAnchor\u003d\"5\" AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cGridPane hgap\u003d\"10\" vgap\u003d\"10\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            AnchorPane.topAnchor\u003d\"50\" AnchorPane.bottomAnchor\u003d\"5\" AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Name:\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Phone:\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"1\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Email:\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"2\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.rowIndex\u003d\"2\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 45
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cfx:root xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cfx:root xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" maximized\u003d\"true\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cImage url\u003d\"@/images/LBF.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "          \u003cVBox fx:id\u003d\"articleList\" minWidth\u003d\"300\" prefWidth\u003d\"300\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "            \u003cStackPane fx:id\u003d\"articleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "          \u003cSplitPane orientation\u003d\"VERTICAL\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            \u003cStackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              \u003cStackPane fx:id\u003d\"articleDetailsPanelPlaceholder\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                         AnchorPane.topAnchor\u003d\"0\" AnchorPane.bottomAnchor\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            \u003cSplitPane minHeight\u003d\"200\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              \u003cStackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                \u003cStackPane fx:id\u003d\"finderPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              \u003cStackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                \u003cStackPane fx:id\u003d\"ownerPanelPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "dan-delion": 26,
      "Swiftkage": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/OwnerPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"detailsPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cLabel text\u003d\"Owner\" alignment\u003d\"CENTER\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "         AnchorPane.topAnchor\u003d\"5\" AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cGridPane hgap\u003d\"10\" vgap\u003d\"10\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "            AnchorPane.topAnchor\u003d\"50\" AnchorPane.bottomAnchor\u003d\"5\" AnchorPane.leftAnchor\u003d\"5\" AnchorPane.rightAnchor\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel text\u003d\"Name:\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cLabel fx:id\u003d\"owner\" styleClass\u003d\"label-big\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 28
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "           styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"text-area\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "          styleClass\u003d\"grid-pane\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 5,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "  \"articleListFilePath\" : \"articlelist.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "  \"articleListFilePath\" : \"articlelist.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlArticleListStorageTest/invalidAndValidArticleArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c!-- Valid Article --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eNike Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c!-- Article with invalid phone field --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eNike Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "Swiftkage": 10,
      "Jun An": 5
    }
  },
  {
    "path": "src/test/data/XmlArticleListStorageTest/invalidArticleArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c!-- Article with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eN!ke W@llet\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "Swiftkage": 5,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableArticleListTest/duplicateArticleArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAlice Phone\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eAlice Pauline\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c!-- Article with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAlice Phone\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eAlice Pauline\u003c/finder\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 8,
      "plty": 7,
      "Swiftkage": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableArticleListTest/invalidArticleArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c!-- Article with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eHans Book\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003e false\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "Swiftkage": 5,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableArticleListTest/typicalArticlesArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c!-- ArticleList save file which contains the same Article values as in TypicalArticles#getTypicalArticleList() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eNike Bag\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 123, Jurong West Ave 6\u003c/description\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eAlice Pauline\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAdidas Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 311, Clementi Ave 2\u003c/description\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eBenson Meier\u003c/finder\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003ctagged\u003eSticker\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eCasio Watch\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at wall street\u003c/description\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eCarl Kurz\u003c/finder\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAfterShockz Headphone\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 10th street\u003c/description\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eDaniel Meier\u003c/finder\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003ctagged\u003eBlue\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAcer Aspire Laptop\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at michegan ave\u003c/description\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eElle Meyer\u003c/finder\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eIPhone XS\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at little tokyo\u003c/description\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eFiona Kunz\u003c/finder\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eMatric Card\u003c/name\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eGeorge Best\u003c/finder\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\u003carticles\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eMini Fan\u003c/name\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cphone\u003e9481124\u003c/phone\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cemail\u003ewalker@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at lalaland ave\u003c/description\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eHelen Walker\u003c/finder\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eJenny Bee\u003c/owner\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003etrue\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003carticles\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eNice Pen\u003c/name\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cphone\u003e8182427\u003c/phone\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cemail\u003eDee@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription\u003eFound at Little India\u003c/description\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder\u003eOllie Dee\u003c/finder\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner\u003eCarl Kurz\u003c/owner\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved\u003etrue\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 17,
      "Swiftkage": 57,
      "-": 1,
      "Jun An": 14
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidArticleField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c!-- Article with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticle\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cname\u003eNike Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003cimage\u003edata/images/0.png\u003c/image\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cfinder\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/article\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "Swiftkage": 6,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingArticleField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c!-- Article with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticle\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003cimage\u003edata/images/0.png\u003c/image\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\u003cfinder\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/article\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "Swiftkage": 5,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validArticle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jun An"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cname\u003eNike Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cdescription\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003cimage\u003edata/images/0.png\u003c/image\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cfinder\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cowner\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003cisResolved\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    \u003ctagged\u003eBlack\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/article\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "Swiftkage": 6,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validArticleList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003carticlelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eHans Bag\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHans Muster\u003c/finder\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003e false\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eRuth Wallet\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 81th street\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eRuth Mueller\u003c/finder\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eHeinz Phone\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at wall street\u003c/description\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eHeinz Kurz\u003c/finder\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eCornelia Watch\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 10th street\u003c/description\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eCornelia Meier\u003c/finder\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eWerner Thumbdrive\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at michegan ave\u003c/description\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eWerner Meyer\u003c/finder\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eLydia Paper\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at little tokyo\u003c/description\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eLydia Kunz\u003c/finder\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eAnna Book\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at 4th street\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eAnna Best\u003c/finder\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eStefan Card\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at little india\u003c/description\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eStefan Meier\u003c/finder\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003carticles\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cname\u003eMartin Mouse\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003eFound at chicago ave\u003c/description\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cfinder isPrivate\u003d\"false\"\u003eMartin Mueller\u003c/finder\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cowner isPrivate\u003d\"false\"\u003eNot Claimed\u003c/owner\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "\t\t\u003cisResolved isPrivate\u003d\"false\"\u003efalse\u003c/isResolved\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "    \u003c/articles\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c/articlelist\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 20,
      "Swiftkage": 45,
      "-": 19
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ArticleCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": " * Provides a handle to a article card in the article list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if this handle contains {@code article}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean equals(Article article) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "        return getName().equals(article.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 getDescription().equals(article.getDescription().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 getPhone().equals(article.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 getEmail().equals(article.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(article.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 16,
      "-": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ArticleDetailsPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " * A handler for the {@code ArticleDetailsPanel} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "public class ArticleDetailsPanelHandle extends NodeHandle\u003cLabel\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public static final String ARTICLE_DETAILS_ID \u003d \"#articleDetails\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private String lastRememberedDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public ArticleDetailsPanelHandle(Label articleDetailsNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        super(articleDetailsNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Returns the loaded content in the article details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public String getLoadedDetails() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Remembers the content of the currently loaded article details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public void rememberDetails() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        lastRememberedDetails \u003d getLoadedDetails();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Returns true if the current article details is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * article details call."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public boolean isDetailsChanged() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        return !lastRememberedDetails.equals(getLoadedDetails());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dan-delion": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ArticleListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": " * Provides a handle for {@code ArticleListPanel} containing the list of {@code ArticleCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListPanelHandle extends NodeHandle\u003cListView\u003cArticle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String ARTICLE_LIST_VIEW_ID \u003d \"#articleListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Optional\u003cArticle\u003e lastRememberedSelectedArticleCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListPanelHandle(ListView\u003cArticle\u003e articleListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        super(articleListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a handle to the selected {@code ArticleCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e selectedArticleList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (selectedArticleList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new AssertionError(\"Article list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "                .map(ArticleCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedArticleList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Navigates the listview to display {@code article}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void navigateToCard(Article article) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        if (!getRootNode().getItems().contains(article)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new IllegalArgumentException(\"Article does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "            getRootNode().scrollTo(article);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Selects the {@code ArticleCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the article card handle of a article associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleCardHandle getArticleCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "                .map(ArticleCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "                .filter(handle -\u003e handle.equals(getArticle(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Article getArticle(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Remembers the selected {@code ArticleCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void rememberSelectedArticleCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "            lastRememberedSelectedArticleCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "            lastRememberedSelectedArticleCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns true if the selected {@code ArticleCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code rememberSelectedArticleCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "    public boolean isSelectedArticleCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "            return lastRememberedSelectedArticleCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plty"
        },
        "content": "            return !lastRememberedSelectedArticleCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "                    || !lastRememberedSelectedArticleCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ArticleListPanelHandle articleListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private final ArticleDetailsPanelHandle articleDetailsPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListPanel \u003d new ArticleListPanelHandle(getChildNode(ArticleListPanelHandle.ARTICLE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        articleDetailsPanel \u003d new ArticleDetailsPanelHandle(getChildNode(ArticleDetailsPanelHandle.ARTICLE_DETAILS_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListPanelHandle getArticleListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public ArticleDetailsPanelHandle getArticleDetailsPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        return articleDetailsPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "dan-delion": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlSerializableArticleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected Supplier\u003cReadOnlyArticleList\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyArticleList\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "            createDataFileWithData(new XmlSerializableArticleList(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        userPrefs.setArticleListFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a defensive copy of the article list data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleList readStorageArticleList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "            return new ArticleList(storage.readArticleList().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "            throw new AssertionError(\"Data is not in the ArticleList format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        return storage.getArticleListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model copy \u003d new ModelManager((model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredArticleList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 25,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : LostBUTFound\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "Swiftkage": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        final Index fifthArticleIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(fifthArticleIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(fifthArticleIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(fifthArticleIndex.equals(fifthArticleIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(fifthArticleIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(fifthArticleIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(fifthArticleIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/LBF.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "Swiftkage": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlAdaptedArticle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlSerializableArticleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleListBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validArticleList.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path MISSING_ARTICLE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingArticleField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path INVALID_ARTICLE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidArticleField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path VALID_ARTICLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"validArticle.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempArticleList.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_NAME \u003d \"Nike Wallet\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_FINDER \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Found at 4th street\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String VALID_IMAGE \u003d \"data/images/0.png\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTag(\"Black\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final boolean FALSE_ISRESOLVED \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String DEFAULT_OWNER \u003d \"Not Claimed\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlUtil.getDataFromFile(null, ArticleList.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, ArticleList.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, ArticleList.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableArticleList.class).toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(9, dataFromFile.getArticleList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void xmlAdaptedArticleFromFile_fileWithMissingArticleField_validResult() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle actualArticle \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "                MISSING_ARTICLE_FIELD_FILE, XmlAdaptedArticleWithRootElement.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle expectedArticle \u003d new XmlAdaptedArticle("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION, VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle, actualArticle);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void xmlAdaptedArticleFromFile_fileWithInvalidArticleField_validResult() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle actualArticle \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "                INVALID_ARTICLE_FIELD_FILE, XmlAdaptedArticleWithRootElement.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle expectedArticle \u003d new XmlAdaptedArticle("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION, VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle, actualArticle);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void xmlAdaptedArticleFromFile_fileWithValidArticle_validResult() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle actualArticle \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_ARTICLE_FILE, XmlAdaptedArticleWithRootElement.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle expectedArticle \u003d new XmlAdaptedArticle("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION, VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle, actualArticle);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlUtil.saveDataToFile(null, new ArticleList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new ArticleList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList dataToWrite \u003d new XmlSerializableArticleList(new ArticleList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleListBuilder builder \u003d new ArticleListBuilder(new ArticleList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        dataToWrite \u003d new XmlSerializableArticleList("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "                builder.withArticle(new ArticleBuilder().build()).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedArticle}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plty"
        },
        "content": "    @XmlRootElement(name \u003d \"article\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static class XmlAdaptedArticleWithRootElement extends XmlAdaptedArticle {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 48,
      "Swiftkage": 11,
      "-": 73,
      "Jun An": 23
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void getFilteredArticleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        logic.getFilteredArticleList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "     *      - {@code expectedModel}\u0027s article list was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 16,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_newArticle_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article validArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.addArticle(validArticle);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(new AddCommand(validArticle), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validArticle), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_duplicateArticle_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleInList \u003d model.getArticleList().getArticleList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(new AddCommand(articleInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 1,
      "plty": 22,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void constructor_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_articleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelStubAcceptingArticleAdded modelStub \u003d new ModelStubAcceptingArticleAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article validArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validArticle).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validArticle), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(Arrays.asList(validArticle), modelStub.articlesAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_duplicateArticle_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article validArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validArticle);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithArticle(validArticle);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article alice \u003d new ArticleBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article bob \u003d new ArticleBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void addArticle(Article article) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void resetData(ReadOnlyArticleList newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        public ReadOnlyArticleList getArticleList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        public boolean hasArticle(Article article) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void deleteArticle(Article target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void updateArticle(Article target, Article editedArticle) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        public ObservableList\u003cArticle\u003e getFilteredArticleList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void updateFilteredArticleList(Predicate\u003cArticle\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        public boolean canUndoArticleList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        public boolean canRedoArticleList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void undoArticleList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void redoArticleList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void commitArticleList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plty"
        },
        "content": "     * A Model stub that contains a single article."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "    private class ModelStubWithArticle extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plty"
        },
        "content": "        private final Article article;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelStubWithArticle(Article article) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plty"
        },
        "content": "            requireNonNull(article);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plty"
        },
        "content": "            this.article \u003d article;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plty"
        },
        "content": "        public boolean hasArticle(Article article) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plty"
        },
        "content": "            requireNonNull(article);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plty"
        },
        "content": "            return this.article.isSameArticle(article);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plty"
        },
        "content": "     * A Model stub that always accept the article being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plty"
        },
        "content": "    private class ModelStubAcceptingArticleAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plty"
        },
        "content": "        final ArrayList\u003cArticle\u003e articlesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plty"
        },
        "content": "        public boolean hasArticle(Article article) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plty"
        },
        "content": "            requireNonNull(article);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plty"
        },
        "content": "            return articlesAdded.stream().anyMatch(article::isSameArticle);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void addArticle(Article article) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plty"
        },
        "content": "            requireNonNull(article);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plty"
        },
        "content": "            articlesAdded.add(article);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void commitArticleList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plty"
        },
        "content": "        public ReadOnlyArticleList getArticleList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plty"
        },
        "content": "            return new ArticleList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 57,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_emptyArticleList_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_nonEmptyArticleList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.resetData(new ArticleList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 15,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_OWNER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.EditArticleDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_NAME_POWERBANK \u003d \"XiaoMi Powerbank\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_NAME_MOUSE \u003d \"Wireless Mouse\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_FINDER_POWERBANK \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_FINDER_MOUSE \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_OWNER_POWERBANK \u003d \"Cindy White\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_OWNER_MOUSE \u003d \"David Chong\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_PHONE_POWERBANK \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_PHONE_MOUSE \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_EMAIL_POWERBANK \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_EMAIL_MOUSE \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_DESCRIPTION_POWERBANK \u003d \"Found at 123, Jurong West Ave 6\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_DESCRIPTION_MOUSE \u003d \"Found at Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_TAG_RED \u003d \"red\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String VALID_TAG_BLUE \u003d \"blue\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final boolean FALSE_ISRESOLVED \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final boolean TRUE_ISRESOLVED \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String NAME_DESC_POWERBANK \u003d \" \" + PREFIX_NAME + VALID_NAME_POWERBANK;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String NAME_DESC_MOUSE \u003d \" \" + PREFIX_NAME + VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String FINDER_DESC_POWERBANK \u003d \" \" + PREFIX_FINDER + VALID_FINDER_POWERBANK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String FINDER_DESC_MOUSE \u003d \" \" + PREFIX_FINDER + VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String OWNER_DESC_POWERBANK \u003d \" \" + PREFIX_OWNER + VALID_OWNER_POWERBANK;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String OWNER_DESC_MOUSE \u003d \" \" + PREFIX_OWNER + VALID_OWNER_MOUSE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String PHONE_DESC_POWERBANK \u003d \" \" + PREFIX_PHONE + VALID_PHONE_POWERBANK;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String PHONE_DESC_MOUSE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String EMAIL_DESC_POWERBANK \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_POWERBANK;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String EMAIL_DESC_MOUSE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DESCRIPTION_DESC_POWERBANK \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_POWERBANK;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DESCRIPTION_DESC_MOUSE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String TAG_DESC_BLUE \u003d \" \" + PREFIX_TAG + VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String TAG_DESC_RED \u003d \" \" + PREFIX_TAG + VALID_TAG_RED;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Wallet\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String INVALID_FINDER_DESC \u003d \" \" + PREFIX_FINDER + \"John\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String INVALID_OWNER_DESC \u003d \" \" + PREFIX_OWNER + \"David\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION; // empty string is allowed for descriptions"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"worn*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final EditCommand.EditArticleDescriptor DESC_POWERBANK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final EditCommand.EditArticleDescriptor DESC_MOUSE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DESC_POWERBANK \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_POWERBANK)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withPhone(VALID_PHONE_POWERBANK).withEmail(VALID_EMAIL_POWERBANK)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_POWERBANK).withFinder(VALID_FINDER_POWERBANK)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DESC_MOUSE \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withPhone(VALID_PHONE_MOUSE).withEmail(VALID_EMAIL_MOUSE).withDescription(VALID_DESCRIPTION_MOUSE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_RED, VALID_TAG_BLUE).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "     * - the article list and the filtered article list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList expectedArticleList \u003d new ArticleList(actualModel.getArticleList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        List\u003cArticle\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredArticleList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertEquals(expectedArticleList, actualModel.getArticleList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredArticleList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the article at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code model}\u0027s article list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void showArticleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredArticleList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d model.getFilteredArticleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "        final String[] splitName \u003d article.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateFilteredArticleList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(1, model.getFilteredArticleList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Deletes the first article in {@code model}\u0027s filtered list from {@code model}\u0027s article list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void deleteFirstArticle(Model model) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article firstArticle \u003d model.getFilteredArticleList().get(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.deleteArticle(firstArticle);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.commitArticleList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 15,
      "plty": 34,
      "Swiftkage": 45,
      "-": 60,
      "Jun An": 3
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.showArticleAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jun An"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jun An"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToDelete \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ARTICLE_SUCCESS, articleToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.deleteArticle(articleToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToDelete \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ARTICLE_SUCCESS, articleToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.deleteArticle(articleToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        showNoArticle(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of article list list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getArticleList().getArticleList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToDelete \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.deleteArticle(articleToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        // delete -\u003e first article deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        // undo -\u003e reverts articlelist back to previous state and filtered article list to show all articles"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "        // redo -\u003e same first article deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        // execution failed -\u003e article list state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        // single article list state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 1. Deletes a {@code Article} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted article in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the article object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameArticleDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_SECOND_ARTICLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToDelete \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.deleteArticle(articleToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        // delete -\u003e deletes second article in unfiltered article list / first article in filtered article list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        // undo -\u003e reverts articlelist back to previous state and filtered article list to show all articles"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertNotEquals(articleToDelete, model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "        // redo -\u003e deletes same second article in unfiltered article list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ARTICLE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plty"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void showNoArticle(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateFilteredArticleList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(model.getFilteredArticleList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 18,
      "plty": 73,
      "-": 59,
      "Jun An": 27
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/EditArticleDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESC_MOUSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESC_POWERBANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_RED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.EditArticleDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "public class EditArticleDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptorWithSameValues \u003d new EditArticleDescriptor(DESC_POWERBANK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(DESC_POWERBANK.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(DESC_POWERBANK.equals(DESC_POWERBANK));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(DESC_MOUSE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different finder -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK).withPhone(VALID_PHONE_MOUSE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK).withEmail(VALID_EMAIL_MOUSE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK).withDescription(VALID_DESCRIPTION_MOUSE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAmy \u003d new EditArticleDescriptorBuilder(DESC_POWERBANK).withTags(VALID_TAG_RED).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(DESC_POWERBANK.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "Swiftkage": 29,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.showArticleAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.EditArticleDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jun An"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article editedArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder(editedArticle).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(model.getFilteredArticleList().get(0), editedArticle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Index indexLastArticle \u003d Index.fromOneBased(model.getFilteredArticleList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .filtered(NOT_RESOLVED_PREDICATE).size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article lastArticle \u003d model.getFilteredArticleList().filtered(NOT_RESOLVED_PREDICATE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .get(indexLastArticle.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleBuilder articleInList \u003d new ArticleBuilder(lastArticle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedArticle \u003d articleInList.withName(VALID_NAME_MOUSE).withPhone(VALID_PHONE_MOUSE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_BLUE).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withPhone(VALID_PHONE_MOUSE).withFinder(VALID_FINDER_MOUSE).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastArticle, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(lastArticle, editedArticle);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE, new EditArticleDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedArticle \u003d model.getFilteredArticleList().filtered(NOT_RESOLVED_PREDICATE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedModel.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleInFilteredList \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedArticle \u003d new ArticleBuilder(articleInFilteredList).withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(model.getFilteredArticleList().get(0), editedArticle);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_duplicateArticleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article firstArticle \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder(firstArticle).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ARTICLE, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_duplicateArticleFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        // edit article in filtered list into a duplicate in article list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleInList \u003d model.getArticleList().getArticleList().get(INDEX_SECOND_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "                new EditArticleDescriptorBuilder(articleInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_invalidArticleIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "     * but smaller than size of article list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_invalidArticleIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plty"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of article list list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getArticleList().getArticleList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article editedArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToEdit \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder(editedArticle).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(articleToEdit, editedArticle);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plty"
        },
        "content": "        // edit -\u003e first article edited"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plty"
        },
        "content": "        // undo -\u003e reverts articlelist back to previous state and filtered article list to show all articles"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plty"
        },
        "content": "        // redo -\u003e same first article edited again"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plty"
        },
        "content": "        // execution failed -\u003e article list state not added into model"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plty"
        },
        "content": "        // single article list state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 1. Edits a {@code Article} from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited article in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the article object regardless of indexing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameArticleEdited() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article editedArticle \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder(editedArticle).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plty"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ArticleList(model.getArticleList()), new UserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_SECOND_ARTICLE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToEdit \u003d model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(articleToEdit, editedArticle);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.commitArticleList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plty"
        },
        "content": "        // edit -\u003e edits second article in unfiltered article list / first article in filtered article list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plty"
        },
        "content": "        // undo -\u003e reverts articlelist back to previous state and filtered article list to show all articles"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertNotEquals(model.getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased()), articleToEdit);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "plty"
        },
        "content": "        // redo -\u003e edits same second article in unfiltered article list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ARTICLE, DESC_POWERBANK);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor copyDescriptor \u003d new EditArticleDescriptor(DESC_POWERBANK);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ARTICLE, copyDescriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ARTICLE, DESC_POWERBANK)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ARTICLE, DESC_MOUSE)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 20,
      "plty": 100,
      "Swiftkage": 27,
      "-": 81,
      "Jun An": 26
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_ARTICLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WATCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.FinderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_zeroKeywords_noArticleFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ARTICLES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate predicate \u003d preparePredicate(\"-n  \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateFilteredArticleList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredArticleList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void execute_multipleKeywords_oneArticleFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ARTICLES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate predicate \u003d preparePredicate(\"Carl Kurz Kurz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateFilteredArticleList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertEquals(Arrays.asList(WATCH), model.getFilteredArticleList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private FinderContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new FinderContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 19,
      "Swiftkage": 7,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.showArticleAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedModel.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        model.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedModel.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 3,
      "plty": 12,
      "Swiftkage": 4,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.deleteFirstArticle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.undoArticleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.undoArticleList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.redoArticleList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 21,
      "-": 18,
      "Jun An": 6
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.showArticleAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index lastArticleIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_ARTICLE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionSuccess(lastArticleIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredArticleList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(expectedModel, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(model, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        showArticleAtIndex(expectedModel, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of article list list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getArticleList().getArticleList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_ARTICLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_ARTICLE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 38,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.deleteFirstArticle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalArticleList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteFirstArticle(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.undoArticleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 4,
      "plty": 17,
      "-": 18,
      "Jun An": 6
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOUSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_FINDER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_MOUSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_MOUSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_POWERBANK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_RED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_RED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.POWERBANK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article expectedArticle \u003d new ArticleBuilder(MOUSE).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_POWERBANK + NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // multiple finder names - last finder name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + FINDER_DESC_POWERBANK + FINDER_DESC_MOUSE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + PHONE_DESC_POWERBANK + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_POWERBANK + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // multiple finders - last finder accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_POWERBANK + FINDER_DESC_MOUSE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article expectedArticleMultipleTags \u003d new ArticleBuilder(MOUSE).withTags(VALID_TAG_RED, VALID_TAG_BLUE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, new AddCommand(expectedArticleMultipleTags));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article expectedArticle \u003d new ArticleBuilder(POWERBANK).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_POWERBANK + FINDER_DESC_POWERBANK, new AddCommand(expectedArticle));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + VALID_PHONE_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + VALID_EMAIL_MOUSE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + VALID_DESCRIPTION_MOUSE + FINDER_DESC_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // missing finder prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + VALID_FINDER_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MOUSE + VALID_PHONE_MOUSE + VALID_EMAIL_MOUSE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + VALID_DESCRIPTION_MOUSE + VALID_FINDER_MOUSE, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED + TAG_DESC_BLUE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + INVALID_PHONE_DESC + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED + TAG_DESC_BLUE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED + TAG_DESC_BLUE, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INVALID_DESCRIPTION_DESC + FINDER_DESC_MOUSE + TAG_DESC_RED"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // invalid finder"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INVALID_DESCRIPTION_DESC + INVALID_FINDER_DESC + TAG_DESC_RED"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_BLUE, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + VALID_TAG_RED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INVALID_DESCRIPTION_DESC + FINDER_DESC_MOUSE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MOUSE + PHONE_DESC_MOUSE + EMAIL_DESC_MOUSE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED + TAG_DESC_BLUE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 23,
      "Swiftkage": 88,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "dan-delion": 1,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/ArticleListParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_OWNER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.EditArticleDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ArticleListParser parser \u003d new ArticleListParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ArticleUtil.getAddCommand(article));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new AddCommand(article), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ARTICLE), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder(article).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "                + INDEX_FIRST_ARTICLE.getOneBased() + \" \" + ArticleUtil.getEditArticleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ARTICLE, descriptor), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parseCommand_resolve() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name owner \u003d new Name(\"John Doe\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolveCommand command \u003d (ResolveCommand) parser.parseCommand(ResolveCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INDEX_FIRST_ARTICLE.getOneBased() + \" \" + PREFIX_OWNER + owner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertEquals(new ResolveCommand(INDEX_FIRST_ARTICLE, owner), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                FindCommand.COMMAND_WORD + \"-n \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_ARTICLE), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 36,
      "Swiftkage": 10,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ARTICLE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOUSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_FINDER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_MOUSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_POWERBANK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_BLUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_RED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_POWERBANK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_POWERBANK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_POWERBANK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_POWERBANK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_POWERBANK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_RED;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.EditArticleDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1 q/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FINDER_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid finder"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_POWERBANK + FINDER_DESC_POWERBANK,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_MOUSE + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Article} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_BLUE + TAG_DESC_RED + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_BLUE + TAG_EMPTY + TAG_DESC_RED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_BLUE + TAG_DESC_RED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_DESCRIPTION_POWERBANK"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + VALID_PHONE_POWERBANK + FINDER_DESC_POWERBANK, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MOUSE + TAG_DESC_RED + FINDER_DESC_POWERBANK"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK + NAME_DESC_POWERBANK + TAG_DESC_BLUE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_POWERBANK)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withPhone(VALID_PHONE_MOUSE).withEmail(VALID_EMAIL_POWERBANK).withFinder(VALID_FINDER_POWERBANK)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_POWERBANK).withTags(VALID_TAG_BLUE, VALID_TAG_RED).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MOUSE + EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withPhone(VALID_PHONE_MOUSE)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withEmail(VALID_EMAIL_POWERBANK).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withName(VALID_NAME_POWERBANK).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // finder"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FINDER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withFinder(VALID_FINDER_POWERBANK).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_POWERBANK;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withPhone(VALID_PHONE_POWERBANK).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withEmail(VALID_EMAIL_POWERBANK).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withDescription(VALID_DESCRIPTION_POWERBANK).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_RED;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withTags(VALID_TAG_RED).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_POWERBANK + TAG_DESC_BLUE + PHONE_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_POWERBANK + TAG_DESC_BLUE + PHONE_DESC_MOUSE + DESCRIPTION_DESC_MOUSE"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + TAG_DESC_RED + FINDER_DESC_POWERBANK + FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withPhone(VALID_PHONE_MOUSE)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withEmail(VALID_EMAIL_MOUSE).withDescription(VALID_DESCRIPTION_MOUSE)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_RED, VALID_TAG_BLUE).withFinder(VALID_FINDER_MOUSE)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_MOUSE;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withPhone(VALID_PHONE_MOUSE).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MOUSE + INVALID_PHONE_DESC + DESCRIPTION_DESC_MOUSE"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + PHONE_DESC_MOUSE + FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor \u003d new EditArticleDescriptorBuilder().withPhone(VALID_PHONE_MOUSE).withEmail(VALID_EMAIL_MOUSE)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MOUSE).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "plty"
        },
        "content": "        EditArticleDescriptor descriptor \u003d new EditArticleDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 43,
      "Swiftkage": 74,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, \"-n Alice\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, \"-n \\n Alice \\n \\t  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "Swiftkage": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(INDEX_FIRST_ARTICLE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(INDEX_FIRST_ARTICLE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 25,
      "-": 183
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/ResolveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_OWNER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.OWNER_DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.OWNER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_POWERBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_OWNER_MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_OWNER_POWERBANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.logic.commands.ResolveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ResolveCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResolveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private ResolveCommandParser parser \u003d new ResolveCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\", ResolveCommand.MESSAGE_NOT_RESOLVED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_POWERBANK, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OWNER_DESC, Name.MESSAGE_CONSTRAINTS); // invalid finder"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // valid owner followed by invalid owner. The test case for invalid owner followed by valid owner"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseFailure(parser, \"1\" + OWNER_DESC_MOUSE + INVALID_OWNER_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_fieldSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // owner"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ARTICLE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OWNER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name owner \u003d new Name(VALID_OWNER_POWERBANK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolveCommand expectedCommand \u003d new ResolveCommand(targetIndex, owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_multipleRepeatedField_acceptsLast() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OWNER_DESC_POWERBANK + OWNER_DESC_POWERBANK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + OWNER_DESC_MOUSE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name owner \u003d new Name(VALID_OWNER_MOUSE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolveCommand expectedCommand \u003d new ResolveCommand(targetIndex, owner);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_OWNER_DESC + OWNER_DESC_MOUSE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Name owner \u003d new Name(VALID_OWNER_MOUSE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolveCommand expectedCommand \u003d new ResolveCommand(targetIndex, owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 95
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_ARTICLE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/ArticleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.exceptions.DuplicateArticleException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ArticleList articleList \u003d new ArticleList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(Collections.emptyList(), articleList.getArticleList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void resetData_withValidReadOnlyArticleList_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList newData \u003d getTypicalArticleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(newData, articleList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void resetData_withDuplicateArticles_throwsDuplicateArticleException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        // Two articles with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG).withTags(VALID_TAG_BLUE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cArticle\u003e newArticles \u003d Arrays.asList(BAG, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleListStub newData \u003d new ArticleListStub(newArticles);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(DuplicateArticleException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.hasArticle(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_articleNotInArticleList_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(articleList.hasArticle(BAG));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_articleInArticleList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        articleList.addArticle(BAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(articleList.hasArticle(BAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_articleWithSameIdentityFieldsInArticleList_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        articleList.addArticle(BAG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(articleList.hasArticle(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void getArticleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.getArticleList().remove(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "     * A stub ReadOnlyArticleList whose articles list can violate interface constraints."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static class ArticleListStub implements ReadOnlyArticleList {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        private final ObservableList\u003cArticle\u003e articles \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleListStub(Collection\u003cArticle\u003e articles) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "            this.articles.setAll(articles);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "        public ObservableList\u003cArticle\u003e getArticleList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "            return articles;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 59,
      "plty": 33,
      "Swiftkage": 9,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WALLET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        modelManager.hasArticle(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_articleNotInArticleList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(modelManager.hasArticle(BAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void hasArticle_articleInArticleList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        modelManager.addArticle(BAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(modelManager.hasArticle(BAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void getFilteredArticleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        modelManager.getFilteredArticleList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ArticleList articleList \u003d new ArticleListBuilder().withArticle(BAG).withArticle(WALLET).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList differentArticleList \u003d new ArticleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        modelManager \u003d new ModelManager(articleList, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(articleList, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different articleList -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentArticleList, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String[] keywords \u003d BAG.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        modelManager.updateFilteredArticleList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(articleList, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        modelManager.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        differentUserPrefs.setArticleListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(articleList, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 13,
      "plty": 18,
      "Swiftkage": 9,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/VersionedArticleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.POWERBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WATCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "public class VersionedArticleListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final ReadOnlyArticleList articleListWithAmy \u003d new ArticleListBuilder().withArticle(POWERBANK).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final ReadOnlyArticleList articleListWithBob \u003d new ArticleListBuilder().withArticle(MOUSE).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private final ReadOnlyArticleList articleListWithCarl \u003d new ArticleListBuilder().withArticle(WATCH).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final ReadOnlyArticleList emptyArticleList \u003d new ArticleListBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void commit_singleArticleList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(emptyArticleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(emptyArticleList),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jun An"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void commit_multipleArticleListPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "                Arrays.asList(emptyArticleList, articleListWithAmy, articleListWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleListWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jun An"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void commit_multipleArticleListPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(emptyArticleList),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jun An"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canUndo_multipleArticleListPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canUndo_multipleArticleListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canUndo_singleArticleList_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(emptyArticleList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canUndo_multipleArticleListPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canRedo_multipleArticleListPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canRedo_multipleArticleListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canRedo_singleArticleList_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(emptyArticleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void canRedo_multipleArticleListPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void undo_multipleArticleListPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(emptyArticleList),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleListWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(articleListWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void undo_multipleArticleListPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jun An"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "                Arrays.asList(articleListWithAmy, articleListWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void undo_singleArticleList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(emptyArticleList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertThrows(VersionedArticleList.NoUndoableStateException.class, versionedArticleList::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void undo_multipleArticleListPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertThrows(VersionedArticleList.NoUndoableStateException.class, versionedArticleList::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void redo_multipleArticleListPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plty"
        },
        "content": "                Arrays.asList(emptyArticleList, articleListWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleListWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jun An"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void redo_multipleArticleListPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plty"
        },
        "content": "        versionedArticleList.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertArticleListListStatus(versionedArticleList,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(emptyArticleList),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleListWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plty"
        },
        "content": "                Collections.singletonList(articleListWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void redo_singleArticleList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(emptyArticleList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertThrows(VersionedArticleList.NoRedoableStateException.class, versionedArticleList::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void redo_multipleArticleListPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plty"
        },
        "content": "                emptyArticleList, articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertThrows(VersionedArticleList.NoRedoableStateException.class, versionedArticleList::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d prepareArticleListList(articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList copy \u003d prepareArticleListList(articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(versionedArticleList.equals(versionedArticleList));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList differentArticleListList \u003d prepareArticleListList(articleListWithBob, articleListWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.equals(differentArticleListList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList differentCurrentStatePointer \u003d prepareArticleListList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "plty"
        },
        "content": "                articleListWithAmy, articleListWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "plty"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedArticleList, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts that {@code versionedArticleList} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "plty"
        },
        "content": "     * states before {@code versionedArticleList#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "plty"
        },
        "content": "     * and states after {@code versionedArticleList#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertArticleListListStatus(VersionedArticleList versionedArticleList,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "plty"
        },
        "content": "                                             List\u003cReadOnlyArticleList\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "plty"
        },
        "content": "                                             ReadOnlyArticleList expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "plty"
        },
        "content": "                                             List\u003cReadOnlyArticleList\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new ArticleList(versionedArticleList), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "plty"
        },
        "content": "        while (versionedArticleList.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (ReadOnlyArticleList expectedArticleList : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertEquals(expectedArticleList, new ArticleList(versionedArticleList));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (ReadOnlyArticleList expectedArticleList : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertEquals(expectedArticleList, new ArticleList(versionedArticleList));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(versionedArticleList.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedArticleList.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Creates and returns a {@code VersionedArticleList} with the {@code articleListStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code VersionedArticleList#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "plty"
        },
        "content": "    private VersionedArticleList prepareArticleListList(ReadOnlyArticleList... articleListStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(articleListStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "plty"
        },
        "content": "        VersionedArticleList versionedArticleList \u003d new VersionedArticleList(articleListStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (int i \u003d 1; i \u003c articleListStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.resetData(articleListStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "plty"
        },
        "content": "        return versionedArticleList;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Shifts the {@code versionedArticleList#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jun An"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedArticleList versionedArticleList, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "plty"
        },
        "content": "            versionedArticleList.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jun An"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 154,
      "Swiftkage": 6,
      "Jun An": 138
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/ArticleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TRUE_ISRESOLVED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_OWNER_MOUSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        article.getTags().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void isSameArticle() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(BAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.isSameArticle(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG).withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same name, same description, different finder, phone, email, owner, isResolved -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withFinder(VALID_FINDER_MOUSE).withPhone(VALID_PHONE_MOUSE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withEmail(VALID_EMAIL_MOUSE).withOwner(VALID_OWNER_MOUSE).withIsResolved(TRUE_ISRESOLVED).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withEmail(VALID_EMAIL_MOUSE).withOwner(VALID_OWNER_MOUSE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(VALID_FINDER_MOUSE).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withPhone(VALID_PHONE_MOUSE).withOwner(VALID_OWNER_MOUSE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_BLUE).withIsResolved(TRUE_ISRESOLVED).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withTags(VALID_TAG_BLUE).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withIsResolved(TRUE_ISRESOLVED).withOwner(VALID_OWNER_MOUSE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.isSameArticle(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article aliceCopy \u003d new ArticleBuilder(BAG).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.equals(aliceCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(BAG.equals(BAG));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(MOUSE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG).withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withPhone(VALID_PHONE_MOUSE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withEmail(VALID_EMAIL_MOUSE).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withDescription(VALID_DESCRIPTION_MOUSE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different finder -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different owner -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withOwner(VALID_OWNER_MOUSE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different isResolved -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withIsResolved(TRUE_ISRESOLVED).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedAlice \u003d new ArticleBuilder(BAG).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(BAG.equals(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "Swiftkage": 63,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/ContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ContainsKeywordsPredicate firstPredicate \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ContainsKeywordsPredicate secondPredicate \u003d new ContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ContainsKeywordsPredicate firstPredicateCopy \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_containsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in name field"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"wallet\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Nike wallet\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in finder field"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in description field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"12pm\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Library\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in phone field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"88888888\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withPhone(\"88888888\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in email field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"lim@test.com\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in tag field"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"black\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"black\", \"blue\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in name field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in finder field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in description field"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"12pm\", \"Bob\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in tag field"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"black\", \"Blue\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"black\", \"Blue\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in different fields"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\", \"raining\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(\"Raining heavily\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"lim@test.com\", \"bOB\", \"blue\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withFinder(\"Bob\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"66666666\", \"blue\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withPhone(\"66666666\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withDescription(\"blue wallet\").build()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_doesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"-r\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob Hoe\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 109
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/DescriptionContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"12pm\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12pm\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12pm\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(\"-k\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"12pm\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match one keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"library\", \"11pm\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"11pm\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match all but one keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"library\", \"11pm\", \"raining\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"11pm library\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 79
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Description.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Description.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Description.isValid(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Description.isValid(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Description.isValid("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "                \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 38
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Email.isValid(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Email.isValid(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 14,
      "plty": 29,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/FinderContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class FinderContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new FinderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new FinderContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new FinderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_finderContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new FinderContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_finderDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        FinderContainsKeywordsPredicate predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"-r\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match one keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Hoe\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match all but one keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Marrissa\", \"Hoe\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice Hoe\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new FinderContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 78
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Nike\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Nike Wallet\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Nike\", \"Wallet\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Nike Wallet\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"nIkE\", \"wALLET\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Nike Wallet\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"-r\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Nike\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match one keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Nike\", \"Hoe\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Nike\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match all but one keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Nike\", \"White\", \"Wallet\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Nike Wallet\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"White\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Nike Wallet\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "Swiftkage": 18,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Name.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Name.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Name.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Name.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Name.isValid(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Name.isValid(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Name.isValid(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Name.isValid(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Name.isValid(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 14,
      "plty": 12,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/NotResolvedPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class NotResolvedPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_notResolved_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        NotResolvedPredicate predicate \u003d new NotResolvedPredicate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withIsResolved(false).build()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob Hoe\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_resolved_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        NotResolvedPredicate predicate \u003d new NotResolvedPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withIsResolved(true).build()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob Hoe\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 33
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(Phone.isValid(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Phone.isValid(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Phone.isValid(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(Phone.isValid(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/ResolvedAndContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class ResolvedAndContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new ResolvedAndContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new ResolvedAndContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new ResolvedAndContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_resolvedAndContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new ResolvedAndContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withIsResolved(true).build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in name field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"wallet\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Nike wallet\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in finder field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in description field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"12pm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Library\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in phone field"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"88888888\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withPhone(\"88888888\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in email field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"lim@test.com\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in tag field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"black\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"black\", \"blue\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in name field"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"Alice Bob\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in finder field"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in description field"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"12pm\", \"Bob\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in tag field"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"black\", \"Blue\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"black\", \"Blue\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in different fields"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withIsResolved(true).build()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\", \"raining\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(\"Raining heavily\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"lim@test.com\", \"bOB\", \"blue\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\").withIsResolved(true)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withFinder(\"Bob\").build()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"66666666\", \"blue\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withPhone(\"66666666\").withIsResolved(true)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withDescription(\"blue wallet\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_notResolvedAndContainsKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // no keywords and not resolved"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new ResolvedAndContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withIsResolved(false).build()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in name field and not resolved"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"wallet\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Nike wallet\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in finder field and not resolved"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in description field and not resolved"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"12pm\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"12pm Library\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in phone field and not resolved"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"88888888\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withPhone(\"88888888\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in email field and not resolved"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"lim@test.com\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword in tag field and not resolved"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Collections.singletonList(\"black\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"black\", \"blue\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in name field and not resolved"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Alice Bob\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in finder field and not resolved"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withFinder(\"Alice Bob\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in description field and not resolved"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"12pm\", \"Bob\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withDescription(\"12pm Bob\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in tag field and not resolved"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"black\", \"Blue\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"black\", \"Blue\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords in different fields and not resolved"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withIsResolved(false).build()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"waLLet\", \"bOB\", \"raining\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withFinder(\"Bob\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withDescription(\"Raining heavily\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"lim@test.com\", \"bOB\", \"blue\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withEmail(\"lim@test.com\").withIsResolved(false)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withFinder(\"Bob\").build()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"66666666\", \"blue\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withPhone(\"66666666\").withIsResolved(false)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withTags(\"blue\", \"sticker\").withDescription(\"blue wallet\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_resolvedButDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"-r\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob Hoe\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(true).build()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_notResolvedAndDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords and not resolved"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ResolvedAndContainsKeywordsPredicate predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"-r\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"Wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword and not resolved"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new ResolvedAndContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withName(\"wallet\").withDescription(\"test description\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(\"Bob Hoe\").withPhone(\"99999999\").withEmail(\"hi@tt.com\").withIsResolved(false).build()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 193
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/TagContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // different article -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"blue\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"blue\", \"worn\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"blue\", \"worn\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"blue\", \"worn\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"blue\", \"worn\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(predicate.test(new ArticleBuilder().withTags(\"blue\", \"worn\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new TagContainsKeywordsPredicate(Arrays.asList(\"-k\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"blue\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match one keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"bear\", \"tiger\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"tiger\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // match all but one keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"bear\", \"tiger\", \"fox\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"tiger\", \"bear\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"red\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(predicate.test(new ArticleBuilder().withTags(\"blue\", \"worn\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Swiftkage": 79
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/article/UniqueArticleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.article;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.exceptions.ArticleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.exceptions.DuplicateArticleException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "public class UniqueArticleListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "    private final UniqueArticleList uniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void contains_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void contains_articleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(uniqueArticleList.contains(BAG));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void contains_articleInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(uniqueArticleList.contains(BAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void contains_articleWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(VALID_FINDER_MOUSE).withTags(VALID_TAG_BLUE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(uniqueArticleList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void add_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void add_duplicateArticle_throwsDuplicateArticleException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(DuplicateArticleException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_nullTargetArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(null, BAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_nullEditedArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_targetArticleNotInList_throwsArticleNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(ArticleNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, BAG);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_editedArticleIsSameArticle_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, BAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedUniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_editedArticleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedAlice \u003d new ArticleBuilder(BAG)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .withFinder(VALID_FINDER_MOUSE).withTags(VALID_TAG_BLUE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedUniqueArticleList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_editedArticleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, MOUSE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedUniqueArticleList.add(MOUSE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticle_editedArticleHasNonUniqueIdentity_throwsDuplicateArticleException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(MOUSE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(DuplicateArticleException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.setArticle(BAG, MOUSE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void remove_nullArticle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void remove_articleDoesNotExist_throwsArticleNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(ArticleNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.remove(BAG);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void remove_existingArticle_removesArticle() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.remove(BAG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles_nullUniqueArticleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.setArticles((UniqueArticleList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles_uniqueArticleList_replacesOwnListWithProvidedUniqueArticleList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedUniqueArticleList.add(MOUSE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.setArticles(expectedUniqueArticleList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.setArticles((List\u003cArticle\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        uniqueArticleList.add(BAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cArticle\u003e articleList \u003d Collections.singletonList(MOUSE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.setArticles(articleList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plty"
        },
        "content": "        UniqueArticleList expectedUniqueArticleList \u003d new UniqueArticleList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedUniqueArticleList.add(MOUSE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedUniqueArticleList, uniqueArticleList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void setArticles_listWithDuplicateArticles_throwsDuplicateArticleException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cArticle\u003e listWithDuplicateArticles \u003d Arrays.asList(BAG, BAG);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(DuplicateArticleException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.setArticles(listWithDuplicateArticles);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "        uniqueArticleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 150,
      "Swiftkage": 37
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        userPrefs.setArticleListFilePath(Paths.get(\"articlelist.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlArticleListStorage articleListStorage \u003d new XmlArticleListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        storageManager \u003d new StorageManager(articleListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void articleListReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "         * {@link XmlArticleListStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlArticleListStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList original \u003d getTypicalArticleList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        storageManager.saveArticleList(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "        ReadOnlyArticleList retrieved \u003d storageManager.readArticleList().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(original, new ArticleList(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void getArticleListFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertNotNull(storageManager.getArticleListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void handleArticleListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlArticleListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        storage.handleArticleListChangedEvent(new ArticleListChangedEvent(new ArticleList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "    class XmlArticleListStorageExceptionThrowingStub extends XmlArticleListStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        public XmlArticleListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        public void saveArticleList(ReadOnlyArticleList articleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 25,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/storage/XmlAdaptedArticleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.storage.XmlAdaptedArticle.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WALLET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlAdaptedArticleTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String INVALID_NAME \u003d \"W@llet\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String INVALID_FINDER \u003d \"J*ames\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_NAME \u003d WALLET.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_FINDER \u003d WALLET.getFinder().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_PHONE \u003d WALLET.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_EMAIL \u003d WALLET.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d WALLET.getDescription().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final String VALID_IMAGE \u003d WALLET.getImage().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d WALLET.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final boolean FALSE_ISRESOLVED \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private static final String DEFAULT_OWNER \u003d \"Not Claimed\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_validArticleDetails_returnsArticle() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        XmlAdaptedArticle article \u003d new XmlAdaptedArticle(WALLET);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertEquals(WALLET, article.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new XmlAdaptedArticle(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "                        VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d new XmlAdaptedArticle("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION, VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new XmlAdaptedArticle(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "                        VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        XmlAdaptedArticle article \u003d new XmlAdaptedArticle(VALID_NAME, null, VALID_EMAIL, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new XmlAdaptedArticle(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "                        VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        XmlAdaptedArticle article \u003d new XmlAdaptedArticle(VALID_NAME, VALID_PHONE, null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new XmlAdaptedArticle(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "                        VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        XmlAdaptedArticle article \u003d new XmlAdaptedArticle(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "                VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, article::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlAdaptedArticle article \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                new XmlAdaptedArticle(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "                        VALID_IMAGE, VALID_FINDER, DEFAULT_OWNER, FALSE_ISRESOLVED, invalidTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, article::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 42,
      "plty": 43,
      "Swiftkage": 23,
      "Jun An": 18
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/storage/XmlArticleListStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.NECKLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.SHIRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlArticleListStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlArticleListStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void readArticleList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        readArticleList(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "    private java.util.Optional\u003cReadOnlyArticleList\u003e readArticleList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new XmlArticleListStorage(Paths.get(filePath)).readArticleList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(readArticleList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        readArticleList(\"NotXmlFormatArticleList.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void readArticleList_invalidArticleArticleList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        readArticleList(\"invalidArticleArticleList.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void readArticleList_invalidAndValidArticleArticleList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        readArticleList(\"invalidAndValidArticleArticleList.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void readAndSaveArticleList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempArticleList.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList original \u003d getTypicalArticleList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlArticleListStorage xmlArticleListStorage \u003d new XmlArticleListStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        xmlArticleListStorage.saveArticleList(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        ReadOnlyArticleList readBack \u003d xmlArticleListStorage.readArticleList(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(original, new ArticleList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        original.addArticle(SHIRT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        original.removeArticle(BAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        xmlArticleListStorage.saveArticleList(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        readBack \u003d xmlArticleListStorage.readArticleList(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(original, new ArticleList(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        original.addArticle(NECKLACE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        xmlArticleListStorage.saveArticleList(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        readBack \u003d xmlArticleListStorage.readArticleList().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(original, new ArticleList(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList_nullArticleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": "        saveArticleList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Saves {@code articleList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void saveArticleList(ReadOnlyArticleList articleList, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "            new XmlArticleListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "                    .saveArticleList(articleList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void saveArticleList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "        saveArticleList(new ArticleList(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 38,
      "Swiftkage": 6,
      "-": 75,
      "Jun An": 8
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/storage/XmlSerializableArticleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jun An"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import seedu.lostandfound.testutil.TypicalArticles;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "public class XmlSerializableArticleListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableArticleListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path TYPICAL_ARTICLES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalArticlesArticleList.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path INVALID_ARTICLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidArticleArticleList.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path DUPLICATE_ARTICLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateArticleArticleList.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_typicalArticlesFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ARTICLES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "                XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList articleListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList typicalArticlesArticleList \u003d TypicalArticles.getTypicalArticleList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(articleListFromFile, typicalArticlesArticleList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_invalidArticleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ARTICLE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "                XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jun An"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jun An"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jun An"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void toModelType_duplicateArticles_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_ARTICLE_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "                XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        thrown.expectMessage(XmlSerializableArticleList.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jun An"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 5,
      "plty": 21,
      "Swiftkage": 6,
      "-": 2,
      "Jun An": 19
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/ArticleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": " * A utility class to help with building Article objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Nike Wallet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String DEFAULT_IMAGE \u003d \"data/images/0.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Found at 123, Jurong West Ave 6\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final boolean DEFAULT_ISRESOLVED \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final String DEFAULT_FINDER \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DEFAULT_OWNER \u003d \"Not Claimed\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private Name finder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private Name owner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    private boolean isResolved;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        image \u003d new Image (DEFAULT_IMAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        finder \u003d new Name(DEFAULT_FINDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        owner \u003d new Name(DEFAULT_OWNER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        isResolved \u003d DEFAULT_ISRESOLVED;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**   .append(\" Description: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Initializes the ArticleBuilder with the data of {@code articleToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleBuilder(Article articleToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        name \u003d articleToCopy.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        phone \u003d articleToCopy.getPhone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        email \u003d articleToCopy.getEmail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        description \u003d articleToCopy.getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        image \u003d articleToCopy.getImage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        finder \u003d articleToCopy.getFinder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        owner \u003d articleToCopy.getOwner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        isResolved \u003d articleToCopy.getIsResolved();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(articleToCopy.getTags());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Name} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code Phone} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code Email} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Description} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Image} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleBuilder withImage(String image) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.image \u003d new Image(image);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code Finder} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withFinder(String finder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.finder \u003d new Name(finder);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code Owner} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withOwner(String owner) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.owner \u003d new Name(owner);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code isResolved} of the {@code Article} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withIsResolved(boolean isResolved) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.isResolved \u003d isResolved;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Article} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public ArticleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "    public Article build() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "        return new Article(name, phone, email, description, image, finder, owner, isResolved, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 97,
      "Swiftkage": 45
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/ArticleListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": " * A utility class to help with building Articlelist objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": " *     {@code ArticleList ab \u003d new ArticleListBuilder().withArticle(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ArticleList articleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList \u003d new ArticleList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListBuilder(ArticleList articleList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.articleList \u003d articleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Adds a new {@code Article} to the {@code ArticleList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListBuilder withArticle(Article article) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleList.addArticle(article);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        return articleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 16,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/ArticleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_FINDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": " * A utility class for Article."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns an add command string for adding the {@code article}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getAddCommand(Article article) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getArticleDetails(article);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the part of command string for the given {@code article}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getArticleDetails(Article article) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        sb.append(PREFIX_NAME + article.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        sb.append(PREFIX_FINDER + article.getFinder().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        sb.append(PREFIX_PHONE + article.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        sb.append(PREFIX_EMAIL + article.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + article.getDescription().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        article.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the part of command string for the given {@code EditArticleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static String getEditArticleDescriptorDetails(EditArticleDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor.getFinder().ifPresent(finder -\u003e sb.append(PREFIX_FINDER).append(finder.fullName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 26,
      "Swiftkage": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/EditArticleDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand.EditArticleDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": " * A utility class to help with building EditArticleDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "public class EditArticleDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    private EditArticleDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor \u003d new EditArticleDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder(EditArticleDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        this.descriptor \u003d new EditArticleDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns an {@code EditArticleDescriptor} with fields containing {@code article}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder(Article article) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor \u003d new EditArticleDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setName(article.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setPhone(article.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setEmail(article.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setDescription(article.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor.setFinder(article.getFinder());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setTags(article.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Name} of the {@code EditArticleDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditArticleDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Email} of the {@code EditArticleDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Sets the {@code Description} of the {@code EditArticleDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     * Sets the {@code Finder} of the {@code EditArticleDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public EditArticleDescriptorBuilder withFinder(String finder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        descriptor.setFinder(new Name(finder));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditArticleDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    public EditArticleDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 87,
      "Swiftkage": 9
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the middle index of the article in the {@code model}\u0027s article list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Index.fromOneBased(model.getFilteredArticleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the last index of the article in the {@code model}\u0027s article list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        return Index.fromOneBased(model.getFilteredArticleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns the article in the {@code model}\u0027s article list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static Article getArticle(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        return model.getFilteredArticleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/TypicalArticles.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_POWERBANK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_POWERBANK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_POWERBANK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_POWERBANK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_POWERBANK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_RED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": " * A utility class containing a list of {@code Article} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "public class TypicalArticles {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String DEFAULT_OWNER \u003d \"Not Claimed\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article BAG \u003d new ArticleBuilder().withFinder(\"Alice Pauline\").withOwner(\"Not Claimed\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withDescription(\"Found at 123, Jurong West Ave 6\").withEmail(\"alice@example.com\").withName(\"Nike Bag\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withPhone(\"94351253\").withIsResolved(false).withTags(\"Black\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article WALLET \u003d new ArticleBuilder().withFinder(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withDescription(\"Found at 311, Clementi Ave 2\").withName(\"Adidas Wallet\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withOwner(\"Not Claimed\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withIsResolved(false).withTags(\"Black\", \"Sticker\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article WATCH \u003d new ArticleBuilder().withName(\"Casio Watch\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"heinz@example.com\").withIsResolved(false).withDescription(\"Found at wall street\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withOwner(\"Not Claimed\").withFinder(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article HEADPHONE \u003d new ArticleBuilder().withName(\"AfterShockz Headphone\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withDescription(\"Found at 10th street\").withOwner(\"Not Claimed\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withFinder(\"Daniel Meier\").withIsResolved(false).withTags(\"Blue\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article LAPTOP \u003d new ArticleBuilder().withFinder(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"werner@example.com\").withDescription(\"Found at michegan ave\").withIsResolved(false)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withName(\"Acer Aspire Laptop\").withOwner(\"Not Claimed\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article PHONE \u003d new ArticleBuilder().withFinder(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withIsResolved(false).withPhone(\"9482427\").withName(\"IPhone XS\").withOwner(\"Not Claimed\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"lydia@example.com\").withDescription(\"Found at little tokyo\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article CARD \u003d new ArticleBuilder().withFinder(\"George Best\").withOwner(\"Not Claimed\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withIsResolved(false).withPhone(\"9482442\").withEmail(\"anna@example.com\").withName(\"Matric Card\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withDescription(\"Found at 4th street\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article FAN \u003d new ArticleBuilder().withFinder(\"Helen Walker\").withPhone(\"9481124\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"walker@example.com\").withDescription(\"Found at lalaland ave\").withIsResolved(true)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withName(\"Mini Fan\").withOwner(\"Jenny Bee\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article PEN \u003d new ArticleBuilder().withFinder(\"Ollie Dee\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withIsResolved(true).withPhone(\"8182427\").withName(\"Nice Pen\").withOwner(\"Carl Kurz\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"Dee@example.com\").withDescription(\"Found at Little India\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article SHIRT \u003d new ArticleBuilder().withName(\"Blue PayPal Shirt\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"stefan@example.com\").withDescription(\"Found at little india\").withIsResolved(false)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withFinder(\"Hoon Meier\").withOwner(\"Not Claimed\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article NECKLACE \u003d new ArticleBuilder().withName(\"Pandora Necklace\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withEmail(\"hans@example.com\").withDescription(\"Found at chicago ave\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withOwner(\"Not Claimed\").withFinder(\"Ida Mueller\").withIsResolved(false).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "    // Manually added - Article\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article POWERBANK \u003d new ArticleBuilder().withName(VALID_NAME_POWERBANK)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withPhone(VALID_PHONE_POWERBANK).withEmail(VALID_EMAIL_POWERBANK).withFinder(VALID_FINDER_POWERBANK)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withOwner(DEFAULT_OWNER).withDescription(VALID_DESCRIPTION_POWERBANK)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withIsResolved(false).withTags(VALID_TAG_RED).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final Article MOUSE \u003d new ArticleBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withName(VALID_NAME_MOUSE).withPhone(VALID_PHONE_MOUSE).withEmail(VALID_EMAIL_MOUSE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MOUSE).withIsResolved(false).withOwner(DEFAULT_OWNER)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            .withTags(VALID_TAG_BLUE, VALID_TAG_RED).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "    public static final String FINDER_KEYWORD_MATCHING_MEIER \u003d \"-f Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "    private TypicalArticles() {} // prevents instantiation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns an {@code ArticleList} with all the typical articles."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static ArticleList getTypicalArticleList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleList ab \u003d new ArticleList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (Article article : getTypicalArticles()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "            ab.addArticle(article);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static List\u003cArticle\u003e getTypicalArticles() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BAG, WALLET, WATCH, HEADPHONE, LAPTOP, PHONE, CARD, FAN, PEN));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 13,
      "Swiftkage": 59,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final Index INDEX_FIRST_ARTICLE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final Index INDEX_SECOND_ARTICLE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static final Index INDEX_THIRD_ARTICLE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/ArticleCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertCardDisplaysArticle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import guitests.guihandles.ArticleCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleWithNoTags \u003d new ArticleBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCard articleCard \u003d new ArticleCard(articleWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "        uiPartRule.setUiPart(articleCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCardDisplay(articleCard, articleWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleWithTags \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleCard \u003d new ArticleCard(articleWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        uiPartRule.setUiPart(articleCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCardDisplay(articleCard, articleWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article article \u003d new ArticleBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCard articleCard \u003d new ArticleCard(article, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        // same article, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCard copy \u003d new ArticleCard(article, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(articleCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(articleCard.equals(articleCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(articleCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(articleCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        // different article, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article differentArticle \u003d new ArticleBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(articleCard.equals(new ArticleCard(differentArticle, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        // same article, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(articleCard.equals(new ArticleCard(article, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts that {@code articleCard} displays the details of {@code expectedArticle} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertCardDisplay(ArticleCard articleCard, Article expectedArticle, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCardHandle articleCardHandle \u003d new ArticleCardHandle(articleCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", articleCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        // verify article details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCardDisplaysArticle(expectedArticle, articleCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 72
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/ArticleDetailsPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import guitests.guihandles.ArticleDetailsPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ArticlePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "public class ArticleDetailsPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private ArticlePanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private ArticleDetailsPanel articleDetailsPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    private ArticleDetailsPanelHandle articleDetailsPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        selectionChangedEventStub \u003d new ArticlePanelSelectionChangedEvent(BAG);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        guiRobot.interact(() -\u003e articleDetailsPanel \u003d new ArticleDetailsPanel());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        uiPartRule.setUiPart(articleDetailsPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        articleDetailsPanelHandle \u003d new ArticleDetailsPanelHandle(getChildNode(articleDetailsPanel.getRoot(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                ArticleDetailsPanelHandle.ARTICLE_DETAILS_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        // default article details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertEquals(\"\", articleDetailsPanelHandle.getLoadedDetails());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        // associated details of an article"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String expectedArticleDetails \u003d BAG.getName().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dan-delion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertEquals(expectedArticleDetails, articleDetailsPanelHandle.getLoadedDetails());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "dan-delion": 36,
      "Swiftkage": 3
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/ArticleListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.getTypicalArticles;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertCardDisplaysArticle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import guitests.guihandles.ArticleCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import guitests.guihandles.ArticleListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.storage.XmlSerializableArticleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ArticleListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final ObservableList\u003cArticle\u003e TYPICAL_ARTICLES \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "            FXCollections.observableList(getTypicalArticles());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_ARTICLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ArticleListPanelHandle articleListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        initUi(TYPICAL_ARTICLES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ARTICLES.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleListPanelHandle.navigateToCard(TYPICAL_ARTICLES.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "            Article expectedArticle \u003d TYPICAL_ARTICLES.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "            ArticleCardHandle actualCard \u003d articleListPanelHandle.getArticleCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertCardDisplaysArticle(expectedArticle, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plty"
        },
        "content": "        initUi(TYPICAL_ARTICLES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        ArticleCardHandle expectedArticle \u003d articleListPanelHandle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                .getArticleCardHandle(INDEX_SECOND_ARTICLE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleCardHandle selectedArticle \u003d articleListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCardEquals(expectedArticle, selectedArticle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Verifies that creating and deleting large number of articles in {@code ArticleListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        ObservableList\u003cArticle\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plty"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        }, \"Creation and deletion of article cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a list of articles containing {@code articleCount} articles that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "    private ObservableList\u003cArticle\u003e createBackingList(int articleCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithArticles(articleCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        XmlSerializableArticleList xmlArticleList \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableArticleList.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        return FXCollections.observableArrayList(xmlArticleList.toModelType().getArticleList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a .xml file containing {@code articleCount} articles. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Path createXmlFileWithArticles(int articleCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        builder.append(\"\u003carticlelist\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (int i \u003d 0; i \u003c articleCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003carticles\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003cdescription\u003ea\u003c/description\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            builder.append(\"\u003cfinder\u003ea\u003c/finder\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            builder.append(\"\u003cowner\u003ea\u003c/owner\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "            builder.append(\"\u003cisResolved\u003efalse\u003c/isResolved\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "            builder.append(\"\u003c/articles\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plty"
        },
        "content": "        builder.append(\"\u003c/articlelist\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        Path manyArticlesFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyArticles.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "        FileUtil.createFile(manyArticlesFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "        FileUtil.writeToFile(manyArticlesFile, builder.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "        manyArticlesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plty"
        },
        "content": "        return manyArticlesFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Initializes {@code articleListPanelHandle} with a {@code ArticleListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ArticleListPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void initUi(ObservableList\u003cArticle\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        ArticleListPanel articleListPanel \u003d new ArticleListPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "        uiPartRule.setUiPart(articleListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleListPanelHandle \u003d new ArticleListPanelHandle(getChildNode(articleListPanel.getRoot(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plty"
        },
        "content": "                ArticleListPanelHandle.ARTICLE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 123,
      "dan-delion": 2,
      "Swiftkage": 3
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": " * A GUI unit test class for ArticleList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Paul Tan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Paul Tan": 5,
      "plty": 2,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 7,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.model.ArticleListChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final ArticleListChangedEvent EVENT_STUB \u003d new ArticleListChangedEvent(new ArticleList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        // after article list is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 8,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@link seedu.lostandfound.ui.UiPartTest#VALID_FILE_PATH}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "dan-delion": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import guitests.guihandles.ArticleCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import guitests.guihandles.ArticleListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void assertCardEquals(ArticleCardHandle expectedCard, ArticleCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedArticle}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void assertCardDisplaysArticle(Article expectedArticle, ArticleCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedArticle.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts that the list in {@code articleListPanelHandle} displays the details of {@code articles} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void assertListMatching(ArticleListPanelHandle articleListPanelHandle, Article... articles) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        for (int i \u003d 0; i \u003c articles.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "            articleListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "            assertCardDisplaysArticle(articles[i], articleListPanelHandle.getArticleCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts that the list in {@code articleListPanelHandle} displays the details of {@code articles} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void assertListMatching(ArticleListPanelHandle articleListPanelHandle, List\u003cArticle\u003e articles) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertListMatching(articleListPanelHandle, articles.toArray(new Article[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Asserts the size of the list in {@code articleListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void assertListSize(ArticleListPanelHandle articleListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        int numberOfPeople \u003d articleListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 24,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/lostandfound/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plty"
        },
        "content": "package seedu.lostandfound.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOUSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_FINDER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_MOUSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_MOUSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_POWERBANK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_BLUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_RED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MOUSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_EMAIL_MOUSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_FINDER_MOUSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_PHONE_MOUSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.BAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.NECKLACE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.POWERBANK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.SHIRT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WATCH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "public class AddCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a article without tags to a non-empty article list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article toAdd \u003d POWERBANK;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_POWERBANK + \"  \" + FINDER_DESC_POWERBANK"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + PHONE_DESC_POWERBANK + \" \" + EMAIL_DESC_POWERBANK + \"   \" + DESCRIPTION_DESC_POWERBANK + \"   \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + TAG_DESC_RED + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.addArticle(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a article with all fields same as another article in the article list except name -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d new ArticleBuilder(POWERBANK).withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_MOUSE + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK + TAG_DESC_RED;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: add a article with all fields same as another article in the article list except description"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d new ArticleBuilder(POWERBANK).withDescription(VALID_DESCRIPTION_MOUSE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add to empty article list -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteAllArticles();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(BAG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a article with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d MOUSE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_BLUE + PHONE_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + NAME_DESC_MOUSE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_MOUSE + TAG_DESC_RED + EMAIL_DESC_MOUSE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a article, missing tags -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(SHIRT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filters the article list before adding -\u003e added */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(NECKLACE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        /* ------------------------ Perform add operation while a article card is selected -------------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: selects first card in the article list, add a article -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plty"
        },
        "content": "        selectArticle(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(WATCH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a duplicate article -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(SHIRT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a duplicate article except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d new ArticleBuilder(SHIRT).withPhone(VALID_PHONE_MOUSE).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a duplicate article except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d new ArticleBuilder(SHIRT).withEmail(VALID_EMAIL_MOUSE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: add a duplicate article except with different finder -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        toAdd \u003d new ArticleBuilder(SHIRT).withFinder(VALID_FINDER_MOUSE).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: add a duplicate article except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d ArticleUtil.getAddCommand(SHIRT) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: missing finder -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_POWERBANK + EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d \"adds \" + ArticleUtil.getArticleDetails(toAdd);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + INVALID_PHONE_DESC + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: invalid finder -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INVALID_FINDER_DESC + DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK + EMAIL_DESC_POWERBANK"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. {@code Storage} and {@code ArticleListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 5. Article details and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertCommandSuccess(Article toAdd) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(ArticleUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Article)}. Executes {@code command}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Article)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertCommandSuccess(String command, Article toAdd) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.addArticle(toAdd);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Article)} except asserts that"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 2. {@code Storage} and {@code ArticleListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Article)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. {@code Storage} and {@code ArticleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 5. Article details, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 68,
      "dan-delion": 3,
      "Swiftkage": 75,
      "-": 125
    }
  },
  {
    "path": "src/test/java/systemtests/ArticleListSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import guitests.guihandles.ArticleDetailsPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "import guitests.guihandles.ArticleListPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.TypicalArticles;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": " * A system test class for ArticleList, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "public abstract class ArticleListSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected ArticleList getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        return TypicalArticles.getTypicalArticleList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plty"
        },
        "content": "    public ArticleListPanelHandle getArticleListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        return mainWindowHandle.getArticleListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "    public ArticleDetailsPanelHandle getArticleDetailsPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        return mainWindowHandle.getArticleDetailsPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Displays all articles in the article list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected void showAllArticles() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertEquals(getModel().getArticleList().getArticleList().filtered(NOT_RESOLVED_PREDICATE).size(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                getModel().getFilteredArticleList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Displays all articles with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected void showArticlesWithName(String keyword) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(getModel().getFilteredArticleList().size() \u003c getModel().getArticleList().getArticleList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Selects the article at {@code index} of the displayed list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected void selectArticle(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(index.getZeroBased(), getArticleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Deletes all articles in the article list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected void deleteAllArticles() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(0, getModel().getArticleList().getArticleList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same article objects as {@code expectedModel}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plty"
        },
        "content": "     * and the article list panel displays the articles in the model correctly."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(new ArticleList(expectedModel.getArticleList()), testApp.readStorageArticleList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertListMatching(getArticleListPanel(), expectedModel.getFilteredArticleList()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                .filtered(NOT_RESOLVED_PREDICATE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Calls {@code ArticleDetailsPanelHandle}, {@code ArticleListPanelHandle} and"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * {@code StatusBarFooterHandle} to remember their current state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        getArticleDetailsPanel().rememberDetails();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plty"
        },
        "content": "        getArticleListPanel().rememberSelectedArticleCard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the article detail\u0027s content remains displaying"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * the detail of the previously selected article."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @see ArticleDetailsPanelHandle#isDetailsChanged()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertFalse(getArticleDetailsPanel().isDetailsChanged());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(getArticleListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Asserts that the article detail\u0027s content is changed to display the details of the article in the article list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * panel at {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @see ArticleDetailsPanelHandle#isDetailsChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListPanelHandle#isSelectedArticleCardChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plty"
        },
        "content": "        getArticleListPanel().navigateToCard(getArticleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plty"
        },
        "content": "        String selectedCardName \u003d getArticleListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        String expectedDetails \u003d selectedCardName;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertEquals(expectedDetails, getArticleDetailsPanel().getLoadedDetails());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getArticleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Asserts that the article detail\u0027s content and the selected card in the article list panel remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * @see ArticleDetailsPanelHandle#isDetailsChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListPanelHandle#isSelectedArticleCardChanged()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertFalse(getArticleDetailsPanel().isDetailsChanged());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertFalse(getArticleListPanel().isSelectedArticleCardChanged());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertEquals(\"\", getArticleDetailsPanel().getLoadedDetails());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertListMatching(getArticleListPanel(), getModel().getFilteredArticleList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 43,
      "dan-delion": 20,
      "Swiftkage": 5,
      "-": 212
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ClearCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: clear non-empty article list, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: undo clearing article list -\u003e original article list restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: redo clearing article list -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: selects first card in article list and clears article list -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original article list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        selectArticle(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filters the article list before clearing -\u003e entire article list cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original article list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: clear empty article list -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 21,
      "Swiftkage": 2,
      "-": 78
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.DeleteCommand.MESSAGE_DELETE_ARTICLE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TestUtil.getArticle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "public class DeleteCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: delete the first article in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                + \"      \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article deletedArticle \u003d removeArticle(expectedModel, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ARTICLE_SUCCESS, deletedArticle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: delete the last article in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index lastArticleIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(lastArticleIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: undo deleting the last article in the list -\u003e last article restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: redo deleting the last article in the list -\u003e last article deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "        removeArticle(modelBeforeDeletingLast, lastArticleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: delete the middle article in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index middleArticleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(middleArticleIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, delete index within bounds of article list and article list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredArticleList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, delete index within bounds of article list but out of bounds of article list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plty"
        },
        "content": "        int invalidIndex \u003d getModel().getArticleList().getArticleList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        /* --------------------- Performing delete operation while a article card is selected ----------------------- */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: delete the selected article -\u003e article list panel selects the article before the deleted article */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        showAllArticles();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plty"
        },
        "content": "        selectArticle(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plty"
        },
        "content": "        deletedArticle \u003d removeArticle(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_ARTICLE_SUCCESS, deletedArticle);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plty"
        },
        "content": "                getModel().getArticleList().getArticleList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Removes the {@code Article} at the specified {@code index} in {@code model}\u0027s article list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @return the removed article"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "    private Article removeArticle(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article targetArticle \u003d getArticle(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.deleteArticle(targetArticle);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plty"
        },
        "content": "        return targetArticle;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Deletes the article at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article deletedArticle \u003d removeArticle(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ARTICLE_SUCCESS, deletedArticle);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 3. Asserts that the article details and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the article"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * details and selected card are expected to update accordingly depending on the card"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 3. Asserts that the article details, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 54,
      "dan-delion": 9,
      "Swiftkage": 3,
      "-": 130
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MOUSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.DESCRIPTION_DESC_POWERBANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_MOUSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.EMAIL_DESC_POWERBANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_MOUSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.FINDER_DESC_POWERBANK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_FINDER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_MOUSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.NAME_DESC_POWERBANK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_MOUSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.PHONE_DESC_POWERBANK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.TAG_DESC_RED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_DESCRIPTION_POWERBANK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_MOUSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_NAME_POWERBANK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.logic.commands.CommandTestUtil.VALID_TAG_BLUE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.model.Model.NOT_RESOLVED_PREDICATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.MOUSE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.POWERBANK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.ArticleUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plty"
        },
        "content": "public class EditCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_MOUSE + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_MOUSE + \"  \" + PHONE_DESC_MOUSE + \" \" + EMAIL_DESC_MOUSE + \"  \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + DESCRIPTION_DESC_MOUSE + \" \" + TAG_DESC_BLUE + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article editedArticle \u003d new ArticleBuilder(MOUSE).withTags(VALID_TAG_BLUE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, index, editedArticle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: undo editing the last article in the list -\u003e last article restored */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: redo editing the last article in the list -\u003e last article edited again */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateArticle("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "                getModel().getFilteredArticleList().get(INDEX_FIRST_ARTICLE.getZeroBased()), editedArticle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(command, index, MOUSE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(getModel().getArticleList().getArticleList().contains(MOUSE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertNotEquals(getModel().getFilteredArticleList().get(index.getZeroBased()), MOUSE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_POWERBANK + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_MOUSE + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedArticle \u003d new ArticleBuilder(MOUSE).withName(VALID_NAME_POWERBANK).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, index, editedArticle);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different description"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_SECOND_ARTICLE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_POWERBANK + FINDER_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedArticle \u003d new ArticleBuilder(MOUSE).withDescription(VALID_DESCRIPTION_POWERBANK).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, index, editedArticle);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plty"
        },
        "content": "        Article articleToEdit \u003d getModel().getFilteredArticleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        editedArticle \u003d new ArticleBuilder(articleToEdit).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, index, editedArticle);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, edit index within bounds of article list and article list -\u003e edited */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredArticleList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_MOUSE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        articleToEdit \u003d getModel().getFilteredArticleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        editedArticle \u003d new ArticleBuilder(articleToEdit).withName(VALID_NAME_MOUSE).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, index, editedArticle);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, edit index within bounds of article list but out of bounds of article list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plty"
        },
        "content": "        int invalidIndex \u003d getModel().getArticleList().getArticleList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_MOUSE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "                Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        /* --------------------- Performing edit operation while a article card is selected ------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: selects first card in the article list, edit a article -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "         * article details changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        showAllArticles();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "        selectArticle(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_POWERBANK + PHONE_DESC_POWERBANK"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + FINDER_DESC_POWERBANK + EMAIL_DESC_POWERBANK + DESCRIPTION_DESC_POWERBANK + TAG_DESC_RED;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        // article details is updated to reflect the new article\u0027s name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandSuccess(command, index, POWERBANK, index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_MOUSE,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_MOUSE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plty"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredArticleList().size() + 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_MOUSE,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plty"
        },
        "content": "                Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_MOUSE,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: invalid finder -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + INVALID_FINDER_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        executeCommand(ArticleUtil.getAddCommand(MOUSE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertTrue(getModel().getArticleList().getArticleList().contains(MOUSE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plty"
        },
        "content": "        index \u003d INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(getModel().getFilteredArticleList().get(index.getZeroBased()).equals(MOUSE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different finder-\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_POWERBANK + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_POWERBANK"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_MOUSE + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: edit a article with new values same as another article\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_MOUSE + PHONE_DESC_MOUSE"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "                + EMAIL_DESC_POWERBANK + DESCRIPTION_DESC_MOUSE + FINDER_DESC_MOUSE + TAG_DESC_BLUE + TAG_DESC_RED;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ARTICLE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Article, Index)} except that"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * the article details and selected card remain unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Article, Index)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Article editedArticle) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedArticle, null);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the article at index {@code toEdit} being"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "plty"
        },
        "content": "     * updated to values specified {@code editedArticle}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "plty"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Article editedArticle,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "plty"
        },
        "content": "        expectedModel.updateArticle(expectedModel.getFilteredArticleList().get(toEdit.getZeroBased()), editedArticle);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedModel.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "plty"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_ARTICLE_SUCCESS, editedArticle), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * article details and selected card remain unchanged."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 3. Asserts that the article details and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        expectedModel.updateFilteredArticleList(NOT_RESOLVED_PREDICATE);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 3. Asserts that the article details, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 80,
      "dan-delion": 7,
      "Swiftkage": 78,
      "-": 142
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "public class ErrorDialogGuiTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_ARTICLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.HEADPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WALLET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.WATCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "public class FindCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find multiple articles in article list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "         * -\u003e 2 articles found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + FINDER_KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, WALLET, HEADPHONE); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: repeat previous find command where article list is displaying the articles we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plty"
        },
        "content": "         * -\u003e 2 articles found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find same articles in article list after deleting 1 of them -\u003e 1 article found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(getModel().getArticleList().getArticleList().contains(WALLET));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HEADPHONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article where article list is not displaying the article we are finding -\u003e 1 article found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Carl\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, WATCH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, 2 keywords -\u003e 1 article found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Daniel Meier\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HEADPHONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, 2 keywords in reversed order -\u003e 1 article found */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Meier Daniel\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, 2 keywords with 1 repeat -\u003e 1 article found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Daniel Daniel\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, keyword is same as name but of different case -\u003e 1 article found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f MeIeR\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find multiple articles in article list, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plty"
        },
        "content": "         * -\u003e 0 article found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Daniel Daniel NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, keyword is substring of name -\u003e 0 articles found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in article list, name is substring of keyword -\u003e 0 articles found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article not in article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find phone number of article in article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f \" + HEADPHONE.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find description of article in article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f \" + HEADPHONE.getDescription().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find email of article in article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f \" + HEADPHONE.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find tags of article in article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(HEADPHONE.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find while a article is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plty"
        },
        "content": "        showAllArticles();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plty"
        },
        "content": "        selectArticle(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        assertFalse(getArticleListPanel().getHandleToSelectedCard().getName().equals(HEADPHONE.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"-f Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HEADPHONE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: find article in empty article list -\u003e 0 articles found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteAllArticles();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HEADPHONE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plty"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ARTICLES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plty"
        },
        "content": "                MESSAGE_ARTICLES_LISTED_OVERVIEW, expectedModel.getFilteredArticleList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 40,
      "Swiftkage": 33,
      "-": 123
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plty"
        },
        "content": "public class HelpCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plty"
        },
        "content": "        getArticleListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        getArticleDetailsPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "        assertNotEquals(\"\", getArticleDetailsPanel().getLoadedDetails());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertListMatching(getArticleListPanel(), getModel().getFilteredArticleList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plty"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 11,
      "dan-delion": 3,
      "-": 92
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static final Predicate\u003cArticle\u003e PREDICATE_MATCHING_NO_ARTICLES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cArticle\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "        Optional\u003cPredicate\u003cArticle\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plty"
        },
        "content": "        model.updateFilteredArticleList(predicate.orElse(PREDICATE_MATCHING_NO_ARTICLES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "    public static void setFilteredList(Model model, Article... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Article} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plty"
        },
        "content": "    private static Predicate\u003cArticle\u003e getPredicateMatching(Article other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plty"
        },
        "content": "        return article -\u003e article.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ArticleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.article.Article;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "public class SampleDataTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "    protected ArticleList getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "    public void articleList_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        Article[] expectedList \u003d SampleDataUtil.getUnresolvedSampleArticles();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertListMatching(getArticleListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 9,
      "Swiftkage": 1,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.logic.commands.SelectCommand.MESSAGE_SELECT_ARTICLE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalArticles.FINDER_KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import static seedu.lostandfound.testutil.TypicalIndexes.INDEX_FIRST_ARTICLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plty"
        },
        "content": "public class SelectCommandSystemTest extends ArticleListSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: select the first card in the article list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plty"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_ARTICLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: select the last card in the article list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plty"
        },
        "content": "        Index articleCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plty"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + articleCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandSuccess(command, articleCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: select the middle card in the article list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, select index within bounds of article list but out of bounds of article list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Swiftkage"
        },
        "content": "        showArticlesWithName(FINDER_KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plty"
        },
        "content": "        int invalidIndex \u003d getModel().getArticleList().getArticleList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: filtered article list, select index within bounds of article list and article list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredArticleList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plty"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredArticleList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plty"
        },
        "content": "        /* Case: select from empty article list -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plty"
        },
        "content": "        deleteAllArticles();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plty"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ARTICLE.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plty"
        },
        "content": "                MESSAGE_INVALID_ARTICLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected article.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. {@code Storage} and {@code ArticleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the article details is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plty"
        },
        "content": "                MESSAGE_SELECT_ARTICLE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plty"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getArticleListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plty"
        },
        "content": "     * 4. {@code Storage} and {@code ArticleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dan-delion"
        },
        "content": "     * 5. Article details, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plty"
        },
        "content": "     * {@code ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plty"
        },
        "content": "     * @see ArticleListSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 42,
      "dan-delion": 2,
      "Swiftkage": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plty"
        },
        "content": "import seedu.lostandfound.model.ReadOnlyArticleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plty"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyArticleList\u003e articleList, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plty"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(articleList, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plty": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003c?import seedu.lostandfound.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plty"
        },
        "content": "\u003cfx:root type\u003d\"seedu.lostandfound.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "plty": 1,
      "-": 5
    }
  }
]
