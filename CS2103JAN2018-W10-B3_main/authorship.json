[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d ðŸ¥¡ðŸ”¥ HackEat ðŸ”¥ðŸ¥¡"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-W10-B3/main[image:https://travis-ci.org/CS2103JAN2018-W10-B3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-W10-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W10-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Welcome to the home of HackEat! HackEat is a next-gen food recommendation and ordering app for the hackers, the programmers, the creators of world bustling and bursting with world-changing ideas but running short on time â?°â?³."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Perfect for the busy software developer or desk hermit: Use _CLI commands_ to accelerate the chore of finding the right food."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* HackEat takes the stress, thinking and time-waste out of deciding what to eat. Order your food in style with developer-friendly commands like `ls` and `mkfood` to stay _in the zone_ even when you\u0027re not programming."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d How to Use"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Hackers don\u0027t need manuals. But there is a User Guide for you to check out. See the links below :)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* the original source of the code i.e. AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/[se-edu]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 2,
      "-": 34
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    compile group: \u0027commons-validator\u0027, name: \u0027commons-validator\u0027, version: \u00271.6\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    compile group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027javax.mail\u0027, name: \u0027mail\u0027, version: \u00271.4.1\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    testCompile \"org.mockito:mockito-core:2.+\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \"hackeat.jar\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00272.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 4,
      "-": 209
    }
  },
  {
    "path": "collated/functional/jaxony.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# jaxony"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final List\u003cPrompt\u003e PROMPTS \u003d Arrays.asList("
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Name.CLASS_NAME, \"What\u0027s the food called?\", false),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Phone.CLASS_NAME, \"Restaurant phone number?\", false),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Email.CLASS_NAME, \"And their email?\", false, true),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Address.CLASS_NAME, \"Where they located @ fam?\", false, true),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Price.CLASS_NAME, \"$$$?\", false, true),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Rating.CLASS_NAME, \"U rate or what?\", false, true),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Tag.CLASS_NAME, \"Where those tags at?\", true, true),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            new Prompt(Allergy.CLASS_NAME, \"Does this food have any allergies?\", true, true));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cPrompt\u003e getPrompts() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return PROMPTS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommand.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFood(Food foodToAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d foodToAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\Command.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cPrompt\u003e getPrompts() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\CommandFactory.java"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Factory pattern for creating command objects"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Command given a command word."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandWord Word for a command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new Command object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException If the command word is not supported."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command createCommand(String commandWord) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\Prompt.java"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains a field and an associated message that the system will send to the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": " * for this field when interactively asking the user for input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prompt {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public final boolean isMultiValued;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public final boolean isOptional;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String fieldName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prompt(String fieldName, String message, boolean isMultiValued, boolean isOptional) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fieldName \u003d fieldName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isMultiValued \u003d isMultiValued;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isOptional \u003d isOptional;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prompt(String fieldName, String message, boolean isMultiValued) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fieldName \u003d fieldName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isMultiValued \u003d isMultiValued;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isOptional \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFieldName() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return fieldName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UserConfigCommand.java"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets User Profile of HackEat user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserConfigCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"userconfig\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a user\u0027s personal details to HackEat. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ALLERGIES + \"lactose \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ALLERGIES + \"gluten\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"User profile updated\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserProfile toAdd;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a UserConfigCommand to add the specified {@code UserProfile}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserConfigCommand(UserProfile profile) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d profile;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.initUserProfile(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UserConfigCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((UserConfigCommand) other).toAdd));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\Logic.java"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Session for chat-like interaction with system."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void createNewSession(String userInput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts the active Session."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if command is an interactive command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText Text input from user."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If {@code commandText} is not a valid command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isCommandInteractive(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns the current ReadOnlyAddressBook"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManager.java"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            if (model.isUserInActiveSession()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"User is in an active session with the system.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                result \u003d model.interpretInteractiveUserInput(commandText);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (isCommandInteractive(commandText)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Command is interactive.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                createNewSession(commandText);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                result \u003d startSession();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManager.java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewSession(String userInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Command interactiveCommand \u003d addressBookParser.getCommand(userInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        interactiveCommand.setData(model, null, null);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        model.createNewSession(interactiveCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.startSession();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCommandInteractive(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookParser.isCommandInteractive(commandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether userInput specifies a command that is interactive."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Currently only AddCommand supports interactive mode."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the command is interactive, false if the command is valid but not interactive."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If the command is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCommandInteractive(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d match(userInput);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (matcher.group(\"commandWord\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        case ChangePicCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        case UserConfigCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return arguments.equals(\"\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Matches user input string with a basic command regex."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Matcher object produced from regex pattern."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If error arises during parsing of {@code userInput}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private Matcher match(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new command object."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return New Command object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException If the command in {@code userInput} is not supported."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command getCommand(String userInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        return CommandFactory.createCommand(userInput.trim());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the user is engaged in an interactive session."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isUserInActiveSession();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new interactive session."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param interactiveCommand A Command that supports interactive mode."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    void createNewSession(Command interactiveCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts the new session by prompting the user."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback or messages to the user in the form of a CommandResult."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the user input for an interactive session."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText user input string"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback to the user"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult interpretInteractiveUserInput(String commandText) throws CommandException;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void updateUserProfile(UserProfile toAdd) throws DuplicateUserException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updateUserProfile(toAdd);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        return sessionManager.isUserInActiveSession();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewSession(Command interactiveCommand) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionManager.createNewSession(interactiveCommand);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        return sessionManager.startSession();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult interpretInteractiveUserInput(String commandText) throws CommandException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        return sessionManager.interpretUserInput(commandText);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\Session.java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a continuous chat or interaction between the user"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": " * and the system."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Session {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String END_FIELD \u003d \"\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String OPTIONAL_MESSAGE \u003d \"[Enter] to skip.\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Success!\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String ANYTHING_ELSE_MESSAGE \u003d \"And anything else?\\nType [Enter] to stop.\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TRY_AGAIN_MESSAGE \u003d \"Please try again: \";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Collection\u003cString\u003e stringBuffer;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command command;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int promptIndex;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final List\u003cPrompt\u003e prompts;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Session.class);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isParsingMultivaluedField;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public Session(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        promptIndex \u003d 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        prompts \u003d this.command.getPrompts();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        isParsingMultivaluedField \u003d false;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String buildMessageFromPrompt(Prompt p) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return p.isOptional ? p.getMessage() + \"\\n\" + OPTIONAL_MESSAGE : p.getMessage();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * Interprets user input in the CommandBox."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Text typed in by the user in the CommandBox"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @return Feedback to user as a {@code CommandResult}."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws CommandException If the executed command is invalid."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult interpretUserInput(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Received user input in current Session: \" + userInput);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            if (p.isMultiValued) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                return handleInputForMultiValuedField(userInput);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                return handleInputForField(userInput);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            if (p.isMultiValued) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                resetStringBuffer();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(TRY_AGAIN_MESSAGE + ive.getMessage(), false);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Starts the session by returning the first prompt in the interaction."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @return The message of the first prompt."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult start() throws CommandException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getCurrentPrompt().getMessage());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract void parseInputForMultivaluedField(String fieldName) throws IllegalValueException;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract void parseInputForField(String fieldName, String userInput) throws IllegalValueException;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    protected abstract void finishCommand() throws CommandException;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    private Prompt getCurrentPrompt() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        return prompts.get(promptIndex);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Processes user input for a single-value field, including optional fields."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String input from user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @return Feedback to the user as a {@code CommandResult}."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If command execution leads to an error."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException If input parsing leads to an error."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult handleInputForField(String userInput) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean canUserSkipField \u003d didUserEndPrompt(userInput) \u0026\u0026 p.isOptional;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUserSkipField) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            parseInputForField(p.getFieldName(), userInput);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNextPromptMessage();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean sessionHasPromptsLeft() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        return promptIndex \u003c prompts.size();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Ends the active {@code Session}."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void endSession() throws CommandException {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(new EndActiveSessionEvent());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        finishCommand();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Processes user input for a multi valued field, including optional fields."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String input from user."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Feedback to the user."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If command execution leads to an error."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult handleInputForMultiValuedField(String userInput)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        if (didUserEndPrompt(userInput)) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            parseInputForMultivaluedField(p.getFieldName());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            isParsingMultivaluedField \u003d false;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "            return getNextPromptMessage();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        addAsMultiValue(userInput);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        return askForNextMultivalue();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    private void resetStringBuffer() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuffer \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean didUserEndPrompt(String userInput) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput.equals(END_FIELD);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the next prompt message in the interactive session."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @return Feedback to the user as a {@code CommandResult}."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult getNextPromptMessage() throws CommandException {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        promptIndex++;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!sessionHasPromptsLeft()) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            endSession();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return buildSuccessfulCommandResult();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        Prompt prompt \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prompt.isMultiValued) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            setupForMultiValued();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        return buildCommandResultFromPrompt(prompt);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private CommandResult buildSuccessfulCommandResult() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Establishes Session state for processing a field containing"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * one or more values."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setupForMultiValued() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        isParsingMultivaluedField \u003d true;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        resetStringBuffer();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a CommandResult from a prompt."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prompt What the system is asking from the user. May be optional."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    private static CommandResult buildCommandResultFromPrompt(Prompt prompt) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d buildMessageFromPrompt(prompt);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds user input to a collection of strings for processing later"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * when all input has been collected from the user for the current command."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput String from user."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addAsMultiValue(String userInput) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuffer.add(userInput);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Added \" + userInput + \" as a multi value field\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult askForNextMultivalue() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(ANYTHING_ELSE_MESSAGE);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\SessionAddCommand.java"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": " * Controls the interaction for the interactive AddCommand"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "public class SessionAddCommand extends Session {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Email email \u003d new Email(Email.DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Address address \u003d new Address(Address.DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Price price \u003d new Price(Price.DEFAULT_PRICE);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Rating rating \u003d new Rating(Rating.DEFAULT_RATING);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Set\u003cAllergy\u003e allergySet;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    public SessionAddCommand(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        super(command, eventsCenter);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForMultivaluedField(String fieldName) throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (fieldName) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        case Tag.CLASS_NAME:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet \u003d ParserUtil.parseTags(stringBuffer);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        case Allergy.CLASS_NAME:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "            allergySet \u003d ParserUtil.parseAllergies(stringBuffer);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void finishCommand() throws CommandException {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d (AddCommand) command;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d new Food(name, phone, email, address, price, rating, tagSet, allergySet);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.setFood(food);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code userInput} for a specific field."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fieldName Class name of the field that will be used to parse {@code userInput}"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Test input from the user."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException If parsing of {@code userInput} causes an error."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException If {@code fieldName} is invalid."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField(String fieldName, String userInput)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (fieldName) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        case Name.CLASS_NAME:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d ParserUtil.parseName(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        case Phone.CLASS_NAME:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        case Email.CLASS_NAME:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            email \u003d ParserUtil.parseEmail(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        case Address.CLASS_NAME:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            address \u003d ParserUtil.parseAddress(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        case Price.CLASS_NAME:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            price \u003d ParserUtil.parsePrice(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        case Rating.CLASS_NAME:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            rating \u003d ParserUtil.parseRating(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\SessionInterface.java"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Session sub-component."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "public interface SessionInterface {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if user is engaged in an active session."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isUserInActiveSession();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new session with a command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command Must support interactive mode."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "    void createNewSession(Command command);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts the new session."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback as a CommandResult"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes the user\u0027s text input."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput string input in the CommandBox"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback as a CommandResult"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult interpretUserInput(String userInput) throws CommandException;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\SessionManager.java"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages sessions (interactions) between user and system for chat-like"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": " * experience."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "public class SessionManager extends ComponentManager implements SessionInterface {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cSession\u003e sessionHistory;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    private Session activeSession;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isUserInActiveSession;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    public SessionManager() {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        isUserInActiveSession \u003d false;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        activeSession \u003d null;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "     * Makes a new Session"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command Must support interactive mode."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewSession(Command command) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        assert command.getClass().getSimpleName().equals(\"AddCommand\");"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        activeSession \u003d new SessionAddCommand(command, eventsCenter);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        isUserInActiveSession \u003d true;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "        return activeSession.start();"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult interpretUserInput(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        return activeSession.interpretUserInput(userInput);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleEndActiveSessionEvent(EndActiveSessionEvent e) throws CommandException {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "        endActiveSession();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ends the current active Session and saves it"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "     * to the session history."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    private void endActiveSession() {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace with a NoSessionException later"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        if (activeSession \u003d\u003d null) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionHistory.add(activeSession);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        activeSession \u003d null;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        return activeSession !\u003d null;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\UserProfile.java"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the profile of the HackEat user and contains"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": " * personal information such as name, phone and physical address."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueAllergyList allergies;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code UserProfile} object."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name    Name of user"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone   Phone number of user"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address Address of user for food delivery"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserProfile(Name name, Phone phone, Address address, Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allergies \u003d new UniqueAllergyList(allergies);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Set\u003cAllergy\u003e getAllergies() {"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Collections.unmodifiableSet(allergies.toSet());"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserProfile)) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfile otherUserProfile \u003d (UserProfile) other;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherUserProfile.getName().equals(this.getName())"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherUserProfile.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherUserProfile.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherUserProfile.getAllergies().equals(this.getAllergies());"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, address, allergies);"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Allergies: \");"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        getAllergies().forEach(builder::append);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ChatPanel.java"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the chat history."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "public class ChatPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int SPACING \u003d 10;"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double WIDTH_DIVISOR \u003d 4.0;"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double WIDTH_MULTIPLIER \u003d 3.0;"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String RESULT_ERROR_STYLE \u003d \"result-error\";"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String RESULT_SUCCESS_STYLE \u003d \"result-success\";"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_LABEL_STYLE \u003d \"user-label\";"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ChatPanel.fxml\";"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ChatPanel.class);"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane chatScrollPane;"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox chatPanel;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "    public ChatPanel() {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        chatScrollPane.setContent(chatPanel);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        chatScrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        chatScrollPane.vvalueProperty().bind(chatPanel.heightProperty());"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        chatPanel.setSpacing(SPACING);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a result message."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message      String message from system for user feedback."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isSuccessful If the message represents a successful one."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new JavaFX HBox object."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox createResultMessage(String message, boolean isSuccessful) {"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        Label label \u003d createLabel(message, isSuccessful ? RESULT_SUCCESS_STYLE : RESULT_ERROR_STYLE);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        return createHBox(label, Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a JavaFX label from a message and style class name."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message String message to add to label."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param styleClassName String name of CSS class for the label."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return New JavaFX Label object."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label createLabel(String message, String styleClassName) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        Label label \u003d new Label(message);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        label.maxWidthProperty().bind(chatPanel.widthProperty()"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "                .multiply(WIDTH_MULTIPLIER).divide(WIDTH_DIVISOR));"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        label.getStyleClass().add(styleClassName);"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a HBox object with a specific label and alignment."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param label JavaFX Label object to contain inside HBox."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param alignment Pos constant specifying where to display contents of HBox."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return New HBox object."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox createHBox(Label label, Pos alignment) {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "        HBox hbox \u003d new HBox();"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        hbox.setAlignment(alignment);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        hbox.getChildren().add(label);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        return hbox;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a user message."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message String message from user to the system."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A new JavaFX HBox object."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox createUserMessage(String message) {"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        Label label \u003d createLabel(message, USER_LABEL_STYLE);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "        return createHBox(label, Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        chatPanel.getChildren().add(createResultMessage(event.message, event.isSuccessful));"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewUserMessageEvent(NewUserMessageAvailableEvent event) {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        chatPanel.getChildren().add(createUserMessage(event.message));"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\resources\\view\\ChatPanel.fxml"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"chatScrollPane\" styleClass\u003d\"chat-scroll-pane\"\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox fx:id\u003d\"chatPanel\" styleClass\u003d\"chat-panel\"/\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 118,
      "-": 748
    }
  },
  {
    "path": "collated/functional/samzx.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# samzx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\OrderCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Orders command which starts the selection and ordering food process in HackEat."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Orders a food \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been requested to be ordered.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_FAIL \u003d \"You seem to be allergic to all the foods listed here.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_INDEX_FAIL \u003d \"Sorry, can\u0027t order that, you seem to be allergic to %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_FAIL_FOOD \u003d \"Something went wrong, we could not order %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_CHECK_INTERNET_CONNECTION \u003d \"Failed to contact our servers. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Please check your internet connection.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_EMAIL_FAIL_FOOD \u003d \"%1$s has failed to be ordered via email. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + MESSAGE_CHECK_INTERNET_CONNECTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_DIAL_FAIL_FOOD \u003d \"%1$s has failed to be ordered via phone. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + MESSAGE_CHECK_INTERNET_CONNECTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an Order command to the specified index of {@code Food}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects a index based on {@code FoodSelector} algorithm if not selected yet"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException if unable to selectIndex food"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void getIndexIfNull() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.index \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.index \u003d fs.selectIndex(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that the index is smaller than the size of a list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list which the index can not exceed the size"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException if index exceeds list size"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyIndex(Index index, List list) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks a food for allergies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param food to check for allergy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException is thrown if food contains an allergy same as user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void checkForAllergy(Food food) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Allergy allergy : food.getAllergies()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (model.getUserProfile().getAllergies().contains(allergy)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SELECT_INDEX_FAIL, food.getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            if (!OrderManager.netIsAvailable(OrderManager.REMOTE_SERVER)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CHECK_INTERNET_CONNECTION));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                OrderManager manager \u003d new OrderManager(model.getAddressBook().getUserProfile(), toOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                manager.order();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toOrder.getName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EMAIL_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DIAL_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getIndexIfNull();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyIndex(this.index, lastShownList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Food aboutToOrder \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        checkForAllergy(aboutToOrder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        toOrder \u003d aboutToOrder;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    || (other instanceof OrderCommand"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 index.equals(((OrderCommand) other).index));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    || (other instanceof OrderCommand"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 index \u003d\u003d (((OrderCommand) other).index));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\EmailManager.java"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailManager {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_CONTENT_MODE \u003d \"text/html\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUBJECT_LINE \u003d \"Order from HackEat. Reference code: %s\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_AUTH_HEADER \u003d \"mail.smtp.auth\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_AUTH \u003d \"true\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TLS_HEADER \u003d \"mail.smtp.starttls.enable\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TLS \u003d \"true\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_HOST_HEADER \u003d \"mail.smtp.host\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_HOST \u003d \"smtp.gmail.com\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_PORT_HEADER \u003d \"mail.smtp.port\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_PORT \u003d \"587\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USERNAME \u003d \"hackeatapp@gmail.com\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PASSWORD \u003d \"hackeater\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FROM \u003d USERNAME;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private String to;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public EmailManager(UserProfile user, Food food, String orderId, String message) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orderId \u003d orderId;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an email session, fills in email contents and sends."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws MessagingException when able to utilise email session"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void email() throws MessagingException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        generateEmailSession();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        sendEmail();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new email session with pre-defined seetings"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void generateEmailSession() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        to \u003d toOrder.getEmail().toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        props.put(PROPERTY_AUTH_HEADER, PROPERTY_AUTH);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        props.put(PROPERTY_TLS_HEADER, PROPERTY_TLS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        props.put(PROPERTY_HOST_HEADER, PROPERTY_HOST);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        props.put(PROPERTY_PORT_HEADER, PROPERTY_PORT);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        session \u003d Session.getInstance(props,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                    protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new PasswordAuthentication(USERNAME, PASSWORD);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sends an email to a food\u0027s email address"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void sendEmail() throws MessagingException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        MimeMessage message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        message.setFrom(new InternetAddress(FROM));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        message.setSubject(String.format(SUBJECT_LINE, orderId));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        message.setContent(buildContent(), EMAIL_CONTENT_MODE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Transport.send(message);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the body of the email message for ease of reading"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the raw HTML string of the email content"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private String buildContent() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(buildHeading());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(buildExcerpt());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(buildSummary());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(buildFooter());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds the heading for the content of the email"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private String buildHeading() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrapH1(String.format(\"Order for %s.\", user.getName()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds the excerpt message for the content of the email"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private String buildExcerpt() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapH2(String.format(\"%s has sent the following message:\", user.getName())));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapPre(message));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds the order summary for the content of the email"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private String buildSummary() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapH2(\"Order summary:\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Food: %s\", toOrder.getName())));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Price: %s\", Price.displayString(toOrder.getPrice().getValue()))));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Address: %s\", user.getAddress())));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(wrapUl("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(\"Time: %s\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Date(Clock.fixed(Instant.now(), ZoneId.systemDefault()).millis()).toString())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds the footer for the content of the email"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private String buildFooter() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        return wrapI(\"Thank you, from the HackEat team.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private String wrapH1(String content) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\u003ch1\u003e\" + content + \"\u003c/h1\u003e\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private String wrapH2(String content) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\u003ch2\u003e\" + content + \"\u003c/h2\u003e\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private String wrapUl(String content) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\u003cul\u003e\" + content + \"\u003c/ul\u003e\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private String wrapPre(String content) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\u003cpre\u003e\" + content + \"\u003c/pre\u003e\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    private String wrapI(String content) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\u003ci\u003e\" + content + \"\u003c/i\u003e\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\FoodSelector.java"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects food in HackEat if the user has not specified a specific food to order."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodSelector {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final float SCORE_BUFFER \u003d 0.001f;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects an {@code Index} from a model based on the HackEat Algorithm"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model of the program"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the index of the selected food"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public Index selectIndex(Model model) throws CommandException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cFoodDescriptor\u003e foodDescriptors \u003d buildFoodDescriptorList(model);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodDescriptor foodDescriptor \u003d pickFood(foodDescriptors);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodDescriptor.index;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects a food randomly with weighting from a list of food with scores {@code FoodDescriptor}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param foodDescriptors an ArrayList of {@code FoodDescriptor}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the selected {@code FoodDescriptor}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private FoodDescriptor pickFood(ArrayList\u003cFoodDescriptor\u003e foodDescriptors) throws CommandException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        float runningScore \u003d 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FoodDescriptor foodDescriptor : foodDescriptors) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            runningScore +\u003d foodDescriptor.score;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            foodDescriptor.runningScore \u003d runningScore;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        float decidingNumber \u003d (new Random()).nextFloat() * runningScore;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        for (FoodDescriptor foodDescriptor : foodDescriptors) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (decidingNumber \u003c foodDescriptor.runningScore) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                return foodDescriptor;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(OrderCommand.MESSAGE_SELECT_FAIL);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a list of food based on the model provided"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model to be provided"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a list of food"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cFoodDescriptor\u003e buildFoodDescriptorList(Model model) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cFoodDescriptor\u003e foodDescriptors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            FoodDescriptor foodDescriptor \u003d new FoodDescriptor(lastShownList.get(i), Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            foodDescriptor.score \u003d calculateScore(foodDescriptor.food, model.getUserProfile().getAllergies());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            foodDescriptors.add(foodDescriptor);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodDescriptors;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates a score based on some metric provided by the {@code Food} class"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param food The food that requires a score to be derived from"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userAllergies a set of allergies of the user"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the score for that particular food"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    private float calculateScore(Food food, Set\u003cAllergy\u003e userAllergies) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        float score;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Allergy allergy : food.getAllergies()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            if (userAllergies.contains(allergy)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        score \u003d 1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        score *\u003d scoreFromRating(food.getRating()) + SCORE_BUFFER;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        score *\u003d scoreFromPrice(food.getPrice()) + SCORE_BUFFER;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        assert(score \u003e 0);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a score based on the value of the price"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * For dampener variable:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    dampener \u003d 1, Roughly twice more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    dampener \u003d 1.5, Roughly 50% more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    dampener \u003d 2, Roughly 30% more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param price to have score derived from"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return score determined by algorithm"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    private float scoreFromPrice(Price price) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        final float dampener \u003d 1;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        float value \u003d Float.parseFloat(price.getValue());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        return (float) Math.pow(1 / (value + 1), 1 / dampener);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a score based on the value of the rating"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     * For weighting variable:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    weighting \u003d 1, 5x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    weighting \u003d 1.5, ~10x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     * -    weighting \u003d 2, 25x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rating to have score derived from"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return score determined by algorithm"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    private float scoreFromRating(Rating rating) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        final float weighting \u003d 1;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        float value \u003d Float.parseFloat(rating.value);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        return (float) Math.pow(value, weighting);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     * Holds descriptions of the food for calculation purposes"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    class FoodDescriptor {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        private Food food;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        private Index index;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        private float score;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        private float runningScore;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodDescriptor(Food food, Index index) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\OrderManager.java"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderManager {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CONTENT_SEPERATOR \u003d \"//\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REMOTE_SERVER \u003d \"https://mysterious-temple-83678.herokuapp.com/\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CREATE_PATH \u003d \"create/\";"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_PATH \u003d \"order/\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REQUEST_METHOD \u003d  \"POST\";"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CHARSET_ENCODING \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CANNED_SPEECH_MESSAGE \u003d \"Hello, my name is %s. Could I order a %s to %s?\";"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderManager(UserProfile user, Food food) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orderId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sends email summary and orders {@code Food} via phone"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    public void order() throws IOException, MessagingException {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d createMessage();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(user, toOrder, orderId, message);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        emailManager.email();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        sendOrder(toOrder.getPhone().toString(), message);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Checks whether client can connect to server"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @return whether client can connect to server"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static boolean netIsAvailable(String urlString) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            final URL url \u003d new URL(urlString);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            final URLConnection conn \u003d url.openConnection();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            conn.connect();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the body based on a pre-defined message, the user and food values"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String format of the body"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    private String createMessage() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(CANNED_SPEECH_MESSAGE, user.getName(), toOrder.getName(), user.getAddress());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "      * Sends order to REST API for TwiML to pick up"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "      */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    private void sendOrder(String toPhone, String body) throws IOException {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        String data \u003d toPhone + CONTENT_SEPERATOR +  body;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        URL url \u003d new URL(REMOTE_SERVER + CREATE_PATH + orderId);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        con.setRequestMethod(REQUEST_METHOD);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        con.setDoOutput(true);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        con.getOutputStream().write(data.getBytes(CHARSET_ENCODING));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        con.getInputStream();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the orderId for this object"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getOrderId() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.orderId;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\OrderCommandParser.java"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new Order Command object"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderCommandParser implements Parser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OrderCommand"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an OrderCommand object for execution."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        if (withIndexArgument(args)) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            return orderCommandWithIndex(args);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            return orderCommandWithoutIndex();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a default order command without a specific index to order"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    private OrderCommand orderCommandWithoutIndex() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        return new OrderCommand(null);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an OrderCommand object for execution when given a {@code String} of"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "     * arguments in the context of the OrderCommand."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    private OrderCommand orderCommandWithIndex(String args) throws ParseException {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        return new OrderCommand(index);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean withIndexArgument(String args) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        return !args.equals(\"\");"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\Price.java"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses price value into more recognisable price format with $."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param value of price"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return price value with $ prefixed"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String displayString(String value) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"$\" + value;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\Rating.java"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Food\u0027s rating in HackEat."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int MAX_RATING \u003d 5;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Please enter a number between 0 to \" + MAX_RATING;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "     * Users must enter only a single digit."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RATING_VALIDATION_REGEX \u003d \"\\\\b\\\\d\\\\b\";"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Rating\";"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String UNFILLED_RATING_SYMBOL \u003d \"â˜†\";"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FILLED_RATING_SYMBOL \u003d \"â˜…\";"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d rating;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid food rating."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        if (test.matches(RATING_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            int rating \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            if (rating \u003e\u003d 0 \u0026\u0026 rating \u003c\u003d MAX_RATING) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to display ratings as stars instead of a number"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string of colored or uncolored stars"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String displayString(String value) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_RATING; i++) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            if (count \u003e 0) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                stringBuilder.append(FILLED_RATING_SYMBOL);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                stringBuilder.append(UNFILLED_RATING_SYMBOL);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 64,
      "-": 600
    }
  },
  {
    "path": "collated/functional/tohcheryl.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# tohcheryl"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\ProfilePictureChangedEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates profile picture of user has changed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ProfilePictureChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ChangePicCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the profile picture of the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ChangePicCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changepic\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT \u003d \"Profile picture has been changed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PIC_CHANGED_FAILURE \u003d \"Unable to set profile picture\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Allows user to select a profile picture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public File selectProfilePic() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Image Files\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \"*.png\", \"*.jpg\", \"*.gif\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        File selectedFile \u003d fileChooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        File outputFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        File selectedFile \u003d selectProfilePic();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtils.copyFile(selectedFile, outputFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_PIC_CHANGED_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ProfilePictureChangedEvent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditUserCommand.java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Edits the details of a user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edituser\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the user \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_PHONE + \"91234567\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_EDIT_USER_SUCCESS \u003d \"Edited User: %1$s\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USER \u003d \"Edited user profile is the same as the one set previously.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final EditUserCommand.EditUserDescriptor editUserDescriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserProfile userToEdit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserProfile editedUser;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Creates a new EditUserCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @param editUserDescriptor An EditUserDescriptor object which contains the updated attribute values"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand(EditUserCommand.EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(editUserDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.editUserDescriptor \u003d new EditUserCommand.EditUserDescriptor(editUserDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            model.updateUserProfile(editedUser);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (DuplicateUserException dpe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_USER_SUCCESS, editedUser));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    protected void preprocessUndoableCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userToEdit \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editedUser \u003d createEditedUser(userToEdit, editUserDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Creates and returns a {@code UserProfile} with the details of {@code userToEdit}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * edited with {@code editProfileDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static UserProfile createEditedUser(UserProfile userToEdit,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                                                EditUserCommand.EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert userToEdit !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Name updatedName \u003d editUserDescriptor.getName().orElse(userToEdit.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Phone updatedPhone \u003d editUserDescriptor.getPhone().orElse(userToEdit.getPhone());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Address updatedAddress \u003d editUserDescriptor.getAddress().orElse(userToEdit.getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e updatedAllergies \u003d editUserDescriptor.getAllergies().orElse(userToEdit.getAllergies());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUser \u003d new UserProfile(updatedName, updatedPhone, updatedAddress, updatedAllergies);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editedUser;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!(other instanceof EditUserCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand e \u003d (EditUserCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editUserDescriptor.equals(e.editUserDescriptor)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 Objects.equals(userToEdit, e.userToEdit);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Stores the details to edit the user with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * corresponding field value of the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static class EditUserDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public EditUserDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Creates a new EditUserDescriptor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public EditUserDescriptor(EditUserCommand.EditUserDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setAllergies(toCopy.allergies);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.address, this.allergies);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Sets the current set of {@code allergies} to the {@code allergies} set provided"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setAllergies(Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns an unmodifiable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code allergies} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            if (!(other instanceof EditUserCommand.EditUserDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            EditUserCommand.EditUserDescriptor e \u003d (EditUserCommand.EditUserDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getAllergies().equals(e.getAllergies());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManager.java"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditUserCommandParser.java"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Parses input arguments and creates a new EditUserCommand object"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommandParser implements Parser\u003cEditUserCommand\u003e {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_ALLERGIES);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor editUserDescriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editUserDescriptor::setName);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editUserDescriptor::setPhone);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editUserDescriptor::setAddress);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES))"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    .ifPresent(editUserDescriptor::setAllergies);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!editUserDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new ParseException(EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new EditUserCommand(editUserDescriptor);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e} if {@code allergies} is non-empty."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * {@code Set\u003cAllergy\u003e} containing zero allergies."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws IllegalValueException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert allergies !\u003d null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1 \u0026\u0026 allergies.contains(\"\")"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ? Collections.emptySet() : allergies;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Optional.of(ParserUtil.parseAllergies(allergySet));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\MainApp.java"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets up a default profile picture if a picture has not been set"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void initProfilePic() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File profilePicFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!profilePicFile.exists()) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            initDefaultProfilePic();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Saves default profile picture to profilepic.png"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void initDefaultProfilePic() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            File profilePicFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            URL defaultPicUrl \u003d new URL(\"http://i64.tinypic.com/vo385x.png\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            FileUtils.copyURLToFile(defaultPicUrl, profilePicFile);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            logger.warning(\"Unable to download default profile picture. \""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \"Starting HackEat without a profile picture.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the current user profile to the input {@code profile}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void initUserProfile(UserProfile profile) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Replaces the current user profile with {@code editedProfile}."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws DuplicateUserException if there is no change in user profile"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void updateUserProfile(UserProfile editedProfile) throws DuplicateUserException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert profile !\u003d null;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!profile.equals(editedProfile)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            profile \u003d editedProfile;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\Price.java"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Represents a Food\u0027s price in HackEat."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"0\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            \"Price should contain only numbers and a single decimal point if necessary.\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \" Prices that have more than 2 decimal places will be truncated.\""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \" A $ sign can be prefixed to the price but it is not required.\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Price\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static Locale currentLocale \u003d Locale.US;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @param price A valid price given as a String."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        setPrice(price);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static boolean isValidPrice(String inputPrice) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (inputPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimal amount \u003d validator.validate(inputPrice, currentLocale);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (amount !\u003d null) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets price of Food without currency symbol."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Truncates given price to the appropriate number of decimal places."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setPrice(String inputPrice) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        value \u003d validator.validate(inputPrice, currentLocale).toString();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\Price.java"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns price of Food as a String."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the user profile of address book to {@code target}."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    void initUserProfile(UserProfile target);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns the current user profile."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    UserProfile getUserProfile() throws NullPointerException;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Replaces the current user profile {@code target} with {@code editedProfile}."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    void updateUserProfile(UserProfile editedProfile) throws DuplicateUserException;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfile getUserProfile() throws NullPointerException {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return addressBook.getUserProfile();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void initUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        addressBook.initUserProfile(userProfile);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\user\\exceptions\\DuplicateUserException.java"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Food objects."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicateUserException extends DuplicateDataException {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicateUserException() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in no change to user profile\");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\ui\\UserProfilePanel.java"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": " * The User Profile panel of the App."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserProfilePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"UserProfilePanel.fxml\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserProfilePanel.class);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROFILE_PICTURE_PATH \u003d \"profilepic.png\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    final Circle clip \u003d new Circle(75, 75, 75);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane profilePane;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView profilepic;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane allergies;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserProfilePanel(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        profilePane.setFitToWidth(true);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        profilePane.setFitToHeight(true);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        profilePane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        profilePane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setWrapText(true);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        setUserProfile(addressBook.getUserProfile());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        setProfilePicture();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the labels to reflect the values of the current {@code UserProfile}"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(userProfile.getName().fullName);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(userProfile.getPhone().value);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(userProfile.getAddress().value);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        allergies.getChildren().clear();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        userProfile.getAllergies().forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergyName)));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the profile picture to a square image and clips it"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setProfilePicture() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        Image image \u003d new Image(\"file:\" + PROFILE_PICTURE_PATH);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        Image squareImage \u003d getSquareImage(image);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        profilepic.setImage(squareImage);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        profilepic.setClip(clip);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "     * Crops an image to make it square so that it can be displayed properly in the image view"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    public Image getSquareImage(Image image) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        double width \u003d image.getWidth();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        double height \u003d image.getHeight();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        if (width \u003d\u003d height) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "            double lengthOfSquare \u003d width \u003c height ? width : height;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "            double centerX \u003d width / 2;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            double centerY \u003d height / 2;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            double startingX \u003d centerX - lengthOfSquare / 2;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            double startingY \u003d centerY - lengthOfSquare / 2;"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            PixelReader reader \u003d image.getPixelReader();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            WritableImage squareImage \u003d new WritableImage(reader, (int) startingX,"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "                    (int) startingY, (int) lengthOfSquare, (int) lengthOfSquare);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            return squareImage;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfile newUserProfile \u003d addressBook.getUserProfile();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"User Profile updated to: \" + newUserProfile));"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            setUserProfile(newUserProfile);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleProfilePictureChangedEvent(ProfilePictureChangedEvent ppce) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            setProfilePicture();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\resources\\view\\UserProfilePanel.fxml"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cScrollPane fx:id\u003d\"profilePane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cVBox fx:id\u003d\"profileVBox\" \u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImageView fx:id\u003d\"profilepic\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"address\" text\u003d\"\\$address\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"allergies\" /\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 277,
      "-": 316
    }
  },
  {
    "path": "collated/test/jaxony.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# jaxony"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\guitests\\guihandles\\ChatPanelHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ChatPanel} of the UI"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ChatPanelHandle extends NodeHandle\u003cVBox\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CHAT_PANEL_ID \u003d \"#chatPanel\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ChatPanelHandle(VBox chatPanelNode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(chatPanelNode);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last result text in the chat panel."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e messageContainers \u003d getRootNode().getChildrenUnmodifiable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        int numResults \u003d messageContainers.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (numResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        HBox lastResultMessageHBox \u003d (HBox) messageContainers.get(messageContainers.size() - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Label lastResultLabel \u003d (Label) lastResultMessageHBox.getChildren().get(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return lastResultLabel.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\model\\EndActiveSessionEventTest.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EndActiveSessionEventTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void endActiveSession_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionInterface sessionManager \u003d new SessionManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionManager.createNewSession(new AddCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(sessionManager.isUserInActiveSession());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new EndActiveSessionEvent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(sessionManager.isUserInActiveSession());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommandTest.java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void createNewSession(Command interactiveCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public CommandResult interpretInteractiveUserInput(String commandText) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\LogicManagerTest.java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewSession_editCommand_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.createNewSession(\"edit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createNewSession_addCommand_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.createNewSession(\"add\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isCommandInteractive_validCommand_true() throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(logic.isCommandInteractive(\"add\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isCommandInteractive_validCommand_false() throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(logic.isCommandInteractive(\"edit\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isCommandInteractive_invalidCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.isCommandInteractive(\"asdad\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\SessionAddCommandTest.java"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "public class SessionAddCommandTest {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_name_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Name.CLASS_NAME, \"Some Name\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_address_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Address.CLASS_NAME, \"Some Address\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_phone_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Phone.CLASS_NAME, \"123124913\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_email_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Email.CLASS_NAME, \"email@email.com\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_price_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Price.CLASS_NAME, \"12\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_rating_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(Rating.CLASS_NAME, \"5\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForField_invalidClass_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForField(String.class.getName(), \"Some Input\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForMultivaluedField_tag_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForMultivaluedField(Tag.CLASS_NAME);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForMultivaluedField_allergy_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForMultivaluedField(Allergy.CLASS_NAME);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseInputForMultivaluedField_string_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        session.parseInputForMultivaluedField(String.class.getName());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void finishCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new AddCommand(null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(new ModelManager(), null, null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(command, null);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        session.finishCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub used to test SessionAddCommand with hardcoded values"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private class SessionAddCommandStub extends SessionAddCommand {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public SessionAddCommandStub(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(command, eventsCenter);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            stringBuffer \u003d Arrays.asList(\"peruvian\", \"seafood\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d TypicalFoods.BACON.getName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            phone \u003d TypicalFoods.BACON.getPhone();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            email \u003d TypicalFoods.BACON.getEmail();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            address \u003d TypicalFoods.BACON.getAddress();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            price \u003d TypicalFoods.BACON.getPrice();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            rating \u003d TypicalFoods.BACON.getRating();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet \u003d TypicalFoods.BACON.getTags();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            allergySet \u003d TypicalFoods.BACON.getAllergies();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\session\\SessionTest.java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_NAME \u003d TypicalFoods.BACON.getName().toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_WRONG_PHONE \u003d \"asdadn\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_PHONE \u003d TypicalFoods.BACON.getPhone().toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_EMAIL \u003d TypicalFoods.BACON.getEmail().toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_ADDRESS \u003d TypicalFoods.BACON.getAddress().toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_RATING \u003d TypicalFoods.BACON.getRating().toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BACON_PRICE \u003d TypicalFoods.BACON.getPrice().toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_NAME \u003d 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_PHONE \u003d 2;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_EMAIL \u003d 3;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_ADDRESS \u003d 4;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_PRICE \u003d 5;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_RATING \u003d 6;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int INDEX_AFTER_TAGS \u003d 7;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_NAME \u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_NAME));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FAILURE_MESSAGE_AFTER_WRONG_PHONE \u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.TRY_AGAIN_MESSAGE + Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_PHONE \u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_PHONE));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_EMAIL \u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_EMAIL));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_ADDRESS \u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_ADDRESS));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_PRICE \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_PRICE));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_RATING \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_RATING));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_FIRST_TAG \u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_SECOND_TAG \u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_TAGS \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_TAGS));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_FIRST_ALLERGY \u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void interpretUserInput_success() throws CommandException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        Session session \u003d new SessionAddCommandStub(new AddCommand(null), EventsCenter.getInstance());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_NAME, session.interpretUserInput(BACON_NAME).feedbackToUser);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FAILURE_MESSAGE_AFTER_WRONG_PHONE, session.interpretUserInput(BACON_WRONG_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PHONE, session.interpretUserInput(BACON_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_EMAIL, session.interpretUserInput(BACON_EMAIL).feedbackToUser);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_ADDRESS, session.interpretUserInput(BACON_ADDRESS).feedbackToUser);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PRICE, session.interpretUserInput(BACON_PRICE).feedbackToUser);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_RATING, session.interpretUserInput(BACON_RATING).feedbackToUser);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_FIRST_TAG, session.interpretUserInput(\"meat\").feedbackToUser);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_SECOND_TAG, session.interpretUserInput(\"other\").feedbackToUser);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_TAGS, session.interpretUserInput("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_FIRST_ALLERGY, session.interpretUserInput(\"animals\").feedbackToUser);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Session.SUCCESS_MESSAGE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void interpretUserInput_emptyOptionalFields_success() throws CommandException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        Session session \u003d new SessionAddCommandStub(new AddCommand(null), EventsCenter.getInstance());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_NAME, session.interpretUserInput(BACON_NAME).feedbackToUser);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PHONE, session.interpretUserInput(BACON_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_EMAIL, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_ADDRESS, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PRICE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_RATING, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // skipping multi value fields"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_TAGS, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Session.SUCCESS_MESSAGE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub used to test SessionAddCommand with hardcoded values"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private class SessionAddCommandStub extends SessionAddCommand {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public SessionAddCommandStub(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            super(command, eventsCenter);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            command.setData(new ModelManager(), null, null);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\systemtests\\AddCommandSystemTest.java"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addInteractive() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add in interactive mode ------------------------------ */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccessWithoutSync(AddCommand.COMMAND_WORD, getModel(), AddCommand.PROMPTS.get(0).getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\systemtests\\AddCommandSystemTest.java"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Food)} except asserts that"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Status bar does not change.\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Food)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccessWithoutSync(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 18,
      "-": 304
    }
  },
  {
    "path": "collated/test/samzx.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# samzx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\OrderCommandTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Index VALID_INDEX \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Index NULL_INDEX \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_index_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand indexedOrderCommand \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand nullOrderCommand \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(indexedOrderCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(nullOrderCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals_duplicate_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand indexedOrderCommand \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand indexedOrderCommand2 \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand nullOrderCommand \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand nullOrderCommand2 \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(indexedOrderCommand, indexedOrderCommand2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(nullOrderCommand, nullOrderCommand2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_orderWithIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand orderCommand \u003d getOrderCommandForIndex(VALID_INDEX, model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d model.getAddressBook().getFoodList().get(VALID_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecuteResolvesCorrectly(orderCommand,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SUCCESS, food.getName()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SELECT_INDEX_FAIL, food.getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_orderWithoutIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand orderCommand \u003d getOrderCommandForIndex(NULL_INDEX, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecuteResolvesCorrectly(orderCommand,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SUCCESS, \"\", \"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(OrderCommand.MESSAGE_EMAIL_FAIL_FOOD, EMPTY_STRING));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given food."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private OrderCommand getOrderCommandForIndex(Index index, Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand command \u003d new OrderCommand(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute order command and ensures that the correct response is met when succeeding or failing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param orderCommand to execute"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param success message if execute success"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param failure message if execute fails"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecuteResolvesCorrectly(OrderCommand orderCommand, String success, String failure) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d orderCommand.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThat(result.feedbackToUser, containsString(success));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertThat(e.getMessage(), containsString(failure));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\EmailManagerTest.java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailManagerTest {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int VALID_MODEL_FOOD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_UUID \u003d \"f64f2940-fae4-11e7-8c5f-ef356f279131\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MESSAGE \u003d \"Message\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withArguments_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(model.getUserProfile(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getAddressBook().getFoodList().get(VALID_MODEL_FOOD_INDEX), VALID_UUID, VALID_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(emailManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void email_execution_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(model.getUserProfile(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                model.getAddressBook().getFoodList().get(VALID_MODEL_FOOD_INDEX), VALID_UUID, VALID_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEmailSuccess(emailManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the email method of the given {@code emailManager} and asserts success"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param emailManager to execute email"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void assertEmailSuccess(EmailManager emailManager) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            emailManager.email();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Email should not fail.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\FoodSelectorTest.java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodSelectorTest {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_ALLERGY \u003d \"lactose\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_NOT_ALLERGIC \u003d \"peanut\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_SHOULD_AVOID_ALLERGIC \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Food selector should have avoided a food the user is allergic to!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile validUser \u003d new UserProfile("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            new Name(USER_NAME),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            new Phone(USER_PHONE),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(Address.DEFAULT_ADDRESS),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    Arrays.asList(new Allergy(USER_ALLERGY))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withoutArguments_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodSelector foodSelector \u003d new FoodSelector();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(foodSelector);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selectIndex_withModel_validIndex() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d fs.selectIndex(model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selectIndex_withAllAllergy_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook allAllergicAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        allAllergicAddressBook.initUserProfile(validUser);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Food allergicFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAllergies(USER_ALLERGY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        allAllergicAddressBook.addFood(allergicFood);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(allAllergicAddressBook, new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodSelector foodSelector \u003d new FoodSelector();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAvoidsAllergies(foodSelector, model, OrderCommand.MESSAGE_SELECT_FAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selectIndex_nonAllergy_indexOne() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook allAllergicAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        allAllergicAddressBook.initUserProfile(validUser);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Food foodIsAllergic \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAllergies(USER_ALLERGY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Food foodIsNotAllergic \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAllergies(USER_NOT_ALLERGIC).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        allAllergicAddressBook.addFood(foodIsAllergic);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        allAllergicAddressBook.addFood(foodIsNotAllergic);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(allAllergicAddressBook, new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final int expectedSelectedIndex \u003d 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedIndex, fs.selectIndex(model).getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes selectIndex method for food selector. Given a model with all allergic, makes sure that an exception"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown is the desired message, to avoid ordering a food that the user is allergic to, and to notify them"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param foodSelector that will have selectIndex executed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model which must have all foods be allergic by the userProfile"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedMessage when unable to order food"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception when an allergic food is ordered"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void assertAvoidsAllergies(FoodSelector foodSelector, Model model, String expectedMessage)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            foodSelector.selectIndex(model);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(MESSAGE_SHOULD_AVOID_ALLERGIC);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Exception(MESSAGE_SHOULD_AVOID_ALLERGIC);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\orderer\\OrderManagerTest.java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderManagerTest {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_URL \u003d \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOOSE_CONNECTION \u003d \"http://www.120391820938109231023.com/\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_ADDRESS \u003d Address.DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_ALLERGY \u003d \"lactose\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String USER_NOT_ALLERGIC \u003d \"peanut\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_HTTP_POST_FAILED \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Order Manager failed to update server with POST request\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_SHOULD_NOT_THROW_ERROR \u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Order Manager should not have thrown error\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile validUser \u003d new UserProfile("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            new Name(USER_NAME),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            new Phone(USER_PHONE),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            new Address(USER_ADDRESS),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    Arrays.asList(new Allergy(USER_ALLERGY))"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void order_withModel_success() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAllergies(USER_NOT_ALLERGIC).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderManager orderManager \u003d new OrderManager(validUser, validFood);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertOrderResolvesCorrectly(orderManager, MESSAGE_HTTP_POST_FAILED);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void netIsAvailable_invalidUrl_failure() throws MalformedURLException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(RuntimeException.class, () -\u003e OrderManager.netIsAvailable(INVALID_URL));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void netIsAvailable_badConnection_failure() throws MalformedURLException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(OrderManager.netIsAvailable(LOOSE_CONNECTION));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void netIsAvailable_validUrl_success() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(OrderManager.netIsAvailable(OrderManager.REMOTE_SERVER));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sends a HTTP POST Request to the server responsible for exposing message to public APIs"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether the message was successfully posted and exposed"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean verifyPostConfirmation(String orderId) throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        URL url \u003d new URL(OrderManager.REMOTE_SERVER + OrderManager.ORDER_PATH + orderId);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        con.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        InputStream inputStream \u003d con.getInputStream();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String incomingString \u003d IOUtils.toString(inputStream, OrderManager.CHARSET_ENCODING);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedContents \u003d String.format(OrderManager.CANNED_SPEECH_MESSAGE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                USER_NAME, VALID_NAME_BANANA, USER_ADDRESS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return incomingString.contains(expectedContents);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes order method for order manager and checks the correct message is thrown"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param orderManager to execute order method"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param httpPostFail message if unable to contact server with http post"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertOrderResolvesCorrectly(OrderManager orderManager, String httpPostFail) throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            orderManager.order();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            assert(verifyPostConfirmation(orderManager.getOrderId()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            assert(e.getMessage().isEmpty());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Exception(httpPostFail);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Exception(MESSAGE_SHOULD_NOT_THROW_ERROR);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\OrderCommandParserTest.java"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderCommandParserTest {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"-1\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    private OrderCommandParser parser \u003d new OrderCommandParser();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptySting() throws ParseException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand expectedCommand \u003d parser.parse(EMPTY_STRING);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, EMPTY_STRING, expectedCommand);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validIndex() throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderCommand expectedCommand \u003d parser.parse(VALID_INDEX);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX, expectedCommand);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidIndex_failure() throws ParseException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                OrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\RatingTest.java"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_RATING \u003d \"6\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(INVALID_RATING));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Rating.isValidRating(\"-1\"));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Rating.isValidRating(\"6\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\"));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayString_withStars_displaysStars() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Rating.displayString(\"0\"), \"â˜†â˜†â˜†â˜†â˜†\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Rating.displayString(\"3\"), \"â˜…â˜…â˜…â˜†â˜†\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Rating.displayString(\"5\"), \"â˜…â˜…â˜…â˜…â˜…\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_RATING, rating.value);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_validRating_returnsString() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_RATING, rating.toString());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals_validRating_returnsEqual() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating rating2 \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(rating, rating2);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashCode_validRating_returnsHashCode() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating p \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating p2 \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(p.hashCode(), p2.hashCode());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 19,
      "-": 375
    }
  },
  {
    "path": "collated/test/tohcheryl.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# tohcheryl"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\guitests\\guihandles\\UserProfilePanelHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code UserProfilePanel} in the GUI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserProfilePanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ALLERGIES_FIELD_ID \u003d \"#allergies\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e allergyLabels;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserProfilePanelHandle(Node cardNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Region allergiesContainer \u003d getChildNode(ALLERGIES_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allergyLabels \u003d allergiesContainer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllergies() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return allergyLabels"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommandTest.java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public UserProfile getUserProfile() throws NullPointerException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicateFoodException when trying to add a food."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicateFoodException extends ModelStub {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            foodsAdded.add(food);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ChangePicCommandTest.java"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "public class ChangePicCommandTest {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String imageFilePath \u003d \"src/main/resources/images/defaultprofilepic.png\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private ChangePicCommand changePicCommand \u003d mock(ChangePicCommand.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_fileSelected_success() throws CommandException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        File tempFile \u003d new File(imageFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        when(changePicCommand.selectProfilePic()).thenReturn(tempFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        when(changePicCommand.execute()).thenCallRealMethod();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d changePicCommand.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ChangePicCommand.MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFileSelected_failure() throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        File tempFile \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        when(changePicCommand.selectProfilePic()).thenReturn(tempFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        when(changePicCommand.execute()).thenCallRealMethod();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(changePicCommand, MESSAGE_PIC_CHANGED_FAILURE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\CommandTestUtil.java"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command} and confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditUserCommandTest.java"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditUserCommandTest {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_allFieldsSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(editedUserProfile).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_USER_SUCCESS, editedUserProfile);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedModel.updateUserProfile(editedUserProfile);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_someFieldsSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile currentProfile \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfileBuilder userProfileSet \u003d new UserProfileBuilder(currentProfile);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d userProfileSet.withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_BANANA).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_USER_SUCCESS, editedUserProfile);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedModel.updateUserProfile(editedUserProfile);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_duplicateUserProfile_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile currentUserProfile \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(currentUserProfile).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandFailure(editUserCommand, model, EditUserCommand.MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an {@code EditUserCommand} with parameter {@code descriptor}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommand prepareCommand(EditUserCommand.EditUserDescriptor descriptor) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editUserCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editUserCommand;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 1. Edits the {@code UserProfile}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 3. Redo the edit. This ensures {@code RedoCommand} edits the user profile object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void executeUndoRedo_validUserProfile_sameUserProfileEdited() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(editedUserProfile).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userProfileToEdit \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // edit -\u003e edits user profile"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editUserCommand.execute();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        undoRedoStack.push(editUserCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertNotEquals(userProfileToEdit, editedUserProfile);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // redo -\u003e edits user profile"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UserConfigCommandTest.java"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserConfigCommandTest {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile validUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_validUserProfile_setSuccessfully() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        CommandResult commandResult \u003d getUserConfigCommand(validUserProfile, model).execute();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(UserConfigCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(validUserProfile, model.getUserProfile());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateUserProfile_setSuccessfully() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfile currentUser \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getUserConfigCommand(currentUser, model).execute();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(UserConfigCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(currentUser, model.getUserProfile());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new UserConfigCommand."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserConfigCommand getUserConfigCommand(UserProfile userProfile, Model model) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserConfigCommand command \u003d new UserConfigCommand(userProfile);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditUserCommandParserTest.java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommandParserTest {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommandParser parser \u003d new EditUserCommandParser();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, \"\", EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_ALLERGY_DESC, Allergy.MESSAGE_ALLERGY_CONSTRAINTS); // invalid allergy"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid phone followed by valid address"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + ADDRESS_DESC_APPLE, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_BANANA + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // while parsing {@code PREFIX_ALLERGY} alone will reset the allergies of the {@code UserProfile} being edited,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // parsing it together with a valid allergy results in error"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_DESC_LACTOSE + ALLERGY_DESC_POLLEN + ALLERGY_EMPTY,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_DESC_LACTOSE + ALLERGY_EMPTY + ALLERGY_DESC_POLLEN,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_EMPTY + ALLERGY_DESC_LACTOSE + ALLERGY_DESC_POLLEN,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + VALID_ADDRESS_APPLE,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_BANANA + ALLERGY_DESC_POLLEN + ADDRESS_DESC_APPLE + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_BANANA).withAddress(VALID_ADDRESS_APPLE)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_POLLEN).build();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_BANANA + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withName(VALID_NAME_APPLE).build();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_APPLE).build();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withAddress(VALID_ADDRESS_APPLE).build();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // allergies"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + ALLERGY_DESC_POLLEN + PHONE_DESC_APPLE"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_BANANA + ALLERGY_DESC_LACTOSE + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAddress(VALID_ADDRESS_BANANA).withAllergies(VALID_ALLERGY_POLLEN, VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d INVALID_PHONE_DESC + ADDRESS_DESC_BANANA + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_resetAllergies_success() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d ALLERGY_EMPTY;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withAllergies().build();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\UserConfigCommandParserTest.java"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserConfigCommandParserTest {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserConfigCommandParser parser \u003d new UserConfigCommandParser();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile expectedUserProfile \u003d new UserProfile(new Name(VALID_NAME_APPLE), new Phone(VALID_PHONE_APPLE),"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new Address(VALID_ADDRESS_APPLE), getAllergySet(\"lactose\"));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + ALLERGY_DESC_LACTOSE,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                new UserConfigCommand(expectedUserProfile));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UserConfigCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + VALID_PHONE_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + VALID_ADDRESS_BANANA,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + VALID_PHONE_BANANA + VALID_ADDRESS_BANANA,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_PHONE_DESC + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid allergies"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + INVALID_ALLERGY_DESC, Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBookTest.java"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\allergy\\AllergyTest.java"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "public class AllergyTest {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Allergy(null));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAllergyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String invalidAllergyName \u003d \"\";"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Allergy(invalidAllergyName));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void isValidAllergyName() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Allergy.isValidAllergyName(null));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\allergy\\UniqueAllergyListTest.java"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UniqueAllergyListTest {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UniqueAllergyList uniqueAllergyList \u003d new UniqueAllergyList();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        uniqueAllergyList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "```"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\model\\food\\PriceTest.java"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12a.45\"));"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$12a.45\"));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$1.p0\"));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"203$0\"));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"10$\"));"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.40$\"));"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Price.isValidPrice(\"â‚¬2,0\"));"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Price.isValidPrice(\"20000Â¥\"));"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // valid prices in US"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$20\"));"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$90.30\"));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$20.590\"));"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setPrice() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        p.setPrice(\"$40.00\");"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"40.00\", p.getValue());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"23.40\", p.getValue());"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toString_validPrice_returnsString() {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"23.40\", p.toString());"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void equals_validPrice_returnsEqual() {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p2 \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(p, p2);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void hashCode_validPrice_returnsHashCode() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p2 \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(p.hashCode(), p2.hashCode());"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedUserProfileTest.java"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedUserProfileTest {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@nch\";"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"#lactose\";"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final UserProfile JOHN_DOE \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d JOHN_DOE.getName().toString();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d JOHN_DOE.getPhone().toString();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d JOHN_DOE.getAddress().toString();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d JOHN_DOE.getAllergies().stream()"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedAllergy::new)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(JOHN_DOE);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(JOHN_DOE, johnDoe.toModelType());"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedUserProfile(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(null, VALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(VALID_NAME, null, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, null, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAllergies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidAllergies.add(new XmlAdaptedAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, VALID_ADDRESS, invalidAllergies);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, johnDoe::toModelType);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\EditUserDescriptorBuilder.java"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class to help with building EditUserDescriptor objects."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditUserDescriptorBuilder {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommand.EditUserDescriptor descriptor;"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder() {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder(EditUserCommand.EditUserDescriptor descriptor) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.descriptor \u003d new EditUserCommand.EditUserDescriptor(descriptor);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an {@code EditUserDescriptor} with fields containing {@code userProfile}\u0027s details"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder(UserProfile userProfile) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setName(userProfile.getName());"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPhone(userProfile.getPhone());"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAddress(userProfile.getAddress());"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(userProfile.getAllergies());"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Name} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Address} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditUserDescriptor}"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withAllergies(String... allergies) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(allergySet);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand.EditUserDescriptor build() {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\UserProfileBuilder.java"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class to help with building User Profile objects."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfileBuilder {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_PHONE \u003d \"83449232\";"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_ADDRESS \u003d \"1 Neo Tiew Road\";"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_ALLERGIES \u003d \"pollen\";"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder() {"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name \u003d new Name(DEFAULT_USER_NAME);"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone \u003d new Phone(DEFAULT_USER_PHONE);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address \u003d new Address(DEFAULT_USER_ADDRESS);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d SampleDataUtil.getAllergySet(DEFAULT_USER_ALLERGIES);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Initializes the UserProfileBuilder with the data of {@code userProfileToCopy}."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder(UserProfile userProfileToCopy) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name \u003d userProfileToCopy.getName();"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone \u003d userProfileToCopy.getPhone();"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address \u003d userProfileToCopy.getAddress();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e(userProfileToCopy.getAllergies());"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Name} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withName(String name) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Address} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Phone} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code UserProfile}"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withAllergies(String ... allergies) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfile build() {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new UserProfile(name, phone, address, allergies);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\UserProfileUtil.java"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class for UserProfile."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfileUtil {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an add command string for adding the {@code userProfile}."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static String getUserConfigCommand(UserProfile userProfile) {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return UserConfigCommand.COMMAND_WORD + \" \" + getUserDetails(userProfile);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns the part of command string for the given {@code userProfile}\u0027s details."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static String getUserDetails(UserProfile userProfile) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_NAME + userProfile.getName().fullName + \" \");"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_PHONE + userProfile.getPhone().value + \" \");"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_ADDRESS + userProfile.getAddress().value + \" \");"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfile.getAllergies().stream().forEach(s -\u003e sb.append(PREFIX_ALLERGIES + s.allergyName + \" \")"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\ui\\testutil\\GuiTestAssert.java"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualPanel} displays the details of {@code expectedUser}."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertPanelDisplaysUser(UserProfile userProfile, UserProfilePanelHandle actualPanel) {"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userProfile.getName().fullName, actualPanel.getName());"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userProfile.getPhone().value, actualPanel.getPhone());"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userProfile.getAddress().value, actualPanel.getAddress());"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userProfile.getAllergies().stream().map(allergy -\u003e allergy.allergyName)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                actualPanel.getAllergies());"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\java\\seedu\\address\\ui\\UserProfilePanelTest.java"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserProfilePanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ReadOnlyAddressBook ADDRESS_BOOK \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserProfilePanelTest.class);"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        // no allergies"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfile userWithNoAllergy \u003d new UserProfileBuilder().withAllergies(new String[0]).build();"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfilePanel userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        userProfilePanel.setUserProfile(userWithNoAllergy);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(userProfilePanel);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPanelDisplay(userProfilePanel, userWithNoAllergy);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "        // with allergies"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfile userWithAllergies \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "        userProfilePanel.setUserProfile(userWithAllergies);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(userProfilePanel);"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPanelDisplay(userProfilePanel, userWithAllergies);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getSquareImage() {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        Image testImage \u003d new Image(\"file:docs/images/StorageClassDiagram.png\");"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfilePanel userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        Image outputImage \u003d userProfilePanel.getSquareImage(testImage);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        int width \u003d (int) outputImage.getWidth();"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "        int height \u003d (int) outputImage.getHeight();"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(width, height);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code userProfilePanel} displays the details of {@code userProfile} correctly"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPanelDisplay(UserProfilePanel userProfilePanel, UserProfile userProfile) {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        UserProfilePanelHandle userProfilePanelHandle \u003d new UserProfilePanelHandle(userProfilePanel.getRoot());"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify user details are displayed correctly"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPanelDisplaysUser(userProfile, userProfilePanelHandle);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 363,
      "-": 508
    }
  },
  {
    "path": "collated/unused/samzx.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# samzx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "###### \\OrderManager.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // Find your Account Sid, Token and phone number used at twilio.com/console"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ACCOUNT_SID \u003d \"AC08ed603e3a4de8c0055e27ed8f5e8a3e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String AUTH_TOKEN \u003d \"97fbd0228fa8419cb931583626039e00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String OUTGOING_PHONE \u003d \"+16123245532\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Country code specific to Singapore at the moment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LOCAL_COUNTRY_CODE \u003d \"+65\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CANNED_SPEECH_MESSAGE \u003d \"Hello, my name is %s. Could I order a %s to %s?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_PATH \u003d \"order/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CREATE_PATH \u003d \"create/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String REMOTE_SERVER \u003d \"https://mysterious-temple-83678.herokuapp.com/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderManager(UserProfile user, Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orderId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses Twilio API to begin call and order {@code Food}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void order() throws URISyntaxException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String to \u003d LOCAL_COUNTRY_CODE + toOrder.getPhone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String from \u003d OUTGOING_PHONE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        createOrder(String.format(CANNED_SPEECH_MESSAGE, user.getName(), toOrder.getName(), user.getAddress()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Call.creator(new PhoneNumber(to), new PhoneNumber(from),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new URI(REMOTE_SERVER + ORDER_PATH + orderId)).create();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Use TwiML to generate speech"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Say Hello. Wait for response. Say order. Wait for response. Say Thank you."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void createOrder(String speech) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Say say  \u003d new Say.Builder("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                speech)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        VoiceResponse voiceResponse \u003d new VoiceResponse.Builder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .say(say)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        sendOrder(voiceResponse.toXml());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sends order to REST API for TwiML to pick up"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void sendOrder(String body) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        URL url \u003d new URL(REMOTE_SERVER + CREATE_PATH + orderId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        con.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        con.setDoOutput(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        con.getOutputStream().write(body.getBytes(\"UTF-8\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        con.getInputStream();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 75
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat was developed by the https://github.com/CS2103JAN2018-W10-B3[Ultimate Hackerz] aka W10-B3 team. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Jackson Yi Zhou Huang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "image::jaxony.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "{empty}[https://github.com/jaxony[github]][https://cs2103jan2018-w10-b3.github.io/main/team/jacksonhuang.html[portfolio]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "In charge of UI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sam Zhong Sheng Xie"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "image::samzx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "{empty}[http://github.com/samzx[github]][https://cs2103jan2018-w10-b3.github.io/main/team/samxie.html[portfolio]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "In charge of Logic"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Toh Yunqi Cheryl"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "image::tohcheryl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "{empty}[http://github.com/tohcheryl[github]][https://cs2103jan2018-w10-b3.github.io/main/team/cheryltoh.html[portfolio]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "In charge of Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 12,
      "-": 25
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d HackEat - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU` Â Â Â Â  Since: `Jun 2016` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FoodListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a food) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFood\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of HackEat (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of HackEat before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th food in HackEat. The current state of HackEat is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new food."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the food was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore HackEat to the state before the `add` command executed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores HackEat to the state after the command is executed)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the food being deleted)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies HackEat (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::userconfig[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the User Profile"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Motivation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "It\u0027s nice to have someone greet you as your friend. HackEat makes its users comfortable and feel"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "welcomed whenever they open their app. This is possible because a new feature has been implemented that"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "takes in the user\u0027s name and other information. The user is then greeted upon opening the app."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Changes to Commands"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "A new Command class `UserConfigCommand` is created which allows the user to type in `userconfig n/NAME p/PHONE a/ADDRESS [alg/ALLERGY]` to update"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "their profile."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Changes to the Model"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "In order to support the user profile, a new package was created under the `Model` component, specifically a `user` package."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Inside it contains a `UserProfile` class, which holds the app state of the user\u0027s profile. `Allergy` is also a new object"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "in HackEat, and so an `Allergy` class was created in a new `allergy` package of the `Model` component. In order to support"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "multiple allergies for a single user, a `UniqueAllergyList` was also created under the same package."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "image::model-component-with-user-profile.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Saving to Storage"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Executing the `UserConfigCommand` triggers the `model#updateUserProfile` method, which then posts an event to the `EventCenter`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "indicating that `HackEat` data has changed. The model data is then saved to XML format for persistent data."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "New classes required to support XML of User Profile:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* `XMLAdaptedUserProfile`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* `XMLAdaptedAllergy`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Loading from storage"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "This was quite simple. Only one new method was required to be added to the `AddressBook` class to initialize"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "an `AddressBook` with the loaded `UserProfile`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "// end::userconfig[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// tag::changepic[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Changing of Profile Picture"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d What"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "The `changepic` command allows users to update their profile picture."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d Why"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "As developers, we believe in creating applications that build connections with our target users. HackEat"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "strives to achieve this by providing programmers with an option to spruce up the app a little by adding"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "their own picture to it. Besides that, the user profile picture could be used in the future for easy identification"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "of the customer by the deliverer."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d How"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "The `changepic` command triggers the opening of a new window which allows the user to easily select an image."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "This image is then saved locally and the UI is updated to reflect the change."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "image::ChangePicSequenceDiagram.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "When HackEat is first launched, a default profile picture is downloaded from the Internet."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "As the default profile picture should be displayed when the application starts up, a"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "`MainApp#initProfilePic` was created to ensure that the application displays the picture."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "This picture is stored locally on the same directory as the jar file."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Should the user desire to change the profile picture, the `changepic` command can be utilised."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "When the command is executed, a window pops up and the user selects an appropriate image."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "The existing profile picture is overwritten by the newly selected image."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Upon successful execution, a new `ProfilePicChangedEvent` will be raised."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "This is handled by the `UserProfilePanel` of the `UI` component which then crops the image, if necessary,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "and then updates the UI."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Saving the picture"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **Alternative 1:** Saving it in HackEat as a Base64 encoded String"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Pros: It was more intuitive to store the picture together with the user profile in HackEat."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Cons: Because of the length of the Base64 encoded string, it makes the xml file"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "very clunky."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **Alternative 2 (Current choice):** Save it as an image file in the same directory as the jar file."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Pros: More direct and easier to implement."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Cons: Use of this application will be restricted to a single user."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **Alternative 3:** Save the file path in the user profile"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Pros: It was more intuitive to store the file path in the user profile."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Cons: More tedious than Alternative 2 as a new field would have to be added to the user profile."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Since there exists only one `UserProfile` for this application, such an implementation was"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "unnecessary."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// end::changepic[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// tag::edituser[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Editing of profile details"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d What"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "The `edituser` command allows a user to update their details easily without having to provide all"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "the compulsory details again."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d Why"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "No programmer likes to have his/her flow state broken, especially by a long command that requires"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "one to key in repetitive details. Hence, the `edituser` command was created to allow programmers to"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "speedily update their profile details."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d How"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Under the `EditUserCommand`, a copy of the existing user with the updated details is created."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "This is then passed on to `model` for the user profile to be updated."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "image::EditUserSequenceDiagramLogic.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Upon parsing of an `EditUserCommand`, an `EditUserDescriptor` object is created."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". The attribute values of this object will then be set to the edited values."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". The `EditUserDescriptor` object will be passed as an argument to the constructor of the `EditUserCommand`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". The `EditUserCommand` is then preprocessed."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. The existing user profile is retrieved from `model`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Based on the attributes which have been set in the `EditUserDescriptor` object, a new `UserProfile`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "object with the updated attribute values is created."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". The new `UserProfile` is then passed to `model`."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". `model` then updates the user profile of HackEat."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". This causes an event to be raised which then causes HackEat to be saved to persistent storage."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Setting a user\u0027s details"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **Alternative 1:** Modifying the user details directly from Logic"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Pros: It was more intuitive to change the details of the existing user profile from the Logic Component."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Cons: This can result in increased coupling among the classes. As a result, many components would"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "have to be modified, which renders this method to be more complicated than the alternative."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **Alternative 2 (Current choice):** Creation of a new EditUserDescriptor object"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Pros: A cleaner implementation where there is less coupling. Less components would have to be modified"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "and it facilitates the execution of the UndoableCommand."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Cons: Overhead is incurred as a new copy of the UserProfile has to be created each time the user updates"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "his/her details."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// end::edituser[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::order[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d `order` command feature"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d What"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "The order command is the core of the application. It automates the food ordering process. It can automate the food"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "selection process, to minimise decision making strain, while also sending the order to the restaurant, reducing the"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "time required to order food."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Why"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Programmers often ignore their appetite amidst long coding sessions, leaving their stomach rumbling. It is often too"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "much effort to switch out of the flow state to begin the laborious process of ordering food. HackEat changes this."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "With a simple `order` command, the whole process, food selection and ordering, is streamlined."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview Flow chart"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "image::orderer--order-command.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ". Order command searches through existing Foods in the HackEat book"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ".. Within each Food, a score is derived based on number of factors such as: rating, price and"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": " allergies."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ". Foods will be ordered on a probabilistic basis, making sure a variety when ordering food often."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ". The program will email the restaurant with a record and summary of the request for food."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ". A phone call will be held to request food."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".. A message generated by the client will be sent to our server."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "Server source code can be found here: https://github.com/CS2103JAN2018-W10-B3/hackeat-server"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ".. The server will initiate a phone call using a calling service to the chosen food\u0027s phone number."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ".. A text to voice service will be used to translate text to voice to communicate with the restaurant on the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "other end and order a food with a pre-canned message."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "image::orderer--sequence.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "It is then assumed that the restaurant will acknowledge the order and deliver the food to the user\u0027s address."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "The user will need to pay once it has arrived."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementations"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Food Selector"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "image::orderer--food-selector.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* Foods are given scores based on ratings, price and allergy."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "** A high rating will result in a higher score"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "** A low price will result in a higher score"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Any allergies that the food matches with the user will immediately give the food a score of 0, eliminating it from"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "the selection process"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Foods are then given a number, based on their positions, occupying a range equivalent to their score"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": " (see diagram)."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "* A random number is selected between 0 and the cumulative score (max running score)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* The random number will land on a food (shown in diagram) and be selected."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* This will select a food probabilistically, based on the scores. A higher score will have a higher chance of selection."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Order Manager"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* Sets up a session and generates access to email server"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* Emails restaurant the order details, an order record and summary."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* Initiates a phone call to the food\u0027s phone number"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** v1.4 has implemented this on client side via Twilio, but was changed due to current rejection of the use of the"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "library."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "** Therefore the phone calling was delegated to a remote server, moved out of the client."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "** The remote server accepts a HTTP POST request with the message details, and create a phone call based on the message."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "- Email was used to avoid importing a large library and can be used as a record summary for the restaurant."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "- Voice call for ordering food was also chosen as it is Universal to all restaurants that deliver food."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "Some restaurants do nto have Uber Eats or Food Panda service."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "- A server was used to handle the phone call to keep the client lightweight, and to avoid any"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "library import complications."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives and future considerations"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Existing food ordering platform API"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "A promising alternative is to use an existing API from UberEats or other food ordering services to allow more services"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "added such as: delivery time tracking, more restaurants. This would guarantee the service more reliably."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Smarter ordering AI agent"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Possibly implement smarter speech with `\u003cGather\u003e` and `\u003cRedirect\u003e` (Twilio example)."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "1. `\u003cGather\u003e` gathers data from user in form of speech, and posts to the url /create/:id/response at the REST API."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "2. API parses the information and generates new XML data specific to the response at /order/:id/response."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "3. `\u003cRedirect\u003e` redirects chat flow to /order/:id/response and retrieves XML data and confirms, repeats or declines the order."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "API Links:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* `\u003cGather\u003e`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "** https://www.twilio.com/docs/voice/twiml/gather"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* `\u003cRedirect\u003e`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "** https://www.twilio.com/docs/voice/twiml/redirect"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "// end::order[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Interactive `add` feature"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d What"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Users can type in `add`, and then the system will take the user through a set of prompts to get the information. This"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "is a more natural way of using the CLI to get food."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Why"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Our goal is to reduce the amount of thinking that programmers have to do to get the food that they want. Memorising and"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "typing out the entire `add` command requires extra cognitive effort."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "It was quickly realised that extra application state was necessary for managing interactive flows between a user and the"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "system. This extra state includes:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "- Knowing if a user is actively engaged in an interaction, so that new inputs are interpreted in the context of this"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "existing interaction"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "- Knowing how far a user has progressed in the active interaction"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "- Intermediate application data that has not yet been committed to storage (e.g. the first attribute `Name` needs to"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "be stored in memory until the last attribute is read from the user, at which point the whole `Food` with all its"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "attributes can be saved in the `Storage` component)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "The state and logic that handle the above requirements are implemented in the abstract `Session` class as well as its"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "concrete, command-specific child classes (e.g. `SessionAddCommand`)."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Simplified sequence diagram for starting or continuing a `Session`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "image::add-command-interactive-start.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Extensibility"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "The interactive mode of communication between the user and the system was built with extensibility in mind."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "The abstract `Session` class contains the common methods that control the logical flow of any interactive command."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "The abstract methods `Session#parseInputForMultivaluedField` and `Session#parseInputForField` are overidden"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "by concrete subclasses, allowing each specific type of `Command` to parse and store user input relevant to its own fields."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, the implementation of an interactive `EditCommand` and `OrderCommand` would be convenient and simple owing to important"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "architectural decisions made from the beginning."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model or Logic?"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "It was difficult to choose where to place the `Session`, `SessionAddCommand`, `SessionManager` and `SessionInterface`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "interface and classes. These classes and interface handle both application data (i.e. they should belong in the `Model`)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "as well as text parsing (i.e. they could also belong in the `Logic` component). We opted for the simplistic solution of"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "placing it all in the `Model` component, with some coupling with the `Command` class which belongs to the `Logic`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "component."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "An alternative architectural design would be to have `SessionData` and `SessionLogic` separated across `Model` and"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "`Logic` components. The advantage of this design is that it adheres to the strict definitions of the functions"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "of each of these components. The disadvantage, which is much more costly, is the increased coupling between these separate components and classes. It is much more convenient to simply combine the state and logic for `Sessions` in a single component to reduce coupling and increase cohesion, making developer efficiency higher and code organisation more"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "simple."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::chat[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Chat UI"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d What"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "The `ResultDisplay` was replaced with a `ChatPanel`. The system\u0027s messages and the user\u0027s messages are now shown"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "as chat messages in a chat history. The message bubbles are color coordinated based on whether the message is"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "a user message, a failed system message, or a successful system message."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Why"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "The chat UI, like the interactive `add` command, aims to give our target users (hungry programmers) a fun and natural way to"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "manage food and food ordering. The commands are still CLI-based, but now there is an added sense of interaction and novelty"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "that delights our users."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "The chat UI consists of the following set of nested JavaFX components, displayed in the object diagram below."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "image::object-diagram-chat-ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "When the user presses `Enter` in the `CommandBox` UI component, a `NewUserMessageAvailableEvent` event is posted to the `EventCenter`."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "The `ChatPanel` is subscribed to such events, and a new message is created and added to the UI when such an event is received. The same"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "approach applies to the handling of `NewResultAvailableEvents`, which represent the system\u0027s responses to user input."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "// end::chat[]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all foods in the list."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in HackEat, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in HackEat."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a food, and link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] allows you to update the tags."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each food, and remove the `tag` from each food."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last food in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside food cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[the `FoodCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `FoodCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in HackEat."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever HackEat is updated."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of foods when the application just started."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of foods whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of foods status bar."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving HackEat to the cloud. However, the current implementation of the application constantly saves HackEat after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for HackEat storage."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that HackEat can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a food specified in the `INDEX`. +"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first food to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first food."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `FoodCard`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] s to display a remark for each food later."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/FoodListCard.fxml[`FoodListCard.fxml`]."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/FoodCardHandle.java[`FoodCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/food/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Food` to support a `Remark` field"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the food will be created without a remark)."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedFood` class"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Food` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedFood.java[`XmlAdaptedFood`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidFoodAddressBook.xml`, `typicalFoodsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `FoodBuilder`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Food` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/FoodBuilder.java[`FoodBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/food/Food.java[`Food`]."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/FoodBuilder.java[`FoodBuilder`]. This method will create a new `Remark` for the food that it is currently building."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Food` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalFoods.java[`TypicalFoods`]."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `FoodCard`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/FoodCard.java[`FoodCard`]\u0027s constructor to bind the `Remark` field to the `Food` \u0027s remark."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysFood(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a food."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* Developers/Hackers"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "** is picky and has a need to manage/order a significant number of pre-approved foods"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "** prefer desktop apps over other types"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "** can type fast"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "** prefers typing over mouse input"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "** is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "** busy working on projects and immersed to change train of thought"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "** does not care about their body/health and willing to order food to doorstep"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: Order food with as little disruption as possible to the user\u0027s workflow"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Feature contribution"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "*Major Enhancements:*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "* Order command - Sam"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "** Allows users to order food from the HackEat book. Designed to choose a food that best suits the scenario, making it"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "trustworthy enough for hackers that are too lazy to order themselves."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "* Interactive, chat-like commands - Jackson"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "** Allows the user to use commands without memorising their format. Simply respond to simple prompts given by the application."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* User Profile - Cheryl"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Allows the user to view and update their personal details. Creates a personalized experience for the user and enables food"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "to be delivered to wherever the user is."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "*Minor Enhancements:*"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "* Addition of User profile - Jackson"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "** User profile will save the preferences of the user, including allergies and how frugal they are. It also stores"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "personal information so the `order` command can order food to their address."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "* Addition of Price property - Cheryl"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "** Price property is required to track budgeting and control expenses. If the user is frugal, expensive foods will be"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "ordered less frequently."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "* Addition of Rating property - Sam"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "** Rating property of a food is essential to gather knowledge on what food the user enjoys. Highly rated foods will be"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "recommended more often, until it is too frequent."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |expert programmer |Use CLI to add food that I like | I can get recommended meals that I will likely enjoy"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |picky user |delete a food | I can avoid meals that I will probably not enjoy"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |picky user |find a food by name | to see how many times Iâ€™ve ordered certain foods"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |health-conscious user |Add my allergies | I can eat safely and not die"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |health-conscious user | Be blocked from adding food preferences | Be told if the food cannot be accepted due to allergies and not die"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |picky user | Edit my food preferences | I can have meals which fit my current requirements"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |critical user | Contact support | Fix any issues that may happen with the application"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |expert programmer  | Can use Unix-y commands to do actions | I am not dis-immersed from coding-work when ordering food"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* * *` |speedy user |Pre-fill/browse local area/people nearby food address books/playlists | Save time building my own book"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |critical user | Rate a meal on a scale from 1 to 5 | I can get recommended meals that I will likely enjoy"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |budget-conscious user | Set a price range for orders | to help with budgeting"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |speedy user | Add shortcuts for my favourite commands | Increase the speed in which I order food"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |health-conscious user | See how much calories in each meal | to better track and align my personal health goals"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |cultured user | Add culture tags to the food items that I like | The app can recommend certain types of cultural dishes"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |curious user | Discover new restaurants | I can try new types of cuisine"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |speedy user | order a random meal that I will probably like to my doorstep | I can minimise distraction of food ordering and focus on my work"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |visual user | See images of how the food looks like | So that I know how a dish appears if I have never heard of the name before"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |indecisive user | Type in my mood and get a list of recommended foods | I can decide more quickly on what to eat"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |private user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing the food by accident"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |indecisive user |Use different criteria to help decide where my food will be ordered from |I can order food based on my current needs e.g. fastest chicken rice(if I am starving)"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |indecisive user |Set a maximum number of food or restaurants to be shown |I will not be overwhelmed by all the information"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`* *` |budget-conscious user |Search, add and order for foods with a sale or discounted price | Save money and get good value for money"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |time-conscious user |Check how long my food will take to arrive |I have an idea of the waiting time"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |picky user |Save restaurants that I like |I can order food from my preferred restaurants more easily"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |health-conscious user |Set personal goals |I can get recommended meals which are aligned with my objectives"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |social user |Add friends using the app |So I can know what theyâ€™re eating and talk about it"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |hungry user |See the delivery rate of the deliverer |I can estimate the probability of the chances of my food arriving"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |picky user |See the rating of a restaurant |I know how reliable/how good the food is from that restaurant"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "|`*` |picky user |Delete restaurants that I have saved | So that I can keep an updated list of restaurants I like"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d Use case: Rate a meal"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "1. User types in a food that he would like to eat"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "2. Hackeat orders the food"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "3. User rates the meal he just had"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "4. Hackeat saves the rating."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* 1a. Food contains ingredients that he is allergic to."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** 1a1. Hackeat informs user of his allergy."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** 1a2. User decides whether to go ahead with the order."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d Use case: Edit food preferences"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "1. User types in a command to view his food preferences."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "2. Hackeat displays a list of food preferences."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "3. User types in command to modify his food preferences."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "4. Hackeat updates user\u0027s food preferences."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* 3a. User types in a food preference that already exists."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** 3a1. Hackeat informs user that food preference already exists."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Use case ends."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d Use case: Search, add and order food on sale"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "1. User searches for food which are on sale."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "2. Hackeat returns a list of relevant food."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "3. User picks one of the food to order."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "4. Hackeat helps to order the food."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* 1a. No food is on sale"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 foods without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ".  A programmer should be able to select and order food faster than using a mobile application like UberEats, Foodora, etc. given that the user has set-up his/her food preferences."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ".  The security measures required for safe handling of payments, home addresses and \u003c\u003ccredit-card-details, credit card details\u003e\u003e should be industry-standard."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ".  Complex tasks such as payment should be outsourced to existing, leading payment providers such as Stripe so that we can benefit from well-developed products."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ".  A reliable \u003c\u003cfood-delivery-network, food delivery network\u003e\u003e should be used to actually fulfill the food orders and deliveries."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ".  The food delivery services we use to power the backend of the app should offer a \u003c\u003cjava-api, Java API\u003e\u003e."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ".  The user experience should be similar to the \u003c\u003cenvironment, environment\u003e\u003e that programmers are used."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ".  After asking for a food suggestion, the system should respond within 1 second."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ".  The service provided by us should be cost-neutral or profitable."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ".  The user interface should be simple and minimise distractions so that programmers can continue with their work in a focused manner."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user should not be bored with the food that the app suggests and orders, as a certain level of novelty and surprise must be provided with each experience."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "[[food-delivery-network]] Food delivery network::"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "Companies such as delivery.com, eatstreet.com, and ordr.in that offer APIs to access their food delivery service."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "These services handle the communication with restaurants and deliverers for successful delivery of the food."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[[environment]] Environment::"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to the visual landscape inhabited by code monkeys. Such landscapes are characterised by certain fonts,"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "commands, and the plain look and feel of terminal applications."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "[[java-api]] Java API::"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to a Java library that can be used to programmatically access a food delivery service."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[[price-range]] Price Range::"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "Price of the food. Can be 1, 2, or 3."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "[[cuisine]] Cuisine::"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "The country from which the food originates."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "[[credit-card-details]] Credit card details::"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "Card number, card holder\u0027s name, expiry date and CSC (card security code)."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "[[order]] Order::"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "An set of food items that a user asks the app to deliver."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a food interactively"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ". Start the interactive command:"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ".. Type `add` followed by 0 or more whitespaces."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ".. Type `Chinese Hot Pot` for the food\u0027s name."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ".. Type `abcadsajdl` for the phone number to get a failure message."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ".. Type `12319313123` for a correct phone number."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ".. Press Enter for the rest of the fields until the `Success` message is received."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ".. Check that the food was indeed added in the food panel on the left."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ". Responsive width of message"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ".. Messages should be at most three-quarters of the width of the chat panel."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to see automatic resizing of the maximum width of the message bubbles."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ".. Type in a really long message (e.g., repeating the letter `a` 50 times) in response to any of the prompts. The text should wrap properly and not exceed three-quarters of the chat panel\u0027s width."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a food"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a food while all foods are listed"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all foods using the `list` command. Multiple foods in the list."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No food is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ordering a food"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ". Making sure emails are sent to restaurant"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ".. Edit food\u0027s email to your personal email and check inbox"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "... `edit 1 e/{your personal email}`"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ".... Only if there is an existing food. If not, create a new food first."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ".... example: `edit 1 sam@gmail.com`"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "... `order 1`"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "... Check your email inbox to verify that an order has been sent."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ". Making sure phone calls are executed"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ".. Edit food\u0027s phone to your personal phone (must be Singaporean number) and pick up call"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "(subject to incoming international calls fee)"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "... `edit 1 p/{your personal phone}`"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ".... Only if there is an existing food. If not, create a new food first."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ".... example: `edit 1 p/89990000`"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "... `order 1`"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "... Your phone will ring from a international number. Pick up the phone, and follow the instructions (if applicable),"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "then verify the message is correct."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Editing a user profile"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Updating the details of a user profile"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Prerequisite: A user profile should have been set up by default."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: `edituser n/Wei Wei` +"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: Only if your current profile name is not Wei Wei. +"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Name of user profile will be updated to `Wei Wei`."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: `edituser alg/peanuts alg/chicken` +"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: Only if your current allergies are not peanuts and chicken. +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Allergies of the user will be updated to include _only_ the two provided allergies."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Scrollable user profile panel"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: Add a huge bunch of allergies"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: Your name, phone and address will be truncated if necessary and the profile panel"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   becomes scrollable in order to display the allergies."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Changing of profile picture"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Replacing a profile picture with a valid picture"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Prerequisite: A default profile picture should have been set up."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: `changepic`"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: A file browser will pop up. Select a valid image file. The user profile picture +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   should be updated to display the center of the image that has been selected."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Replacing a profile picture with an invalid file"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: `changepic`"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: A file browser will pop up. Select an invalid file for e.g. a file which was not an"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   image file originally but has had its extension modified. The user profile picture(if it had existed)"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   displayed in the panel should be replaced by an empty space."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ". Hitting the cancel button of the file browser"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ".. Test case: `changepic`"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   Expected: A file browser will pop up. Click on the `cancel` button. A new chat bubble displaying"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "   an error message should appear."
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 203,
      "-": 1228
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d HackEat - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-W10-B3/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat is for those who *prefer to use a desktop app for ordering food*. More importantly, HackEat is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, HackEat can get food to your door in no time. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `hackeat.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *`list`* : lists all food"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **`add`**`n/Sweet Chili Fish Burger p/67773777 e/hanbaobao@mcds.sg a/10 Jalan Serene, #01-01, Serene Centre` : adds a food called `Sweet Chili Fish Burger` to HackEat."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* **`delete`**`3` : deletes the 3rd food shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Sweet Chili Fish Burger`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Sweet Chili Fish Burger t/western` or as `n/Sweet Chili Fish Burger`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/western`, `t/western t/vegetarian` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a food in a single line: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a food to HackEat +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG] [alg/ALLERGY]...`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Name and phone fields must not be left blank"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A food can have any number of tags and allergies (including 0)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `add n/Sweet Chili Fish Burger p/67773777 e/hanbaobao@mcds.sg a/10 Jalan Serene, #01-01, Serene Centre`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Hainanese Chicken Rice t/chinese e/tiantianchicken@maxwell.sg a/Maxwell Food Centre p/96914852 t/protein alg/msg`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a food interactively: `add`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a food to HackEat using an interactive, chat-like experience where HackEat asks you questions about your food"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "so you never have to remember the format for `add` again! +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* `add` [Press Enter] \u003e `What\u0027s the food called?`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* `Sweet Chili Fish Burger` [Press Enter] \u003e `Restaurant phone number?`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* `123133123` [Press Enter] \u003e `And their email? [Enter] to skip.`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* `email@email.com` [Press Enter] \u003e `Where they located @ fam? [Enter] to skip.`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `2 Clementi Road` [Press Enter] \u003e `$$$? [Enter] to skip.`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* [Press Enter] \u003e `U rate or what? [Enter] to skip.`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `5` [Press Enter] \u003e `Where those tags at? [Enter] to skip.`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* `burger` [Press Enter] \u003e `Anything else? Type [Enter] to stop.`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* [Press Enter] \u003e `Does this food have any allergies? Type [Enter] to skip.`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `peanut` [Press Enter] \u003e `Anything else? Type [Enter] to stop.`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* [Press Enter] \u003e `Success!`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all foods : `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all foods in HackEat. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a food : `edit`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing food in HackEat. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/RATING] [pr/PRICE] [t/TAG]... [alg/ALLERGY]...`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the food at the specified `INDEX`. The index refers to the index number shown in the last food listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the food will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* When editing allergies, the existing allergies of the food will be removed i.e adding of allergies is not cumulative."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the food\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* You can remove all the food\u0027s allergies by typing `alg/` without specifying any allergies after it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `edit 1 p/61234567 e/ilovehanbaobao@mcds.sg` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Edits the phone number and email address of the 1st food to be `61234567` and `ilovehanbaobao@mcds.sg` respectively."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `edit 2 n/Chicken Rice t/` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Edits the name of the 2nd food to be `Chicken Rice` and clears all existing tags."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating foods by name: `find`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Finds foods whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* The search is case insensitive. e.g `steak` will match `Steak`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* The order of the keywords does not matter. e.g. `Ribeye Steak` will match `Steak Ribeye`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* Only full words will be matched e.g. `Steak` will not match `Steaks`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* Foods matching at least one keyword will be returned (i.e. `OR` search). e.g. `Ribeye Steak` will return `Sirloin Steak`, `Ribeye Roast`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `find Chicken` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Returns `chicken` and `Chicken Cutlet`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `find Chicken Carrot Fries` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Returns any food having names `Chicken`, `Carrot`, or `Fries`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a food : `delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified food from HackEat. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the food at the specified `INDEX`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd food in HackEat."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `find Brownies` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st food in the results of the `find` command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Restores HackEat to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify HackEat\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::userconfig[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting user profile: `userconfig`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Sets user details to personalise the HackEat application so that food"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "can be delivered to the correct address and deliverers can contact the user via his/her phone number."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Users can also specify their allergies so that certain foods can removed from HackEat\u0027s smart food"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "recommendations."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Format: `userconfig n/NAME p/PHONE a/ADDRESS [alg/ALLERGY]...`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `userconfig n/Herbert Williams p/02142433532 a/12 Maccas Drive Singapore 4210 alg/lactose alg/gluten`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Sets user profile of Herbert Williams."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// end::userconfig[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// tag::edituser[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Editing user profile: `edituser`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Edits user details i.e. name, phone, address and allergies so that information of the user can be"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "updated easily. Format: `edituser [n/NAME] [p/PHONE] [a/ADDRESS] [alg/ALLERGY]...`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* When editing allergies, the existing allergies of the user will be removed i.e adding of allergies is not cumulative."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* You can remove all allergies by typing `alg/` without specifying any allergies after it."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* `edituser p/61234567 a/Blk 654 Cashew Road #03-92 Singapore 978654` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Edits the phone number and address of the user to be `61234567` and `Blk 654 Cashew Road #03-92 Singapore 978654` respectively."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// end::edituser[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// tag::changepic[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d\u003d Setting a profile picture: `changepic`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Changes a user\u0027s profile picture to one that the user has selected. Works best for square images"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "where your face is positioned right at the center."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Format: `changepic`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "// end::changepic[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from HackEat. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::orderfood[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Order food: `order`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Orders food."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* If index is given, will order the food at the specified index."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* If no index is given, a food will be chosen for you."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "The food chosen is determined to be both desirable yet, not too deterministic that it will always be ordered."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* This command will not order foods which you have allergies for."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* Ordering may take some time as email and phone call is prepared."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Food is ordered by:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ". Emailing the restaurant of the associated food for a request, and summary of the order (for recording purposes)."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ". Sending a request to our server which initiates a phone call to food\u0027s phone number of the same message."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": " Make sure that the food\u0027s contact details are correct, specifically, the phone is a Singaporean number."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `order [INDEX]` or `order`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "- `order 2` orders the second food listed"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "- `order` selects a food from the list to be ordered for you"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "// end::orderfood[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::nlp[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Natural Language Chatbot `[coming in v2.0]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "You can chat with HackEat without using strictly-formatted commands. Just like chatting with a human :)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Our smart AI algorithm will understand what you mean, and what you want to eat (really!)."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* `Yo HackEat, add McDonald\u0027s McSpicy` \u003e HackEat looks up the nearest McDonald\u0027s to your current location and fills in all the other details."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::nlp[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HackEat folder."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]... [alg/ALLERGY]...` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "e.g. `add n/Mee Rebus p/22224444 e/meerebus@example.com a/123, Clementi Rd, 1234665 t/malay t/spicy`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]... [alg/ALLERGY]...` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "e.g. `edit 2 n/Mee Soto e/meesoto@example.com`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "e.g. `find Laksa Sushi`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Order* : `order [INDEX]`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Edit user details* : `edituser [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS] [alg/ALLERGY]...` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "e.g. `edituser n/Lucas Ho alg/peanuts`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Change profile picture* : `changepic`"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 63,
      "-": 289
    }
  },
  {
    "path": "docs/team/cheryltoh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d Cheryl Toh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d PROJECT: HackEat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat was morphed from AddressBook - Level 4, a desktop application which is used"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "for teaching Software Engineering Principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "_Start of Extract [from: Read Me] written by Jackson Huang_"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat is a next-gen food recommendation and ordering app for the hackers, the programmers, the creators of world bustling and bursting with world-changing ideas but running short on time â?°â?³."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Perfect for the busy software developer or desk hermit: Use CLI commands to accelerate the chore of finding the right food."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "HackEat takes the stress, thinking and time-waste out of deciding what to eat. Order your food in style with commands like `order` to stay in the zone even when youâ€™re not programming."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "_End of Extract [from: Read Me] written by Jackson Huang_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Major enhancement*: Provide users with a personalised and customised experience"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** What it does: Allows users to view and modify their details as well as update their profile picture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Justification: This feature allows users to update their contact details and allergies - both of which are imperative to HackEat."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "Since the `order` command utilises the allergies of users to determine the types of food that they can eat, it is essential"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "to have an `edituser` command that allows users to easily update their allergies. In addition, this feature also makes it simple for users to change"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "their contact details, which can prove to be useful if they want their food to be delivered to the right place. Lastly, with the prevalence"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "of user customisation these days, what users appreciate is an emotionally tangible link between them and the app. Having a profile picture is"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "the first step to achieving this."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Highlights: This enhancement resulted in the implementation of two new commands - `changepic` and `edituser`. Implementation of the two"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "commands required an analysis of the pros and cons of the various possible options."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Jackson Huang implemented the basic classes required for a User Profile."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Minor enhancement*: Added price and allergy attribute to Food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Justification: These 2 attributes allows HackEat to create a personalised experience for the user. Based on the allergies of the user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "and the food, an appropriate food will be ordered. A future enhancement would include taking the budget of the user into account."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-W10-B3/main/blob/master/collated/functional/tohcheryl.md[Functional code]] [https://github.com/CS2103JAN2018-W10-B3/main/blob/master/collated/test/tohcheryl.md[Test code]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 90% (https://github.com/CS2103JAN2018-W10-B3/main/pull/76[#76])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*** Update User Guide to align with HackEat"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (example: https://github.com/CS2103JAN2018-W13-B3/main/issues/151[#151])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "*** Set up Coveralls for the team"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedituser]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dchangepic]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dchangepic]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dedituser]"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 65,
      "-": 13
    }
  },
  {
    "path": "docs/team/jacksonhuang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Jackson Huang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: HackEat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d What is this project?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For our CS2103 Software Engineering module at the National University of Singapore, our team of three morphed an AddressBook Java application into a food ordering application called HackEat. The aim of this module was to practice important aspects of software engineering, including working with a large codebase (AddressBook started off as 10k Lines of Code), writing tests, using version control and practising project management using GitHub."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d What is HackEat?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "HackEat is a next-generation food recommendation and ordering app for the hackers, the programmers and the creators of the world who are bustling and bursting with world-changing ideas but running short on time â?°â?³. HackEat is perfect for the busy software developer or desk hermit. Why not use CLI commands to accelerate the chore of finding the right food? HackEat takes the stress, thinking and time out of deciding what to eat. Our app allows users to order their favourite food in style with commands like `order`. That way, they can stay in the zone even when theyâ€™re not programming!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Major enhancement: implemented architecture for interactive commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** What it is: The user can `add` new foods by interactively responding to the application\u0027s prompts and questions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: We want to make an app that takes as little cognitive effort as possible to order and manage food intake. The complex format-based commands require typing extra formatting tags (e.g. `n/ p/ a/`), which takes extra cognitive effort. An interactive and natural chat-like system makes it much easier and faster to add, and in future, edit and order food."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This was a challenging feature to design. I used sequence diagrams and architectural diagrams to initially understand the problem. The idea of using a Session to track the state of interactions occurred to me only after considering other options."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** For the Developer: All the architecture is in place to convert other non-interactive commands into interactive commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Minor enhancement: added a User Profile and UserConfig command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "** What it is: the user can configure his/her User Profile, populating it with the user\u0027s name, address, phone and allergies."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves user experience because interactions can be more personalised. In addition, this minor feature"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   is also essential to the food ordering functionality: without a personal phone and address, food cannot be delivered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This feature involved touching all components of the application and was a good first feature to work on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Cheryl Toh extended this significantly for her major enhancement."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Other contributions:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Team work"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Found a bug and submitted a bug issue for teammate Sam Xie\u0027s `order` feature [https://github.com/CS2103JAN2018-W10-B3/main/issues/163[GitHub Issue]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Project Management"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Processed and assigned bugs after the v1.4 testing session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed release v1.2 and v1.4 on GitHub (2 releases)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Set up code collation `.sh` script."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Renamed `.jar` file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Set up automated documentation publishing on GitHub."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Set up Travis CI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Set up GitHub organisation, repository, invited team members and created Developer team."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-W10-B3/main/blob/master/collated/functional/jaxony.md[Functional code]] [https://github.com/CS2103JAN2018-W10-B3/main/blob/master/collated/test/jaxony.md[Test code]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003duserconfig]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnlp]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dchat]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserconfig]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String PROFILE_PICTURE_PATH \u003d \"profilepic.png\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        initProfilePic();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets up a default profile picture if a picture has not been set"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void initProfilePic() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File profilePicFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!profilePicFile.exists()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            initDefaultProfilePic();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Saves default profile picture to profilepic.png"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void initDefaultProfilePic() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            File profilePicFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            URL defaultPicUrl \u003d new URL(\"http://i64.tinypic.com/vo385x.png\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            FileUtils.copyURLToFile(defaultPicUrl, profilePicFile);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            logger.warning(\"Unable to download default profile picture. \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \"Starting HackEat without a profile picture.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 34,
      "-": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ProfilePictureChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Indicates profile picture of user has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class ProfilePictureChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 11,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of foods */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a new Session for chat-like interaction with system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    void createNewSession(String userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Starts the active Session."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Checks if command is an interactive command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param commandText Text input from user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws ParseException If {@code commandText} is not a valid command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    boolean isCommandInteractive(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Returns the current ReadOnlyAddressBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "jaxony": 27,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            //@@author jaxony"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            CommandResult result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            if (model.isUserInActiveSession()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                logger.info(\"User is in an active session with the system.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                result \u003d model.interpretInteractiveUserInput(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            } else if (isCommandInteractive(commandText)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                logger.info(\"Command is interactive.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                createNewSession(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                result \u003d startSession();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                //@@author"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                result \u003d command.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                undoRedoStack.push(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void createNewSession(String userInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Command interactiveCommand \u003d addressBookParser.getCommand(userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        interactiveCommand.setData(model, null, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        model.createNewSession(interactiveCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return model.startSession();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean isCommandInteractive(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return addressBookParser.isCommandInteractive(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 7,
      "jaxony": 29,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a food to HackEat."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to HackEat. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_RATING + \"RATING \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_NAME + \"Tissue Prata \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_PHONE + \"62895379 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_EMAIL + \"rkeatinghouse@gmail.com \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_ADDRESS + \"1 Kensington Park Rd \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_RATING + \"5 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PRICE + \"3.50 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_TAG + \"sweet \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_TAG + \"crispy \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_ALLERGIES + \"lactose\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in HackEat\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final List\u003cPrompt\u003e PROMPTS \u003d Arrays.asList("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Name.CLASS_NAME, \"What\u0027s the food called?\", false),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Phone.CLASS_NAME, \"Restaurant phone number?\", false),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Email.CLASS_NAME, \"And their email?\", false, true),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Address.CLASS_NAME, \"Where they located @ fam?\", false, true),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Price.CLASS_NAME, \"$$$?\", false, true),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Rating.CLASS_NAME, \"U rate or what?\", false, true),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Tag.CLASS_NAME, \"Where those tags at?\", true, true),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            new Prompt(Allergy.CLASS_NAME, \"Does this food have any allergies?\", true, true));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food toAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Food food) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public List\u003cPrompt\u003e getPrompts() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return PROMPTS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addFood(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void setFood(Food foodToAdd) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        toAdd \u003d foodToAdd;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 10,
      "jaxony": 22,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangePicCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.commons.events.ui.ProfilePictureChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Changes the profile picture of the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class ChangePicCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changepic\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT \u003d \"Profile picture has been changed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_PIC_CHANGED_FAILURE \u003d \"Unable to set profile picture\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Allows user to select a profile picture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public File selectProfilePic() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Image Files\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \"*.png\", \"*.jpg\", \"*.gif\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File selectedFile \u003d fileChooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return selectedFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File outputFile \u003d new File(\"profilepic.png\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File selectedFile \u003d selectProfilePic();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            FileUtils.copyFile(selectedFile, outputFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new CommandException(MESSAGE_PIC_CHANGED_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EventsCenter.getInstance().post(new ProfilePictureChangedEvent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new CommandResult(MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears HackEat."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"HackEat has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected CommandHistory history;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of foods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param displaySize used to generate summary"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for foods displayed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForFoodListShownSummary(int displaySize) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_FOODS_LISTED_OVERVIEW, displaySize);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute() throws CommandException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Provides any needed dependencies to the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Commands making use of any of these should override this method to gain"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * access to the dependencies."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public List\u003cPrompt\u003e getPrompts() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 5,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandFactory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Factory pattern for creating command objects"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a Command given a command word."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param commandWord Word for a command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return A new Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws IllegalArgumentException If the command word is not supported."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static Command createCommand(String commandWord) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return new AddCommand(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 21,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing food in HackEat."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the food identified \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last food listing. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]... \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_EMAIL + \"unusual@chickenrice.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food: %1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in HackEat.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food foodToEdit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food editedFood;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the food in the filtered food list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editFoodDescriptor details to edit the food with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editFoodDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editFoodDescriptor \u003d new EditFoodDescriptor(editFoodDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFood(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException dpe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FoodNotFoundException pnfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target food cannot be missing\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editFoodDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editFoodDescriptor.getPhone().orElse(foodToEdit.getPhone());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editFoodDescriptor.getEmail().orElse(foodToEdit.getEmail());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editFoodDescriptor.getAddress().orElse(foodToEdit.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price updatedPrice \u003d editFoodDescriptor.getPrice().orElse(foodToEdit.getPrice());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Rating updatedRating \u003d editFoodDescriptor.getRating().orElse(foodToEdit.getRating());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e updatedAllergies \u003d editFoodDescriptor.getAllergies().orElse(foodToEdit.getAllergies());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Food(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedPrice, updatedRating,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                updatedTags, updatedAllergies);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(foodToEdit, e.foodToEdit);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the food with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the food."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setAllergies(toCopy.allergies);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.price, this.rating,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    this.tags, this.allergies);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Sets {@code allergies} to this object\u0027s {@code allergies}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setAllergies(Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns an unmodifiable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code allergies} is null."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditFoodDescriptor)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getAllergies().equals(e.getAllergies());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 41,
      "-": 251
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditUserCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Edits the details of a user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edituser\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the user \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + PREFIX_PHONE + \"91234567\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_EDIT_USER_SUCCESS \u003d \"Edited User: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USER \u003d \"Edited user profile is the same as the one set previously.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final EditUserCommand.EditUserDescriptor editUserDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserProfile userToEdit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserProfile editedUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Creates a new EditUserCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @param editUserDescriptor An EditUserDescriptor object which contains the updated attribute values"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand(EditUserCommand.EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(editUserDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.editUserDescriptor \u003d new EditUserCommand.EditUserDescriptor(editUserDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            model.updateUserProfile(editedUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (DuplicateUserException dpe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_USER_SUCCESS, editedUser));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    protected void preprocessUndoableCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userToEdit \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editedUser \u003d createEditedUser(userToEdit, editUserDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Creates and returns a {@code UserProfile} with the details of {@code userToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * edited with {@code editProfileDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static UserProfile createEditedUser(UserProfile userToEdit,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                                                EditUserCommand.EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert userToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Name updatedName \u003d editUserDescriptor.getName().orElse(userToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Phone updatedPhone \u003d editUserDescriptor.getPhone().orElse(userToEdit.getPhone());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Address updatedAddress \u003d editUserDescriptor.getAddress().orElse(userToEdit.getAddress());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e updatedAllergies \u003d editUserDescriptor.getAllergies().orElse(userToEdit.getAllergies());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUser \u003d new UserProfile(updatedName, updatedPhone, updatedAddress, updatedAllergies);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editedUser;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!(other instanceof EditUserCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand e \u003d (EditUserCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editUserDescriptor.equals(e.editUserDescriptor)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 Objects.equals(userToEdit, e.userToEdit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Stores the details to edit the user with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * corresponding field value of the user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static class EditUserDescriptor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public EditUserDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Creates a new EditUserDescriptor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public EditUserDescriptor(EditUserCommand.EditUserDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setAllergies(toCopy.allergies);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.address, this.allergies);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Sets the current set of {@code allergies} to the {@code allergies} set provided"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * A defensive copy of {@code allergies} is used internally."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void setAllergies(Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns an unmodifiable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code allergies} is null."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            if (!(other instanceof EditUserCommand.EditUserDescriptor)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            EditUserCommand.EditUserDescriptor e \u003d (EditUserCommand.EditUserDescriptor) other;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    \u0026\u0026 getAllergies().equals(e.getAllergies());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 184,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all foods in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all foods whose names contain any of \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" almond banana chocolate\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForFoodListShownSummary(model.getFilteredFoodList().size()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.orderer.FoodSelector;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.orderer.OrderManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Orders command which starts the selection and ordering food process in HackEat."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Orders a food \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been requested to be ordered.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_SELECT_FAIL \u003d \"You seem to be allergic to all the foods listed here.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_SELECT_INDEX_FAIL \u003d \"Sorry, can\u0027t order that, you seem to be allergic to %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_FAIL_FOOD \u003d \"Something went wrong, we could not order %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_CHECK_INTERNET_CONNECTION \u003d \"Failed to contact our servers. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "            + \"Please check your internet connection.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_EMAIL_FAIL_FOOD \u003d \"%1$s has failed to be ordered via email. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "            + MESSAGE_CHECK_INTERNET_CONNECTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_DIAL_FAIL_FOOD \u003d \"%1$s has failed to be ordered via phone. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "            + MESSAGE_CHECK_INTERNET_CONNECTION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Creates an Order command to the specified index of {@code Food}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public OrderCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Selects a index based on {@code FoodSelector} algorithm if not selected yet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws CommandException if unable to selectIndex food"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void getIndexIfNull() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "        if (this.index \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "            FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "            this.index \u003d fs.selectIndex(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Verifies that the index is smaller than the size of a list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param list which the index can not exceed the size"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws CommandException if index exceeds list size"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void verifyIndex(Index index, List list) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Checks a food for allergies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param food to check for allergy"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws CommandException is thrown if food contains an allergy same as user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void checkForAllergy(Food food) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (Allergy allergy : food.getAllergies()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (model.getUserProfile().getAllergies().contains(allergy)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SELECT_INDEX_FAIL, food.getName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (!OrderManager.netIsAvailable(OrderManager.REMOTE_SERVER)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_CHECK_INTERNET_CONNECTION));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "                OrderManager manager \u003d new OrderManager(model.getAddressBook().getUserProfile(), toOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "                manager.order();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toOrder.getName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EMAIL_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DIAL_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAIL_FOOD, toOrder.getName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samzx"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samzx"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samzx"
        },
        "content": "        getIndexIfNull();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samzx"
        },
        "content": "        verifyIndex(this.index, lastShownList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food aboutToOrder \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samzx"
        },
        "content": "        checkForAllergy(aboutToOrder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samzx"
        },
        "content": "        toOrder \u003d aboutToOrder;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    || (other instanceof OrderCommand"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    \u0026\u0026 index.equals(((OrderCommand) other).index));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return other \u003d\u003d this"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    || (other instanceof OrderCommand"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    \u0026\u0026 index \u003d\u003d (((OrderCommand) other).index));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "samzx": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Prompt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Contains a field and an associated message that the system will send to the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * for this field when interactively asking the user for input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class Prompt {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public final boolean isMultiValued;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public final boolean isOptional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final String fieldName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Prompt(String fieldName, String message, boolean isMultiValued, boolean isOptional) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.fieldName \u003d fieldName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.isMultiValued \u003d isMultiValued;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.isOptional \u003d isOptional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Prompt(String fieldName, String message, boolean isMultiValued) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.fieldName \u003d fieldName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.isMultiValued \u003d isMultiValued;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.isOptional \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public String getFieldName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return fieldName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 34,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UserConfigCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Sets User Profile of HackEat user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class UserConfigCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"userconfig\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a user\u0027s personal details to HackEat. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_ALLERGIES + \"lactose \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            + PREFIX_ALLERGIES + \"gluten\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"User profile updated\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final UserProfile toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a UserConfigCommand to add the specified {@code UserProfile}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public UserConfigCommand(UserProfile profile) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        requireNonNull(profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        toAdd \u003d profile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        model.initUserProfile(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                || (other instanceof UserConfigCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                \u0026\u0026 toAdd.equals(((UserConfigCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 47,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/orderer/EmailManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class EmailManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String EMAIL_CONTENT_MODE \u003d \"text/html\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String SUBJECT_LINE \u003d \"Order from HackEat. Reference code: %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_AUTH_HEADER \u003d \"mail.smtp.auth\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_AUTH \u003d \"true\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_TLS_HEADER \u003d \"mail.smtp.starttls.enable\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_TLS \u003d \"true\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_HOST_HEADER \u003d \"mail.smtp.host\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_HOST \u003d \"smtp.gmail.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_PORT_HEADER \u003d \"mail.smtp.port\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PROPERTY_PORT \u003d \"587\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USERNAME \u003d \"hackeatapp@gmail.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String PASSWORD \u003d \"hackeater\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String FROM \u003d USERNAME;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String to;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public EmailManager(UserProfile user, Food food, String orderId, String message) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.orderId \u003d orderId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Creates an email session, fills in email contents and sends."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws MessagingException when able to utilise email session"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void email() throws MessagingException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "        generateEmailSession();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "        sendEmail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Generates a new email session with pre-defined seetings"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void generateEmailSession() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        to \u003d toOrder.getEmail().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "        props.put(PROPERTY_AUTH_HEADER, PROPERTY_AUTH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "        props.put(PROPERTY_TLS_HEADER, PROPERTY_TLS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "        props.put(PROPERTY_HOST_HEADER, PROPERTY_HOST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "        props.put(PROPERTY_PORT_HEADER, PROPERTY_PORT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "        session \u003d Session.getInstance(props,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "                new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "                        return new PasswordAuthentication(USERNAME, PASSWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Sends an email to a food\u0027s email address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void sendEmail() throws MessagingException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "        MimeMessage message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": "        message.setFrom(new InternetAddress(FROM));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": "        message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": "        message.setSubject(String.format(SUBJECT_LINE, orderId));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "        message.setContent(buildContent(), EMAIL_CONTENT_MODE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Transport.send(message);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Creates the body of the email message for ease of reading"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the raw HTML string of the email content"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String buildContent() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samzx"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(buildHeading());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(buildExcerpt());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(buildSummary());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(buildFooter());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Builds the heading for the content of the email"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String buildHeading() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return wrapH1(String.format(\"Order for %s.\", user.getName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Builds the excerpt message for the content of the email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String buildExcerpt() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samzx"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapH2(String.format(\"%s has sent the following message:\", user.getName())));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapPre(message));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Builds the order summary for the content of the email"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String buildSummary() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samzx"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapH2(\"Order summary:\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Food: %s\", toOrder.getName())));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Price: %s\", Price.displayString(toOrder.getPrice().getValue()))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapUl(String.format(\"Address: %s\", user.getAddress())));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samzx"
        },
        "content": "        stringBuilder.append(wrapUl("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samzx"
        },
        "content": "                String.format(\"Time: %s\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samzx"
        },
        "content": "                        new Date(Clock.fixed(Instant.now(), ZoneId.systemDefault()).millis()).toString())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samzx"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Builds the footer for the content of the email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the built string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String buildFooter() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return wrapI(\"Thank you, from the HackEat team.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String wrapH1(String content) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"\u003ch1\u003e\" + content + \"\u003c/h1\u003e\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String wrapH2(String content) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"\u003ch2\u003e\" + content + \"\u003c/h2\u003e\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String wrapUl(String content) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"\u003cul\u003e\" + content + \"\u003c/ul\u003e\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String wrapPre(String content) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"\u003cpre\u003e\" + content + \"\u003c/pre\u003e\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String wrapI(String content) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"\u003ci\u003e\" + content + \"\u003c/i\u003e\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "samzx": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/orderer/FoodSelector.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Selects food in HackEat if the user has not specified a specific food to order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class FoodSelector {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final float SCORE_BUFFER \u003d 0.001f;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Selects an {@code Index} from a model based on the HackEat Algorithm"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param model of the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the index of the selected food"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public Index selectIndex(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "        ArrayList\u003cFoodDescriptor\u003e foodDescriptors \u003d buildFoodDescriptorList(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodDescriptor foodDescriptor \u003d pickFood(foodDescriptors);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return foodDescriptor.index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Selects a food randomly with weighting from a list of food with scores {@code FoodDescriptor}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param foodDescriptors an ArrayList of {@code FoodDescriptor}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the selected {@code FoodDescriptor}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private FoodDescriptor pickFood(ArrayList\u003cFoodDescriptor\u003e foodDescriptors) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "        float runningScore \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (FoodDescriptor foodDescriptor : foodDescriptors) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "            runningScore +\u003d foodDescriptor.score;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "            foodDescriptor.runningScore \u003d runningScore;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "        float decidingNumber \u003d (new Random()).nextFloat() * runningScore;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (FoodDescriptor foodDescriptor : foodDescriptors) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (decidingNumber \u003c foodDescriptor.runningScore) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "                return foodDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "        throw new CommandException(OrderCommand.MESSAGE_SELECT_FAIL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Generates a list of food based on the model provided"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param model to be provided"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return a list of food"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private ArrayList\u003cFoodDescriptor\u003e buildFoodDescriptorList(Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "        ArrayList\u003cFoodDescriptor\u003e foodDescriptors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "            FoodDescriptor foodDescriptor \u003d new FoodDescriptor(lastShownList.get(i), Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "            foodDescriptor.score \u003d calculateScore(foodDescriptor.food, model.getUserProfile().getAllergies());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "            foodDescriptors.add(foodDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return foodDescriptors;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Calculates a score based on some metric provided by the {@code Food} class"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param food The food that requires a score to be derived from"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param userAllergies a set of allergies of the user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the score for that particular food"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private float calculateScore(Food food, Set\u003cAllergy\u003e userAllergies) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "        float score;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (Allergy allergy : food.getAllergies()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (userAllergies.contains(allergy)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "        score \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": "        score *\u003d scoreFromRating(food.getRating()) + SCORE_BUFFER;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "        score *\u003d scoreFromPrice(food.getPrice()) + SCORE_BUFFER;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assert(score \u003e 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Outputs a score based on the value of the price"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * For dampener variable:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    dampener \u003d 1, Roughly twice more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    dampener \u003d 1.5, Roughly 50% more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    dampener \u003d 2, Roughly 30% more likely to order a food of $5, than of value $10"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param price to have score derived from"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return score determined by algorithm"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private float scoreFromPrice(Price price) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samzx"
        },
        "content": "        final float dampener \u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samzx"
        },
        "content": "        float value \u003d Float.parseFloat(price.getValue());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return (float) Math.pow(1 / (value + 1), 1 / dampener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Outputs a score based on the value of the rating"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * For weighting variable:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    weighting \u003d 1, 5x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    weighting \u003d 1.5, ~10x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * -    weighting \u003d 2, 25x more likely to order a food of rating 5, than of 1"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param rating to have score derived from"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return score determined by algorithm"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private float scoreFromRating(Rating rating) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samzx"
        },
        "content": "        final float weighting \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samzx"
        },
        "content": "        float value \u003d Float.parseFloat(rating.value);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return (float) Math.pow(value, weighting);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Holds descriptions of the food for calculation purposes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samzx"
        },
        "content": "    class FoodDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samzx"
        },
        "content": "        private Food food;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samzx"
        },
        "content": "        private Index index;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samzx"
        },
        "content": "        private float score;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samzx"
        },
        "content": "        private float runningScore;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodDescriptor(Food food, Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samzx"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samzx"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "samzx": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/orderer/OrderManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CONTENT_SEPERATOR \u003d \"//\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String REMOTE_SERVER \u003d \"https://mysterious-temple-83678.herokuapp.com/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CREATE_PATH \u003d \"create/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String ORDER_PATH \u003d \"order/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String REQUEST_METHOD \u003d  \"POST\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CHARSET_ENCODING \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CANNED_SPEECH_MESSAGE \u003d \"Hello, my name is %s. Could I order a %s to %s?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public OrderManager(UserProfile user, Food food) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.orderId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Sends email summary and orders {@code Food} via phone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void order() throws IOException, MessagingException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String message \u003d createMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(user, toOrder, orderId, message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "        emailManager.email();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "        sendOrder(toOrder.getPhone().toString(), message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Checks whether client can connect to server"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return whether client can connect to server"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static boolean netIsAvailable(String urlString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "            final URL url \u003d new URL(urlString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "            final URLConnection conn \u003d url.openConnection();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "            conn.connect();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Creates the body based on a pre-defined message, the user and food values"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return the String format of the body"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String createMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return String.format(CANNED_SPEECH_MESSAGE, user.getName(), toOrder.getName(), user.getAddress());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "      * Sends order to REST API for TwiML to pick up"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "      */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void sendOrder(String toPhone, String body) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String data \u003d toPhone + CONTENT_SEPERATOR +  body;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "        URL url \u003d new URL(REMOTE_SERVER + CREATE_PATH + orderId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.setRequestMethod(REQUEST_METHOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.setDoOutput(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.getOutputStream().write(data.getBytes(CHARSET_ENCODING));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.getInputStream();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Returns the orderId for this object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public String getOrderId() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return this.orderId;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "samzx": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_PRICE, PREFIX_RATING, PREFIX_TAG, PREFIX_ALLERGIES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    .orElse(new Email(Email.DEFAULT_EMAIL));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    .orElse(new Address(Address.DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    .orElse(new Price(Price.DEFAULT_PRICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    .orElse(new Rating(Rating.DEFAULT_RATING));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            Set\u003cAllergy\u003e allergyList \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGIES));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            Food food \u003d new Food(name, phone, email, address, price, rating, tagList, allergyList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(food);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 10,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.ChangePicCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UserConfigCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Checks whether userInput specifies a command that is interactive."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Currently only AddCommand supports interactive mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return True if the command is interactive, false if the command is valid but not interactive."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws ParseException If the command is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean isCommandInteractive(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Matcher matcher \u003d match(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        switch (matcher.group(\"commandWord\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case ChangePicCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case EditUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case UserConfigCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return arguments.equals(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Matches user input string with a basic command regex."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Matcher object produced from regex pattern."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws ParseException If error arises during parsing of {@code userInput}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Matcher match(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The command based on the user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d match(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new OrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        case ChangePicCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return new ChangePicCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        case UserConfigCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UserConfigCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        case EditUserCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return new EditUserCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a new command object."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Text input from user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return New Command object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws IllegalArgumentException If the command in {@code userInput} is not supported."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Command getCommand(String userInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return CommandFactory.createCommand(userInput.trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 8,
      "jaxony": 62,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ALLERGIES \u003d new Prefix(\"alg/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        PREFIX_PRICE, PREFIX_RATING, PREFIX_TAG, PREFIX_ALLERGIES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditFoodDescriptor editFoodDescriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editFoodDescriptor::setName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editFoodDescriptor::setPhone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editFoodDescriptor::setEmail);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editFoodDescriptor::setAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editFoodDescriptor::setPrice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editFoodDescriptor::setRating);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    .ifPresent(editFoodDescriptor::setAllergies);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editFoodDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editFoodDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cTag\u003e} if {@code allergies} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * {@code Set\u003cAllergy\u003e} containing zero allergies."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert allergies !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1 \u0026\u0026 allergies.contains(\"\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ? Collections.emptySet() : allergies;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Optional.of(ParserUtil.parseAllergies(allergySet));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 24,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditUserCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Parses input arguments and creates a new EditUserCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommandParser implements Parser\u003cEditUserCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_ALLERGIES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor editUserDescriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editUserDescriptor::setName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editUserDescriptor::setPhone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editUserDescriptor::setAddress);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    .ifPresent(editUserDescriptor::setAllergies);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!editUserDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new ParseException(EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new EditUserCommand(editUserDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e} if {@code allergies} is non-empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * {@code Set\u003cAllergy\u003e} containing zero allergies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert allergies !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (allergies.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1 \u0026\u0026 allergies.contains(\"\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                ? Collections.emptySet() : allergies;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Optional.of(ParserUtil.parseAllergies(allergySet));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 54,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Parses input arguments and creates a new Order Command object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderCommandParser implements Parser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OrderCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * and returns an OrderCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public OrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "        if (withIndexArgument(args)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return orderCommandWithIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "            return orderCommandWithoutIndex();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Returns a default order command without a specific index to order"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private OrderCommand orderCommandWithoutIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return new OrderCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Returns an OrderCommand object for execution when given a {@code String} of"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * arguments in the context of the OrderCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private OrderCommand orderCommandWithIndex(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return new OrderCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private boolean withIndexArgument(String args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return !args.equals(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "samzx": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses a {@code String price} into an {@code Price}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws IllegalValueException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static Price parsePrice(String price) throws IllegalValueException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses a {@code String Rating} into an {@code Rating}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws IllegalValueException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Rating parseRating(String rating) throws IllegalValueException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e rating} into an {@code Optional\u003cRating\u003e} if {@code rating} is present."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return rating.isPresent() ? Optional.of(parseRating(rating.get())) : Optional.empty();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String allergy} into a {@code Allergy}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code allergy} is invalid."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Allergy parseAllergy(String allergy) throws IllegalValueException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(allergy);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAllergy \u003d allergy.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Allergy.isValidAllergyName(trimmedAllergy)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Allergy(trimmedAllergy);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws IllegalValueException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(allergies);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cAllergy\u003e allergySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String allergyName : allergies) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            allergySet.add(parseAllergy(allergyName));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return allergySet;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 24,
      "-": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UserConfigCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UserConfigCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new UserConfigCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserConfigCommandParser implements Parser\u003cUserConfigCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UserConfigCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an UserConfigCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserConfigCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_ALLERGIES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UserConfigCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cAllergy\u003e allergyList \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGIES));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            UserProfile profile \u003d new UserProfile(name, phone, address, allergyList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UserConfigCommand(profile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserProfile profile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        profile \u003d SampleDataUtil.getSampleProfile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Foods, Tags, and User Profile in the {@code toBeCopied}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foods.setFoods(foods);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the current user profile to the input {@code profile}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void initUserProfile(UserProfile profile) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.profile \u003d profile;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Replaces the current user profile with {@code editedProfile}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @throws DuplicateUserException if there is no change in user profile"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void updateUserProfile(UserProfile editedProfile) throws DuplicateUserException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert profile !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!profile.equals(editedProfile)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            profile \u003d editedProfile;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e syncedFoodList \u003d newData.getFoodList().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        initUserProfile(newData.getUserProfile());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            setFoods(syncedFoodList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate foods\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a food to HackEat."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new food\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the food to point to those in {@link #tags}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateFoodException if an equivalent food already exists."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addFood(Food p) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any food"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the food list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        foods.add(food);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedFood}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateFoodException if updating the food\u0027s details causes the food to be equivalent to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing food in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FoodNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Food)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFood(Food target, Food editedFood)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateFoodException, FoodNotFoundException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Food syncedEditedFood \u003d syncWithMasterTagList(editedFood);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any food"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the food list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        foods.setFood(target, syncedEditedFood);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code food} that are not in the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code food} such that every tag in this food points to a Tag object in the master"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private Food syncWithMasterTagList(Food food) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(food.getTags());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking food tag references"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of food tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Food("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                food.getName(), food.getPhone(), food.getEmail(), food.getAddress(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                food.getPrice(), food.getRating() , correctTagReferences, food.getAllergies());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FoodNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removeFood(Food key) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (foods.remove(key)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return foods.asObservableList().size() + \" foods, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return foods.asObservableList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.foods.equals(((AddressBook) other).foods)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(foods, tags);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 26,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given food. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteFood(Food target) throws FoodNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given food */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void addFood(Food food) throws DuplicateFoodException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateFoodException if updating the food\u0027s details causes the food to be equivalent to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing food in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FoodNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFood(Food target, Food editedFood)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateFoodException, FoodNotFoundException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Checks if the user is engaged in an interactive session."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    boolean isUserInActiveSession();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a new interactive session."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param interactiveCommand A Command that supports interactive mode."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    void createNewSession(Command interactiveCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Starts the new session by prompting the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return feedback or messages to the user in the form of a CommandResult."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Processes the user input for an interactive session."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param commandText user input string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return feedback to the user"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    CommandResult interpretInteractiveUserInput(String commandText) throws CommandException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the user profile of address book to {@code target}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    void initUserProfile(UserProfile target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns the current user profile."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    UserProfile getUserProfile() throws NullPointerException;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Replaces the current user profile {@code target} with {@code editedProfile}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    void updateUserProfile(UserProfile editedProfile) throws DuplicateUserException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 17,
      "jaxony": 27,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.session.SessionInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.session.SessionManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of HackEat data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SessionInterface sessionManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.addressBook.getFoodList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        sessionManager \u003d new SessionManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfile getUserProfile() throws NullPointerException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return addressBook.getUserProfile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void initUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        addressBook.initUserProfile(userProfile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deleteFood(Food target) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeFood(target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addFood(food);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void updateUserProfile(UserProfile toAdd) throws DuplicateUserException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        addressBook.updateUserProfile(toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return sessionManager.isUserInActiveSession();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void createNewSession(Command interactiveCommand) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        sessionManager.createNewSession(interactiveCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return sessionManager.startSession();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult interpretInteractiveUserInput(String commandText) throws CommandException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return sessionManager.interpretUserInput(commandText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFood(Food target, Food editedFood)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateFoodException, FoodNotFoundException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updateFood(target, editedFood);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredFoods);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 14,
      "jaxony": 27,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Food\u0027s address in HackEat."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"unknown address\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Address\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid food email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Food.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.UniqueAllergyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Food in HackEat."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final UniqueAllergyList allergies;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Food(Name name, Phone phone, Email email, Address address, Price price, Rating rating,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Set\u003cTag\u003e tags, Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireAllNonNull(name, phone, email, address, price, rating, tags, allergies);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.allergies \u003d new UniqueAllergyList(allergies);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Set\u003cAllergy\u003e getAllergies() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Collections.unmodifiableSet(allergies.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherFood.getName().equals(this.getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFood.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFood.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 otherFood.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFood.getPrice().equals(this.getPrice())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFood.getRating().equals(this.getRating());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return Objects.hash(name, phone, email, address, price, rating, tags, allergies);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .append(\" Allergies: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        getAllergies().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 26,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Food\u0027s name in HackEat."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid food name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.apache.commons.validator.routines.BigDecimalValidator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.apache.commons.validator.routines.CurrencyValidator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Represents a Food\u0027s price in HackEat."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            \"Price should contain only numbers and a single decimal point if necessary.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \" Prices that have more than 2 decimal places will be truncated.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    + \" A $ sign can be prefixed to the price but it is not required.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Price\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static Locale currentLocale \u003d Locale.US;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * @param price A valid price given as a String."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        setPrice(price);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static boolean isValidPrice(String inputPrice) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (inputPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimal amount \u003d validator.validate(inputPrice, currentLocale);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (amount !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets price of Food without currency symbol."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Truncates given price to the appropriate number of decimal places."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setPrice(String inputPrice) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        BigDecimalValidator validator \u003d CurrencyValidator.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        value \u003d validator.validate(inputPrice, currentLocale).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "    //@@author samzx"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Parses price value into more recognisable price format with $."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param value of price"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return price value with $ prefixed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static String displayString(String value) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return \"$\" + value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns price of Food as a String."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 84,
      "-": 5,
      "samzx": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Represents a Food\u0027s rating in HackEat."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final int MAX_RATING \u003d 5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": "            \"Please enter a number between 0 to \" + MAX_RATING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Users must enter only a single digit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String RATING_VALIDATION_REGEX \u003d \"\\\\b\\\\d\\\\b\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Rating\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String UNFILLED_RATING_SYMBOL \u003d \"â˜†\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String FILLED_RATING_SYMBOL \u003d \"â˜…\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.value \u003d rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Returns true if a given string is a valid food rating."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "        if (test.matches(RATING_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "            int rating \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (rating \u003e\u003d 0 \u0026\u0026 rating \u003c\u003d MAX_RATING) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Method to display ratings as stars instead of a number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return a string of colored or uncolored stars"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static String displayString(String value) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "        int count \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_RATING; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "            if (count \u003e 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "                stringBuilder.append(FILLED_RATING_SYMBOL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "                stringBuilder.append(UNFILLED_RATING_SYMBOL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "                \u0026\u0026 this.value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "samzx": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/UniqueFoodList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of foods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Food#equals(Object)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see CollectionUtil#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UniqueFoodList() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Creates a UniqueFoodList using given foods."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UniqueFoodList(Set\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        internalList.addAll(foods);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateFoodException if the food to add is a duplicate of an existing food in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Food toAdd) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateFoodException if the replacement is equivalent to another existing food in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FoodNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFood(Food target, Food editedFood)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateFoodException, FoodNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedFood) \u0026\u0026 internalList.contains(editedFood)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FoodNotFoundException if no such food could be found in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Food toRemove) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return personFoundAndDeleted;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueFoodList replacement \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Food food : foods) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(food);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        setFoods(replacement);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns all Foods in this list as a Set."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * This set is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Set\u003cFood\u003e toSet() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new HashSet\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cFood\u003e asObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 23,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/food/allergy/Allergy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food.allergy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an Allergy in HackEat."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidAllergyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Allergy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String MESSAGE_ALLERGY_CONSTRAINTS \u003d \"Allergy names should be alphanumeric and\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            + \" should have at most 20 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALLERGY_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Allergy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String allergyName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Allergy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param allergyName A valid allergy name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Allergy(String allergyName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(allergyName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAllergyName(allergyName), MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.allergyName \u003d allergyName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid allergy name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAllergyName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return test.matches(ALLERGY_VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 20;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Allergy // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allergyName.equals(((Allergy) other).allergyName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return allergyName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + allergyName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/Session.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EndActiveSessionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Prompt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Represents a continuous chat or interaction between the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * and the system."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public abstract class Session {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String END_FIELD \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String OPTIONAL_MESSAGE \u003d \"[Enter] to skip.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Success!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String ANYTHING_ELSE_MESSAGE \u003d \"And anything else?\\nType [Enter] to stop.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String TRY_AGAIN_MESSAGE \u003d \"Please try again: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected final EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Collection\u003cString\u003e stringBuffer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Command command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected int promptIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected final List\u003cPrompt\u003e prompts;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Session.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private boolean isParsingMultivaluedField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Session(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        promptIndex \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        prompts \u003d this.command.getPrompts();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        isParsingMultivaluedField \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static String buildMessageFromPrompt(Prompt p) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return p.isOptional ? p.getMessage() + \"\\n\" + OPTIONAL_MESSAGE : p.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Interprets user input in the CommandBox."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Text typed in by the user in the CommandBox"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to user as a {@code CommandResult}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If the executed command is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult interpretUserInput(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logger.info(\"Received user input in current Session: \" + userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            if (p.isMultiValued) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                return handleInputForMultiValuedField(userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                return handleInputForField(userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            if (p.isMultiValued) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                resetStringBuffer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return new CommandResult(TRY_AGAIN_MESSAGE + ive.getMessage(), false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Starts the session by returning the first prompt in the interaction."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return The message of the first prompt."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult start() throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return new CommandResult(getCurrentPrompt().getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected abstract void parseInputForMultivaluedField(String fieldName) throws IllegalValueException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected abstract void parseInputForField(String fieldName, String userInput) throws IllegalValueException;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected abstract void finishCommand() throws CommandException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Prompt getCurrentPrompt() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return prompts.get(promptIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Processes user input for a single-value field, including optional fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput String input from user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to the user as a {@code CommandResult}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If command execution leads to an error."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws IllegalValueException If input parsing leads to an error."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private CommandResult handleInputForField(String userInput) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        boolean canUserSkipField \u003d didUserEndPrompt(userInput) \u0026\u0026 p.isOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (!canUserSkipField) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            parseInputForField(p.getFieldName(), userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return getNextPromptMessage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private boolean sessionHasPromptsLeft() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return promptIndex \u003c prompts.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Ends the active {@code Session}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void endSession() throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        eventsCenter.post(new EndActiveSessionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        finishCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Processes user input for a multi valued field, including optional fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput String input from user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If command execution leads to an error."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private CommandResult handleInputForMultiValuedField(String userInput)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Prompt p \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (didUserEndPrompt(userInput)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            parseInputForMultivaluedField(p.getFieldName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            isParsingMultivaluedField \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return getNextPromptMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        addAsMultiValue(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return askForNextMultivalue();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void resetStringBuffer() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        stringBuffer \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private boolean didUserEndPrompt(String userInput) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return userInput.equals(END_FIELD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Gets the next prompt message in the interactive session."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to the user as a {@code CommandResult}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException If command execution fails."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private CommandResult getNextPromptMessage() throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        promptIndex++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (!sessionHasPromptsLeft()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            endSession();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return buildSuccessfulCommandResult();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Prompt prompt \u003d getCurrentPrompt();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (prompt.isMultiValued) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            setupForMultiValued();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return buildCommandResultFromPrompt(prompt);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private CommandResult buildSuccessfulCommandResult() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return new CommandResult(SUCCESS_MESSAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Establishes Session state for processing a field containing"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * one or more values."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void setupForMultiValued() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        isParsingMultivaluedField \u003d true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        resetStringBuffer();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Constructs a CommandResult from a prompt."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param prompt What the system is asking from the user. May be optional."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return Feedback to user."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static CommandResult buildCommandResultFromPrompt(Prompt prompt) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        String message \u003d buildMessageFromPrompt(prompt);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Adds user input to a collection of strings for processing later"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * when all input has been collected from the user for the current command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput String from user."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void addAsMultiValue(String userInput) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        stringBuffer.add(userInput);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logger.info(\"Added \" + userInput + \" as a multi value field\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private CommandResult askForNextMultivalue() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return new CommandResult(ANYTHING_ELSE_MESSAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 185,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/SessionAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Controls the interaction for the interactive AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class SessionAddCommand extends Session {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Email email \u003d new Email(Email.DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Address address \u003d new Address(Address.DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Price price \u003d new Price(Price.DEFAULT_PRICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Rating rating \u003d new Rating(Rating.DEFAULT_RATING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected Set\u003cAllergy\u003e allergySet;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public SessionAddCommand(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        super(command, eventsCenter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForMultivaluedField(String fieldName) throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        switch (fieldName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Tag.CLASS_NAME:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            tagSet \u003d ParserUtil.parseTags(stringBuffer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Allergy.CLASS_NAME:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            allergySet \u003d ParserUtil.parseAllergies(stringBuffer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    protected void finishCommand() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        AddCommand addCommand \u003d (AddCommand) command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Food food \u003d new Food(name, phone, email, address, price, rating, tagSet, allergySet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        addCommand.setFood(food);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        addCommand.execute();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Parses the {@code userInput} for a specific field."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param fieldName Class name of the field that will be used to parse {@code userInput}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput Test input from the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws IllegalValueException If parsing of {@code userInput} causes an error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws IllegalArgumentException If {@code fieldName} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField(String fieldName, String userInput)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throws IllegalValueException, IllegalArgumentException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        switch (fieldName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Name.CLASS_NAME:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            name \u003d ParserUtil.parseName(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Phone.CLASS_NAME:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Email.CLASS_NAME:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            email \u003d ParserUtil.parseEmail(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Address.CLASS_NAME:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            address \u003d ParserUtil.parseAddress(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Price.CLASS_NAME:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            price \u003d ParserUtil.parsePrice(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        case Rating.CLASS_NAME:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            rating \u003d ParserUtil.parseRating(Optional.of(userInput)).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 74,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/SessionInterface.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * The API of the Session sub-component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public interface SessionInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Checks if user is engaged in an active session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    boolean isUserInActiveSession();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a new session with a command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param command Must support interactive mode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    void createNewSession(Command command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Starts the new session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return feedback as a CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    CommandResult startSession() throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Processes the user\u0027s text input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param userInput string input in the CommandBox"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return feedback as a CommandResult"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    CommandResult interpretUserInput(String userInput) throws CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 31,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/session/SessionManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EndActiveSessionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Manages sessions (interactions) between user and system for chat-like"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * experience."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class SessionManager extends ComponentManager implements SessionInterface {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final List\u003cSession\u003e sessionHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Session activeSession;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private boolean isUserInActiveSession;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public SessionManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        sessionHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        isUserInActiveSession \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        activeSession \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Makes a new Session"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param command Must support interactive mode."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void createNewSession(Command command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assert command.getClass().getSimpleName().equals(\"AddCommand\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        activeSession \u003d new SessionAddCommand(command, eventsCenter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        isUserInActiveSession \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return activeSession.start();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public CommandResult interpretUserInput(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return activeSession.interpretUserInput(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void handleEndActiveSessionEvent(EndActiveSessionEvent e) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        endActiveSession();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Ends the current active Session and saves it"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * to the session history."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void endActiveSession() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // replace with a NoSessionException later"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (activeSession \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        sessionHistory.add(activeSession);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        activeSession \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return activeSession !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 60,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UserProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.UniqueAllergyList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Represents the profile of the HackEat user and contains"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * personal information such as name, phone and physical address."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final UniqueAllergyList allergies;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Constructs a {@code UserProfile} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param name    Name of user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param phone   Phone number of user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param address Address of user for food delivery"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public UserProfile(Name name, Phone phone, Address address, Set\u003cAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        this.allergies \u003d new UniqueAllergyList(allergies);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Returns an immutable allergy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public Set\u003cAllergy\u003e getAllergies() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return Collections.unmodifiableSet(allergies.toSet());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (!(other instanceof UserProfile)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        UserProfile otherUserProfile \u003d (UserProfile) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return otherUserProfile.getName().equals(this.getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                \u0026\u0026 otherUserProfile.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                \u0026\u0026 otherUserProfile.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                \u0026\u0026 otherUserProfile.getAllergies().equals(this.getAllergies());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return Objects.hash(name, phone, address, allergies);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .append(\" Allergies: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        getAllergies().forEach(builder::append);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 80,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/exceptions/DuplicateUserException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.model.user.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * Signals that the operation will result in duplicate Food objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class DuplicateUserException extends DuplicateDataException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public DuplicateUserException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        super(\"Operation would result in no change to user profile\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 12,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Almond Biscuit\"), new Phone(\"87438807\"), new Email(\"almondhouse@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Price(\"$0.50\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"snack\"), getAllergySet(\"peanut\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Banana Smoothie\"), new Phone(\"99272758\"), new Email(\"bananastand@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Price(\"$5\"), new Rating(\"4\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"drink\", \"fruity\"), getAllergySet(\"lactose\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Cheesecake\"), new Phone(\"93210283\"), new Email(\"cheesecakestore@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Price(\"$3\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"dessert\"), getAllergySet(\"lactose\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Durian Milkshake\"), new Phone(\"91031282\"), new Email(\"durianmarket@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Price(\"$10\"), new Rating(\"2\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"drink\"), getAllergySet(\"lactose\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Ice cream\"), new Phone(\"92492021\"), new Email(\"icecreamshop@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Price(\"$2.5\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"dessert\"), getAllergySet(\"lactose\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Food(new Name(\"Roti\"), new Phone(\"92624417\"), new Email(\"rotirestraunt@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Price(\"$0.8\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"snack\"), getAllergySet(\"peanut\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Bak Kut Teh\"), new Phone(\"67892304\"), new Email(\"pepperysoup@pork.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"127 Kim Tian Road\"), new Price(\"$6.8\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Lontong\"), new Phone(\"92332333\"), new Email(\"nuruldelights@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"413 Bukit Batok West Ave 4\"), new Price(\"$3.5\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet(\"lactose\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Thosai\"), new Phone(\"93456023\"), new Email(\"srivijaya@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"229 Selegie Road\"), new Price(\"$0.8\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Fishball Noodles\"), new Phone(\"65342023\"), new Email(\"meekia@tah.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"6 Jalan Bukit Merah, #01-121\"), new Price(\"$3.5\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Carrot cake\"), new Phone(\"68349233\"), new Email(\"chai@tow.kuay\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"#01-18, Bedok Interchange Food Center, 207 New Upper Changi Road\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Price(\"$3\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"oily\"), getAllergySet(\"egg\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Nasi Briyani\"), new Phone(\"63925247\"), new Email(\"briyani@nasi.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"17 Beach Road, #01-4705\"), new Price(\"$0.8\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Beef Pho\"), new Phone(\"60243423\"), new Email(\"phoisdabez@beef.com\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"#01-02, 51 Telok Ayer Street\"), new Price(\"$7\"), new Rating(\"4\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet(\"peanut\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Seafood Paella\"), new Phone(\"93493230\"), new Email(\"seafood@paella.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"200 Turf Club Road\"), new Price(\"$20\"), new Rating(\"4\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet(\"seafood\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Beef Tacos\"), new Phone(\"64756978\"), new Email(\"beeftacos@example.com\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"11 Demsey Road\"), new Price(\"$18\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"meal\"), getAllergySet(\"gluten\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Chicken Wings\"), new Phone(\"96670638\"), new Email(\"twowings@example.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"1 Cantonment Road\"), new Price(\"$3\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"snack\"), getAllergySet()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Mapo Tofu\"), new Phone(\"62213206\"), new Email(\"chensmapotofu@example.com\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"6A Shenton Way #02-29, Downtown Gallery\"), new Price(\"$8.0\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"Szechuan\"), getAllergySet(\"soy\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Curry Puff\"), new Phone(\"92624417\"), new Email(\"tanglincurrypok@makan.com\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"531A Upper Cross Street, #02-36, Hong Lim Market \u0026 Food Centre\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Price(\"$1.5\"), new Rating(\"3\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"snack\"), getAllergySet(\"egg\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Salted Egg Chicken\"), new Phone(\"67468884\"), new Email(\"de@eatinghouse.com\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"469 Geylang Road\"), new Price(\"$6\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"savoury\"), getAllergySet(\"egg\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new Food(new Name(\"Portugese Egg Tart\"), new Phone(\"62479363\"), new Email(\"eggtart@madeleine.com\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    new Address(\"198 Tanjong Katong Rd\"), new Price(\"$1.5\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    getTagSet(\"snack\"), getAllergySet(\"egg\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UserProfile getSampleProfile() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new UserProfile(new Name(\"Hacker\"), new Phone(\"97002333\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 71 One North MRT Station\"), getAllergySet(\"lactose\", \"peanut\", \"cinnamon\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addFood(sampleFood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate foods\", e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an allergy set containing the list of strings given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            allergies.add(new Allergy(s));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return allergies;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 47,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedFood.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Food."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedFood {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private String price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private List\u003cXmlAdaptedAllergy\u003e addedAllergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedFood."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedFood() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public XmlAdaptedFood(String name, String phone, String email, String address, String price,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                          String rating, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedAllergy\u003e addedAllergies) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (addedAllergies !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.addedAllergies \u003d new ArrayList\u003c\u003e(addedAllergies);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Food into this class for JAXB use."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedFood"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        price \u003d source.getPrice().getValue();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        for (Allergy allergy: source.getAllergies()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            addedAllergies.add(new XmlAdaptedAllergy(allergy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted food object into the model\u0027s Food object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final List\u003cAllergy\u003e foodAllergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        for (XmlAdaptedAllergy allergy: addedAllergies) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            foodAllergies.add(allergy.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (this.price \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (!Price.isValidPrice(this.price)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final Price price \u003d new Price(this.price);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Rating.isValidRating(this.rating)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final Rating rating \u003d new Rating(this.rating);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e(foodAllergies);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new Food(name, phone, email, address, price, rating, tags, allergies);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedFood)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood otherFood \u003d (XmlAdaptedFood) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherFood.name)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherFood.phone)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherFood.email)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherFood.address)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 Objects.equals(price, otherFood.price)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(rating, otherFood.rating)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 tagged.equals(otherFood.tagged)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 addedAllergies.equals(otherFood.addedAllergies);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 34,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedUserProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the User Profile."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedUserProfile {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User Profile\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedAllergy\u003e allergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedUserProfile."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedUserProfile() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedUserProfile} with the given food details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public XmlAdaptedUserProfile(String name, String phone, String address, List\u003cXmlAdaptedAllergy\u003e allergies) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (allergies !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.allergies \u003d new ArrayList\u003c\u003e(allergies);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Profile into this class for JAXB use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedProfile"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedUserProfile(UserProfile source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Allergy allergy: source.getAllergies()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            allergies.add(new XmlAdaptedAllergy(allergy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted UserProfile object into the model\u0027s UserProfile object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted UserProfile"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserProfile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cAllergy\u003e allergiesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedAllergy allergy : allergies) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            allergiesList.add(allergy.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e(allergiesList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new UserProfile(name, phone, address, allergies);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedUserProfile)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedUserProfile otherProfile \u003d (XmlAdaptedUserProfile) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherProfile.name)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherProfile.phone)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherProfile.address)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                \u0026\u0026 allergies.equals(otherProfile.allergies);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedFood\u003e foods;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private XmlAdaptedUserProfile profile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        foods.addAll(src.getFoodList().stream().map(XmlAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        profile \u003d new XmlAdaptedUserProfile(src.getUserProfile());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedFood} or {@code XmlAdaptedTag}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag t : tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addTag(t.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedFood p : foods) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addFood(p.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        addressBook.initUserProfile(profile.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return foods.equals(otherAb.foods) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 profile.equals(otherAb.profile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ChatPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewUserMessageAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * Panel containing the chat history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class ChatPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int SPACING \u003d 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final double WIDTH_DIVISOR \u003d 4.0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final double WIDTH_MULTIPLIER \u003d 3.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String RESULT_ERROR_STYLE \u003d \"result-error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String RESULT_SUCCESS_STYLE \u003d \"result-success\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String USER_LABEL_STYLE \u003d \"user-label\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String FXML \u003d \"ChatPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ChatPanel.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private ScrollPane chatScrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private VBox chatPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public ChatPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatScrollPane.setContent(chatPanel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatScrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatScrollPane.vvalueProperty().bind(chatPanel.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatPanel.setSpacing(SPACING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a result message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param message      String message from system for user feedback."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param isSuccessful If the message represents a successful one."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return A new JavaFX HBox object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private HBox createResultMessage(String message, boolean isSuccessful) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Label label \u003d createLabel(message, isSuccessful ? RESULT_SUCCESS_STYLE : RESULT_ERROR_STYLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return createHBox(label, Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a JavaFX label from a message and style class name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param message String message to add to label."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param styleClassName String name of CSS class for the label."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return New JavaFX Label object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private Label createLabel(String message, String styleClassName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Label label \u003d new Label(message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        label.maxWidthProperty().bind(chatPanel.widthProperty()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                .multiply(WIDTH_MULTIPLIER).divide(WIDTH_DIVISOR));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        label.getStyleClass().add(styleClassName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a HBox object with a specific label and alignment."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param label JavaFX Label object to contain inside HBox."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param alignment Pos constant specifying where to display contents of HBox."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return New HBox object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private HBox createHBox(Label label, Pos alignment) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        HBox hbox \u003d new HBox();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        hbox.setAlignment(alignment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        hbox.getChildren().add(label);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return hbox;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Creates a user message."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @param message String message from user to the system."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @return A new JavaFX HBox object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private HBox createUserMessage(String message) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Label label \u003d createLabel(message, USER_LABEL_STYLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return createHBox(label, Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatPanel.getChildren().add(createResultMessage(event.message, event.isSuccessful));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void handleNewUserMessageEvent(NewUserMessageAvailableEvent event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        chatPanel.getChildren().add(createUserMessage(event.message));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "jaxony": 92,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private FlowPane allergies;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(food.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(food.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        price.setText(Price.displayString(food.getPrice().getValue()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(food.getEmail().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        rating.setText(Rating.displayString(food.getRating().value));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        food.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        food.getAllergies().forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergyName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FoodListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane chatPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private StackPane userProfilePlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ChatPanel chatPanel \u003d new ChatPanel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        chatPanelPlaceholder.getChildren().add(chatPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfilePanel userProfilePanel \u003d new UserProfilePanel(logic.getAddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfilePlaceholder.getChildren().add(userProfilePanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 6,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserProfilePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.image.PixelReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.commons.events.ui.ProfilePictureChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * The User Profile panel of the App."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfilePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String FXML \u003d \"UserProfilePanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserProfilePanel.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String PROFILE_PICTURE_PATH \u003d \"profilepic.png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    final Circle clip \u003d new Circle(75, 75, 75);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private ScrollPane profilePane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private ImageView profilepic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private FlowPane allergies;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfilePanel(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilePane.setFitToWidth(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilePane.setFitToHeight(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilePane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilePane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone.setWrapText(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        setUserProfile(addressBook.getUserProfile());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        setProfilePicture();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the labels to reflect the values of the current {@code UserProfile}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name.setText(userProfile.getName().fullName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone.setText(userProfile.getPhone().value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address.setText(userProfile.getAddress().value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies.getChildren().clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfile.getAllergies().forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergyName)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the profile picture to a square image and clips it"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setProfilePicture() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Image image \u003d new Image(\"file:\" + PROFILE_PICTURE_PATH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Image squareImage \u003d getSquareImage(image);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilepic.setImage(squareImage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        profilepic.setClip(clip);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Crops an image to make it square so that it can be displayed properly in the image view"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public Image getSquareImage(Image image) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        double width \u003d image.getWidth();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        double height \u003d image.getHeight();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        if (width \u003d\u003d height) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            double lengthOfSquare \u003d width \u003c height ? width : height;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            double centerX \u003d width / 2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            double centerY \u003d height / 2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            double startingX \u003d centerX - lengthOfSquare / 2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            double startingY \u003d centerY - lengthOfSquare / 2;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            PixelReader reader \u003d image.getPixelReader();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            WritableImage squareImage \u003d new WritableImage(reader, (int) startingX,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                    (int) startingY, (int) lengthOfSquare, (int) lengthOfSquare);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return squareImage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile newUserProfile \u003d addressBook.getUserProfile();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"User Profile updated to: \" + newUserProfile));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setUserProfile(newUserProfile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void handleProfilePictureChangedEvent(ProfilePictureChangedEvent ppce) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            setProfilePicture();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 122,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/ChatPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaxony"
        },
        "content": "\u003c!-- @@author jaxony --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaxony"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaxony"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaxony"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"chatScrollPane\" styleClass\u003d\"chat-scroll-pane\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    \u003cVBox fx:id\u003d\"chatPanel\" styleClass\u003d\"chat-panel\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": "  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jaxony": 7,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-text-fill: #3f373c;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".chat-scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".chat-scroll-pane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".chat-panel {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 50 25 50 25;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".chat-panel .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 10 5 10;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "#profilePane {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-background-color: #f2efe8;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-padding: 30 10 30 10;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-alignment: top-center;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-spacing: 5;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "#profileVBox {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-background-color: #f2efe8;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-padding: 0 5 0 5;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-alignment: top-center;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-spacing: 5;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "#allergies {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "#allergies .label {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    -fx-background-color: #f23aa5;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 24,
      "-": 366
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"allergies\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/hackeat_logo_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "          \u003cVBox fx:id\u003d\"foodList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"chatPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                       minHeight\u003d\"300\" prefHeight\u003d\"600\" maxHeight\u003d\"1200\" minWidth\u003d\"400\" prefWidth\u003d\"400\" maxWidth\u003d\"1000\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "          \u003cVBox fx:id\u003d\"userProfilePanel\" minWidth\u003d\"250\" prefWidth\u003d\"250\" maxWidth\u003d\"270\" SplitPane.resizableWithParent\u003d\"false\" \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            \u003cStackPane fx:id\u003d\"userProfilePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 8,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/UserProfilePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c!-- @@author tohcheryl --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003cScrollPane fx:id\u003d\"profilePane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "  \u003cVBox fx:id\u003d\"profileVBox\" \u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cImageView fx:id\u003d\"profilepic\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cLabel fx:id\u003d\"address\" text\u003d\"\\$address\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"allergies\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalFoodsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Food values as in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{@code TypicalFoods#getTypicalAddressBook()}--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlmond Biscuits\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e85355255\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealmond@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$1\u003c/price\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efried\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBacon Mousse\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ebaconator@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$2\u003c/price\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e1\u003c/rating\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eavoid\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efried\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCake Pops\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecaker@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003edessert street\u003c/address\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$3\u003c/price\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e2\u003c/rating\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDumpling Mousse\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003edumper@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$4\u003c/price\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e3\u003c/rating\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eEgg Tart\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eyumcha@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003echina ave\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$5\u003c/price\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e4\u003c/rating\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFries and Gravy\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003emaccas@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$6\u003c/price\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGrape Juice\u003c/name\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eboost@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$7\u003c/price\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003efried\u003c/tags\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003eavoid\u003c/tags\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprofile\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cname\u003eHacker\u003c/name\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cphone\u003e123456\u003c/phone\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddress\u003eBlk 71 One North MRT Station\u003c/address\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003ecinnamon\u003c/allergies\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003epeanut\u003c/allergies\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003elactose\u003c/allergies\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003c/profile\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 20,
      "-": 59
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidFoodField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Food with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfood\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprice\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/food\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingFoodField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Food with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfood\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprice\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/food\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFriends\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/tags\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprofile\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cname\u003eHacker\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cphone\u003e123456\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddress\u003eBlk 71 One North MRT Station\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003ecinnamon\u003c/allergies\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003epeanut\u003c/allergies\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003elactose\u003c/allergies\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003c/profile\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 8,
      "-": 15
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cfoods\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cprice isPrivate\u003d\"false\"\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/foods\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprofile\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cname\u003eHacker\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003cphone\u003e123456\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003caddress\u003eBlk 71 One North MRT Station\u003c/address\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003ecinnamon\u003c/allergies\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003epeanut\u003c/allergies\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        \u003callergies\u003elactose\u003c/allergies\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003c/profile\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 17,
      "-": 66
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validFood.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfood\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003cprice\u003e$0\u003c/price\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    \u003caddedAllergies\u003elactose\u003c/addedAllergies\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/food\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ChatPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaxony"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaxony"
        },
        "content": " * A handler for the {@code ChatPanel} of the UI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaxony"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class ChatPanelHandle extends NodeHandle\u003cVBox\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public static final String CHAT_PANEL_ID \u003d \"#chatPanel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public ChatPanelHandle(VBox chatPanelNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        super(chatPanelNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Returns the last result text in the chat panel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        ObservableList\u003cNode\u003e messageContainers \u003d getRootNode().getChildrenUnmodifiable();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        int numResults \u003d messageContainers.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        if (numResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        HBox lastResultMessageHBox \u003d (HBox) messageContainers.get(messageContainers.size() - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Label lastResultLabel \u003d (Label) lastResultMessageHBox.getChildren().get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        return lastResultLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 26,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/UserProfilePanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A handle to the {@code UserProfilePanel} in the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfilePanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String ALLERGIES_FIELD_ID \u003d \"#allergies\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private final List\u003cLabel\u003e allergyLabels;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfilePanelHandle(Node cardNode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Region allergiesContainer \u003d getChildNode(ALLERGIES_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.allergyLabels \u003d allergiesContainer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public List\u003cString\u003e getAllergies() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return allergyLabels"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 51,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/events/model/EndActiveSessionEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.session.SessionInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.session.SessionManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class EndActiveSessionEventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void endActiveSession_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionInterface sessionManager \u003d new SessionManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        sessionManager.createNewSession(new AddCommand(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertTrue(sessionManager.isUserInActiveSession());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        EventsCenter.getInstance().post(new EndActiveSessionEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertFalse(sessionManager.isUserInActiveSession());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 12,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.storage.XmlAdaptedAllergy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedFood;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FOOD_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingFoodField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_FOOD_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidFoodField.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FOOD_FILE \u003d new File(TEST_DATA_FOLDER + \"validFood.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String VALID_PRICE \u003d \"$0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d Collections.singletonList("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            new XmlAdaptedAllergy(\"lactose\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getFoodList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedFoodFromFile_fileWithMissingFoodField_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_FOOD_FIELD_FILE, XmlAdaptedFoodWithRootElement.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood, actualFood);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedFoodFromFile_fileWithInvalidFoodField_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_FOOD_FIELD_FILE, XmlAdaptedFoodWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood, actualFood);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedFoodFromFile_fileWithValidFood_validResult() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood actualFood \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_FOOD_FILE, XmlAdaptedFoodWithRootElement.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood expectedFood \u003d new XmlAdaptedFood("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood, actualFood);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBookStub());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBookStub());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withFood(new FoodBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedFood}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"food\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedFoodWithRootElement extends XmlAdaptedFood {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * An AddressBookStub with a default user profile"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private class AddressBookStub extends AddressBook {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final UniqueFoodList foods;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final UniqueTagList tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private UserProfile profile;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public AddressBookStub() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.profile \u003d SampleDataUtil.getSampleProfile();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 35,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredFoodList().remove(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void createNewSession_editCommand_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logic.createNewSession(\"edit\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void createNewSession_addCommand_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logic.createNewSession(\"add\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void isCommandInteractive_validCommand_true() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertTrue(logic.isCommandInteractive(\"add\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void isCommandInteractive_validCommand_false() throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertFalse(logic.isCommandInteractive(\"edit\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void isCommandInteractive_invalidCommand_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        logic.isCommandInteractive(\"asdad\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 28,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForFood(validFood, modelStub).execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicateFoodException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForFood(validFood, modelStub).execute();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Food apple \u003d new FoodBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Food banana \u003d new FoodBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddCommand(banana);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAppleCommandCopy \u003d new AddCommand(apple);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given food."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForFood(Food food, Model model) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(food);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteFood(Food target) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFood(Food target, Food editedFood)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicateFoodException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void initUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void updateUserProfile(UserProfile userProfile) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        //@@author jaxony"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public boolean isUserInActiveSession() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public void createNewSession(Command interactiveCommand) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public CommandResult startSession() throws CommandException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public CommandResult interpretInteractiveUserInput(String commandText) throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        //@@author tohcheryl"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public UserProfile getUserProfile() throws NullPointerException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * A Model stub that always throw a DuplicateFoodException when trying to add a food."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private class ModelStubThrowingDuplicateFoodException extends ModelStub {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public void addFood(Food food) throws DuplicateFoodException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            foodsAdded.add(food);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 51,
      "jaxony": 24,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ChangePicCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.ChangePicCommand.MESSAGE_PIC_CHANGED_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class ChangePicCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static String imageFilePath \u003d \"src/main/resources/images/defaultprofilepic.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private ChangePicCommand changePicCommand \u003d mock(ChangePicCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_fileSelected_success() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File tempFile \u003d new File(imageFilePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        when(changePicCommand.selectProfilePic()).thenReturn(tempFile);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        when(changePicCommand.execute()).thenCallRealMethod();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        CommandResult commandResult \u003d changePicCommand.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(ChangePicCommand.MESSAGE_PIC_CHANGED_ACKNOWLEDGEMENT, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_noFileSelected_failure() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        File tempFile \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        when(changePicCommand.selectProfilePic()).thenReturn(tempFile);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        when(changePicCommand.execute()).thenCallRealMethod();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandFailure(changePicCommand, MESSAGE_PIC_CHANGED_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 34,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.EditUserDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_APPLE \u003d \"Apple Pie\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BANANA \u003d \"Banana Smoothie\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_APPLE \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BANANA \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_APPLE \u003d \"appleshop@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BANANA \u003d \"bananashop@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_APPLE \u003d \"Block 312, Apple Street 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BANANA \u003d \"Block 123, Banana Street 3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_PRICE_APPLE \u003d \"$0.50\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_PRICE_BANANA \u003d \"$0.80\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_RATING_APPLE \u003d \"3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_RATING_BANANA \u003d \"5\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_NUTS \u003d \"nuts\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIED \u003d \"fried\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_ALLERGY_LACTOSE \u003d \"lactose\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_ALLERGY_POLLEN \u003d \"pollen\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_APPLE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BANANA \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_APPLE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_APPLE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BANANA \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_APPLE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BANANA \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String PRICE_DESC_APPLE \u003d \" \" + PREFIX_PRICE + VALID_PRICE_APPLE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String PRICE_DESC_BANANA \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RATING_DESC_APPLE \u003d \" \" + PREFIX_RATING + VALID_RATING_APPLE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RATING_DESC_BANANA \u003d \" \" + PREFIX_RATING + VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIED \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_NUTS \u003d \" \" + PREFIX_TAG + VALID_TAG_NUTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String ALLERGY_DESC_LACTOSE \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_LACTOSE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String ALLERGY_DESC_POLLEN \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_POLLEN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_NAME_AARON \u003d \"Aaron Chen\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_NAME_BERNICE \u003d \"Bernice Zhang\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_PHONE_AARON \u003d \"33333333\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_PHONE_BERNICE \u003d \"44444444\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_ADDRESS_AARON \u003d \"Block 31, Bishan Street 31\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String VALID_ADDRESS_BERNICE \u003d \"Block 32, Ban Mian Street 32\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String NAME_DESC_AARON \u003d \" \" + PREFIX_NAME + VALID_NAME_AARON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String NAME_DESC_BERNICE \u003d \" \" + PREFIX_NAME + VALID_NAME_BERNICE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String PHONE_DESC_AARON \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AARON;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String PHONE_DESC_BERNICE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BERNICE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String ADDRESS_DESC_AARON \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AARON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String ADDRESS_DESC_BERNICE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BERNICE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Panc\u0026ke\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"banana!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"e.40\"; // letters not allowed for prices"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"9\"; // out of range"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"poise*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGIES + \"#peanut\"; // \u0027#\u0027 not allowed in allergy"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_APPLE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_BANANA;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final EditUserCommand.EditUserDescriptor DESC_AARON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final EditUserCommand.EditUserDescriptor DESC_BERNICE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_APPLE \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BANANA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BANANA).withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_NUTS, VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        DESC_AARON \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_AARON)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_AARON).withAddress(VALID_ADDRESS_AARON)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        DESC_BERNICE \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_BERNICE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_BERNICE).withAddress(VALID_ADDRESS_BERNICE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - HackEat and the filtered food list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Executes the given {@code command} and confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static void assertCommandFailure(Command command, String expectedMessage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first food in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstFood(Model model) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deleteFood(firstFood);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FoodNotFoundException pnfe) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Food in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 55,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditUserCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.EditUserDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_allFieldsSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(editedUserProfile).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_USER_SUCCESS, editedUserProfile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedModel.updateUserProfile(editedUserProfile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccess(editUserCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_someFieldsSpecified_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile currentProfile \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfileBuilder userProfileSet \u003d new UserProfileBuilder(currentProfile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d userProfileSet.withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_BANANA)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_BANANA).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(EditUserCommand.MESSAGE_EDIT_USER_SUCCESS, editedUserProfile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedModel.updateUserProfile(editedUserProfile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_duplicateUserProfile_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile currentUserProfile \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(currentUserProfile).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandFailure(editUserCommand, model, EditUserCommand.MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an {@code EditUserCommand} with parameter {@code descriptor}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommand prepareCommand(EditUserCommand.EditUserDescriptor descriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editUserCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return editUserCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 1. Edits the {@code UserProfile}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * 3. Redo the edit. This ensures {@code RedoCommand} edits the user profile object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void executeUndoRedo_validUserProfile_sameUserProfileEdited() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile editedUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(editedUserProfile).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand editUserCommand \u003d prepareCommand(descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userProfileToEdit \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // edit -\u003e edits user profile"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editUserCommand.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        undoRedoStack.push(editUserCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertNotEquals(userProfileToEdit, editedUserProfile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // redo -\u003e edits user profile"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 100,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditUserDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AARON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BERNICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BERNICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_POLLEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BERNICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BERNICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.EditUserDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new EditUserCommand.EditUserDescriptor(DESC_AARON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(DESC_AARON.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(DESC_AARON.equals(DESC_AARON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(DESC_BERNICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor editedAaron \u003d new EditUserDescriptorBuilder(DESC_AARON)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withName(VALID_NAME_BERNICE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(editedAaron));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editedAaron \u003d new EditUserDescriptorBuilder(DESC_AARON).withPhone(VALID_PHONE_BERNICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(editedAaron));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editedAaron \u003d new EditUserDescriptorBuilder(DESC_AARON).withAddress(VALID_ADDRESS_BERNICE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(editedAaron));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // different allergies -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        editedAaron \u003d new EditUserDescriptorBuilder(DESC_AARON).withAllergies(VALID_ALLERGY_POLLEN).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(DESC_AARON.equals(editedAaron));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 46,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OrderCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertThat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final Index VALID_INDEX \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final Index NULL_INDEX \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void constructor_index_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand indexedOrderCommand \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand nullOrderCommand \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertNotNull(indexedOrderCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertNotNull(nullOrderCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void equals_duplicate_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand indexedOrderCommand \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand indexedOrderCommand2 \u003d new OrderCommand(VALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand nullOrderCommand \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand nullOrderCommand2 \u003d new OrderCommand(NULL_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(indexedOrderCommand, indexedOrderCommand2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(nullOrderCommand, nullOrderCommand2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void execute_orderWithIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand orderCommand \u003d getOrderCommandForIndex(VALID_INDEX, model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food food \u003d model.getAddressBook().getFoodList().get(VALID_INDEX.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertExecuteResolvesCorrectly(orderCommand,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SUCCESS, food.getName()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SELECT_INDEX_FAIL, food.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void execute_orderWithoutIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand orderCommand \u003d getOrderCommandForIndex(NULL_INDEX, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertExecuteResolvesCorrectly(orderCommand,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "                String.format(OrderCommand.MESSAGE_SUCCESS, \"\", \"\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "                String.format(OrderCommand.MESSAGE_EMAIL_FAIL_FOOD, EMPTY_STRING));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Generates a new AddCommand with the details of the given food."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private OrderCommand getOrderCommandForIndex(Index index, Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand command \u003d new OrderCommand(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Execute order command and ensures that the correct response is met when succeeding or failing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param orderCommand to execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param success message if execute success"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param failure message if execute fails"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void assertExecuteResolvesCorrectly(OrderCommand orderCommand, String success, String failure) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "            CommandResult result \u003d orderCommand.execute();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "            assertThat(result.feedbackToUser, containsString(success));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "            assertThat(e.getMessage(), containsString(failure));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "samzx": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UserConfigCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserConfigCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserProfile validUserProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_validUserProfile_setSuccessfully() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        CommandResult commandResult \u003d getUserConfigCommand(validUserProfile, model).execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(UserConfigCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(validUserProfile, model.getUserProfile());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void execute_duplicateUserProfile_setSuccessfully() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile currentUser \u003d model.getUserProfile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        CommandResult commandResult \u003d getUserConfigCommand(currentUser, model).execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(UserConfigCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(currentUser, model.getUserProfile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Generates a new UserConfigCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserConfigCommand getUserConfigCommand(UserProfile userProfile, Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserConfigCommand command \u003d new UserConfigCommand(userProfile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 42,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/orderer/EmailManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class EmailManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final int VALID_MODEL_FOOD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String VALID_UUID \u003d \"f64f2940-fae4-11e7-8c5f-ef356f279131\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String VALID_MESSAGE \u003d \"Message\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void constructor_withArguments_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(model.getUserProfile(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "                model.getAddressBook().getFoodList().get(VALID_MODEL_FOOD_INDEX), VALID_UUID, VALID_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertNotNull(emailManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void email_execution_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "        EmailManager emailManager \u003d new EmailManager(model.getUserProfile(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "                model.getAddressBook().getFoodList().get(VALID_MODEL_FOOD_INDEX), VALID_UUID, VALID_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEmailSuccess(emailManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Executes the email method of the given {@code emailManager} and asserts success"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param emailManager to execute email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static void assertEmailSuccess(EmailManager emailManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "            emailManager.email();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new AssertionError(\"Email should not fail.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "-": 8,
      "samzx": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/orderer/FoodSelectorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class FoodSelectorTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_ALLERGY \u003d \"lactose\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_NOT_ALLERGIC \u003d \"peanut\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String MESSAGE_SHOULD_AVOID_ALLERGIC \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "            \"Food selector should have avoided a food the user is allergic to!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private UserProfile validUser \u003d new UserProfile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Name(USER_NAME),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Phone(USER_PHONE),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Address(Address.DEFAULT_ADDRESS),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    Arrays.asList(new Allergy(USER_ALLERGY))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "            )"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void constructor_withoutArguments_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodSelector foodSelector \u003d new FoodSelector();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertNotNull(foodSelector);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void selectIndex_withModel_validIndex() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Index index \u003d fs.selectIndex(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertNotNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void selectIndex_withAllAllergy_invalidIndex() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "        AddressBook allAllergicAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "        allAllergicAddressBook.initUserProfile(validUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food allergicFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withAllergies(USER_ALLERGY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": "        allAllergicAddressBook.addFood(allergicFood);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Model model \u003d new ModelManager(allAllergicAddressBook, new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodSelector foodSelector \u003d new FoodSelector();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertAvoidsAllergies(foodSelector, model, OrderCommand.MESSAGE_SELECT_FAIL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void selectIndex_nonAllergy_indexOne() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "        AddressBook allAllergicAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "        allAllergicAddressBook.initUserProfile(validUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food foodIsAllergic \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withAllergies(USER_ALLERGY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food foodIsNotAllergic \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withAllergies(USER_NOT_ALLERGIC).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samzx"
        },
        "content": "        allAllergicAddressBook.addFood(foodIsAllergic);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samzx"
        },
        "content": "        allAllergicAddressBook.addFood(foodIsNotAllergic);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Model model \u003d new ModelManager(allAllergicAddressBook, new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samzx"
        },
        "content": "        FoodSelector fs \u003d new FoodSelector();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samzx"
        },
        "content": "        final int expectedSelectedIndex \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(expectedSelectedIndex, fs.selectIndex(model).getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Executes selectIndex method for food selector. Given a model with all allergic, makes sure that an exception"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * is thrown is the desired message, to avoid ordering a food that the user is allergic to, and to notify them"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param foodSelector that will have selectIndex executed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param model which must have all foods be allergic by the userProfile"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param expectedMessage when unable to order food"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws Exception when an allergic food is ordered"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static void assertAvoidsAllergies(FoodSelector foodSelector, Model model, String expectedMessage)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samzx"
        },
        "content": "            foodSelector.selectIndex(model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new AssertionError(MESSAGE_SHOULD_AVOID_ALLERGIC);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new Exception(MESSAGE_SHOULD_AVOID_ALLERGIC);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samzx"
        },
        "content": "            assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 3,
      "-": 33,
      "samzx": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/orderer/OrderManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.io.IOUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String INVALID_URL \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String LOOSE_CONNECTION \u003d \"http://www.120391820938109231023.com/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_ADDRESS \u003d Address.DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_ALLERGY \u003d \"lactose\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String USER_NOT_ALLERGIC \u003d \"peanut\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String MESSAGE_HTTP_POST_FAILED \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "            \"Order Manager failed to update server with POST request\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String MESSAGE_SHOULD_NOT_THROW_ERROR \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "            \"Order Manager should not have thrown error\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private UserProfile validUser \u003d new UserProfile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Name(USER_NAME),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Phone(USER_PHONE),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new Address(USER_ADDRESS),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "            new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "                    Arrays.asList(new Allergy(USER_ALLERGY))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "            )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "    );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void order_withModel_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Food validFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .withAllergies(USER_NOT_ALLERGIC).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderManager orderManager \u003d new OrderManager(validUser, validFood);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertOrderResolvesCorrectly(orderManager, MESSAGE_HTTP_POST_FAILED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void netIsAvailable_invalidUrl_failure() throws MalformedURLException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Assert.assertThrows(RuntimeException.class, () -\u003e OrderManager.netIsAvailable(INVALID_URL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void netIsAvailable_badConnection_failure() throws MalformedURLException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertFalse(OrderManager.netIsAvailable(LOOSE_CONNECTION));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void netIsAvailable_validUrl_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertTrue(OrderManager.netIsAvailable(OrderManager.REMOTE_SERVER));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Sends a HTTP POST Request to the server responsible for exposing message to public APIs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @return whether the message was successfully posted and exposed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private boolean verifyPostConfirmation(String orderId) throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "        URL url \u003d new URL(OrderManager.REMOTE_SERVER + OrderManager.ORDER_PATH + orderId);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samzx"
        },
        "content": "        InputStream inputStream \u003d con.getInputStream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String incomingString \u003d IOUtils.toString(inputStream, OrderManager.CHARSET_ENCODING);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String expectedContents \u003d String.format(OrderManager.CANNED_SPEECH_MESSAGE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samzx"
        },
        "content": "                USER_NAME, VALID_NAME_BANANA, USER_ADDRESS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samzx"
        },
        "content": "        return incomingString.contains(expectedContents);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Executes order method for order manager and checks the correct message is thrown"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param orderManager to execute order method"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @param httpPostFail message if unable to contact server with http post"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void assertOrderResolvesCorrectly(OrderManager orderManager, String httpPostFail) throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samzx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samzx"
        },
        "content": "            orderManager.order();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samzx"
        },
        "content": "            assert(verifyPostConfirmation(orderManager.getOrderId()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samzx"
        },
        "content": "            assert(e.getMessage().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new Exception(httpPostFail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samzx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samzx"
        },
        "content": "            throw new Exception(MESSAGE_SHOULD_NOT_THROW_ERROR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samzx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "samzx": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_APPLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA + PHONE_DESC_BANANA"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_FRIED, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_APPLE + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_APPLE + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_FRIED,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_APPLE + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_FRIED, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFoodMultipleTags \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_BANANA)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRating(VALID_RATING_BANANA).withTags(VALID_TAG_FRIED, VALID_TAG_NUTS).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS + TAG_DESC_FRIED,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRating(VALID_RATING_APPLE).withTags().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFoodNoEmail \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFoodNoEmail));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFoodNoAddress \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withEmail(VALID_EMAIL_APPLE).withPrice(VALID_PRICE_APPLE).withTags().build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + PRICE_DESC_APPLE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedFoodNoAddress));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Food expectedFoodNoPrice \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        + RATING_DESC_APPLE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new AddCommand(expectedFoodNoPrice));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing rating"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Food expectedFoodNoRating \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withEmail(VALID_EMAIL_APPLE).withPrice(VALID_PRICE_APPLE)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        + PRICE_DESC_APPLE, new AddCommand(expectedFoodNoRating));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + VALID_PHONE_BANANA + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + VALID_PHONE_BANANA + VALID_EMAIL_BANANA + VALID_ADDRESS_BANANA,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_FRIED, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_PHONE_DESC + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                        + INVALID_ADDRESS_DESC + PRICE_DESC_BANANA + RATING_DESC_BANANA + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + INVALID_PRICE_DESC + RATING_DESC_BANANA + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED, Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + VALID_PRICE_BANANA + INVALID_RATING_DESC + TAG_DESC_NUTS"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_FRIED, Rating.MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                        + VALID_TAG_FRIED, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                        + INVALID_ADDRESS_DESC + PRICE_DESC_BANANA + RATING_DESC_BANANA, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + PHONE_DESC_BANANA"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                        + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                        + TAG_DESC_NUTS + TAG_DESC_FRIED,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 21,
      "-": 181
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.ChangePicCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.UserConfigCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.EditUserDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FoodUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(food), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FOOD), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_FOOD.getOneBased() + \" \" + FoodUtil.getFoodDetails(food));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FOOD, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_order() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(OrderCommand.COMMAND_WORD) instanceof OrderCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(OrderCommand.COMMAND_WORD + \" 1\") instanceof OrderCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_FOOD), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parseCommand_userConfig() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserConfigCommand command \u003d (UserConfigCommand) parser.parseCommand("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                UserProfileUtil.getUserConfigCommand(userProfile));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(new UserConfigCommand(userProfile), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parseCommand_editUser() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userProfile \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder(userProfile).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand command \u003d (EditUserCommand) parser.parseCommand(EditUserCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + UserProfileUtil.getUserDetails(userProfile));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(new EditUserCommand(descriptor), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parseCommand_changePicCommand() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(parser.parseCommand(ChangePicCommand.COMMAND_WORD) instanceof ChangePicCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(parser.parseCommand(ChangePicCommand.COMMAND_WORD + \" 3\") instanceof ChangePicCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 30,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditUserCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_POLLEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_POLLEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.EditUserDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommandParser parser \u003d new EditUserCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, \"\", EditUserCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_ALLERGY_DESC, Allergy.MESSAGE_ALLERGY_CONSTRAINTS); // invalid allergy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid phone followed by valid address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_PHONE_DESC + ADDRESS_DESC_APPLE, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_BANANA + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // while parsing {@code PREFIX_ALLERGY} alone will reset the allergies of the {@code UserProfile} being edited,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // parsing it together with a valid allergy results in error"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_DESC_LACTOSE + ALLERGY_DESC_POLLEN + ALLERGY_EMPTY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_DESC_LACTOSE + ALLERGY_EMPTY + ALLERGY_DESC_POLLEN,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, ALLERGY_EMPTY + ALLERGY_DESC_LACTOSE + ALLERGY_DESC_POLLEN,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + VALID_ADDRESS_APPLE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_BANANA + ALLERGY_DESC_POLLEN + ADDRESS_DESC_APPLE + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPhone(VALID_PHONE_BANANA).withAddress(VALID_ADDRESS_APPLE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_POLLEN).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_BANANA + NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withName(VALID_NAME_APPLE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withName(VALID_NAME_APPLE)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_APPLE).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withAddress(VALID_ADDRESS_APPLE).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // allergies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + ALLERGY_DESC_POLLEN + PHONE_DESC_APPLE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_BANANA + ALLERGY_DESC_LACTOSE + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAddress(VALID_ADDRESS_BANANA).withAllergies(VALID_ALLERGY_POLLEN, VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userInput \u003d INVALID_PHONE_DESC + ADDRESS_DESC_BANANA + PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserDescriptorBuilder().withPhone(VALID_PHONE_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_resetAllergies_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String userInput \u003d ALLERGY_EMPTY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand.EditUserDescriptor descriptor \u003d new EditUserDescriptorBuilder().withAllergies().build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        EditUserCommand expectedCommand \u003d new EditUserCommand(descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 146,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OrderCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.OrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String VALID_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private OrderCommandParser parser \u003d new OrderCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void parse_emptySting() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand expectedCommand \u003d parser.parse(EMPTY_STRING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertParseSuccess(parser, EMPTY_STRING, expectedCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void parse_validIndex() throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "        OrderCommand expectedCommand \u003d parser.parse(VALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertParseSuccess(parser, VALID_INDEX, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void parse_invalidIndex_failure() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertParseFailure(parser, INVALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "                OrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "samzx": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UserConfigCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getAllergySet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UserConfigCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserConfigCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private UserConfigCommandParser parser \u003d new UserConfigCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile expectedUserProfile \u003d new UserProfile(new Name(VALID_NAME_APPLE), new Phone(VALID_PHONE_APPLE),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new Address(VALID_ADDRESS_APPLE), getAllergySet(\"lactose\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE + ALLERGY_DESC_LACTOSE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new UserConfigCommand(expectedUserProfile));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UserConfigCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + VALID_PHONE_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + VALID_ADDRESS_BANANA,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BANANA + VALID_PHONE_BANANA + VALID_ADDRESS_BANANA,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_PHONE_DESC + ADDRESS_DESC_BANANA,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid allergies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BANANA + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + INVALID_ALLERGY_DESC, Allergy.MESSAGE_ALLERGY_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 63,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.ALMOND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getFoodList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicateFoods_throwsAssertionError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALMOND twice"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(ALMOND, ALMOND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALMOND.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newFoods, newTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getFoodList().remove(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose foods and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        private UserProfile profile;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cFood\u003e foods, Collection\u003c? extends Tag\u003e tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            this.profile \u003d SampleDataUtil.getSampleProfile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        //@@author tohcheryl"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 13,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/PriceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12a.45\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$12a.45\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$1.p0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"203$0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"10$\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.40$\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"â‚¬2,0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertFalse(Price.isValidPrice(\"20000Â¥\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // valid prices in US"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$20\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$90.30\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$20.590\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void setPrice() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        p.setPrice(\"$40.00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"40.00\", p.getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"23.40\", p.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toString_validPrice_returnsString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(\"23.40\", p.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void equals_validPrice_returnsEqual() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p2 \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(p, p2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void hashCode_validPrice_returnsHashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Price p2 \u003d new Price(\"$23.40\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(p.hashCode(), p2.hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 71,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String VALID_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private static final String INVALID_RATING \u003d \"6\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(INVALID_RATING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertFalse(Rating.isValidRating(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertFalse(Rating.isValidRating(\"6\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void displayString_withStars_displaysStars() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(Rating.displayString(\"0\"), \"â˜†â˜†â˜†â˜†â˜†\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(Rating.displayString(\"3\"), \"â˜…â˜…â˜…â˜†â˜†\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(Rating.displayString(\"5\"), \"â˜…â˜…â˜…â˜…â˜…\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(VALID_RATING, rating.value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void toString_validRating_returnsString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(VALID_RATING, rating.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void equals_validRating_returnsEqual() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating rating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating rating2 \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(rating, rating2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void hashCode_validRating_returnsHashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating p \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Rating p2 \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        assertEquals(p.hashCode(), p2.hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "samzx": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/allergy/AllergyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.model.food.allergy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class AllergyTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Allergy(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void constructor_invalidAllergyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String invalidAllergyName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Allergy(invalidAllergyName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void isValidAllergyName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Allergy.isValidAllergyName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 21,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/food/allergy/UniqueAllergyListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.model.food.allergy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UniqueAllergyListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UniqueAllergyList uniqueAllergyList \u003d new UniqueAllergyList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        uniqueAllergyList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 14,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SessionAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class SessionAddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_name_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Name.CLASS_NAME, \"Some Name\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_address_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Address.CLASS_NAME, \"Some Address\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_phone_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Phone.CLASS_NAME, \"123124913\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_email_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Email.CLASS_NAME, \"email@email.com\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_price_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Price.CLASS_NAME, \"12\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_rating_success() throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(Rating.CLASS_NAME, \"5\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForField_invalidClass_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommand session \u003d new SessionAddCommand(new AddCommand(null), null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForField(String.class.getName(), \"Some Input\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForMultivaluedField_tag_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForMultivaluedField(Tag.CLASS_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForMultivaluedField_allergy_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForMultivaluedField(Allergy.CLASS_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void parseInputForMultivaluedField_string_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            throws IllegalArgumentException, IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(new AddCommand(null), null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.parseInputForMultivaluedField(String.class.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void finishCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Command command \u003d new AddCommand(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        command.setData(new ModelManager(), null, null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        SessionAddCommandStub session \u003d new SessionAddCommandStub(command, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        session.finishCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * A stub used to test SessionAddCommand with hardcoded values"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private class SessionAddCommandStub extends SessionAddCommand {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public SessionAddCommandStub(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            super(command, eventsCenter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            stringBuffer \u003d Arrays.asList(\"peruvian\", \"seafood\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            name \u003d TypicalFoods.BACON.getName();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            phone \u003d TypicalFoods.BACON.getPhone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            email \u003d TypicalFoods.BACON.getEmail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            address \u003d TypicalFoods.BACON.getAddress();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            price \u003d TypicalFoods.BACON.getPrice();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            rating \u003d TypicalFoods.BACON.getRating();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            tagSet \u003d TypicalFoods.BACON.getTags();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            allergySet \u003d TypicalFoods.BACON.getAllergies();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 97,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/session/SessionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaxony"
        },
        "content": "//@@author jaxony"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaxony"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_NAME \u003d TypicalFoods.BACON.getName().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_WRONG_PHONE \u003d \"asdadn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_PHONE \u003d TypicalFoods.BACON.getPhone().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_EMAIL \u003d TypicalFoods.BACON.getEmail().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_ADDRESS \u003d TypicalFoods.BACON.getAddress().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_RATING \u003d TypicalFoods.BACON.getRating().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String BACON_PRICE \u003d TypicalFoods.BACON.getPrice().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_NAME \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_PHONE \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_EMAIL \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_ADDRESS \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_PRICE \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_RATING \u003d 6;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final int INDEX_AFTER_TAGS \u003d 7;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_NAME \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_NAME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String FAILURE_MESSAGE_AFTER_WRONG_PHONE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.TRY_AGAIN_MESSAGE + Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_PHONE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_PHONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_EMAIL \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_EMAIL));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_ADDRESS \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_ADDRESS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_PRICE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_PRICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_RATING \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_RATING));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_FIRST_TAG \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_SECOND_TAG \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_TAGS \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.buildMessageFromPrompt(AddCommand.PROMPTS.get(INDEX_AFTER_TAGS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private static final String SUCCESS_MESSAGE_AFTER_FIRST_ALLERGY \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            Session.ANYTHING_ELSE_MESSAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void interpretUserInput_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Session session \u003d new SessionAddCommandStub(new AddCommand(null), EventsCenter.getInstance());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_NAME, session.interpretUserInput(BACON_NAME).feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(FAILURE_MESSAGE_AFTER_WRONG_PHONE, session.interpretUserInput(BACON_WRONG_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PHONE, session.interpretUserInput(BACON_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_EMAIL, session.interpretUserInput(BACON_EMAIL).feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_ADDRESS, session.interpretUserInput(BACON_ADDRESS).feedbackToUser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PRICE, session.interpretUserInput(BACON_PRICE).feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_RATING, session.interpretUserInput(BACON_RATING).feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_FIRST_TAG, session.interpretUserInput(\"meat\").feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_SECOND_TAG, session.interpretUserInput(\"other\").feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_TAGS, session.interpretUserInput("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaxony"
        },
        "content": "                Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_FIRST_ALLERGY, session.interpretUserInput(\"animals\").feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(Session.SUCCESS_MESSAGE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void interpretUserInput_emptyOptionalFields_success() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        Session session \u003d new SessionAddCommandStub(new AddCommand(null), EventsCenter.getInstance());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_NAME, session.interpretUserInput(BACON_NAME).feedbackToUser);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PHONE, session.interpretUserInput(BACON_PHONE).feedbackToUser);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_EMAIL, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_ADDRESS, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_PRICE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_RATING, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // skipping multi value fields"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(SUCCESS_MESSAGE_AFTER_TAGS, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        // adding multi value fields"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertEquals(Session.SUCCESS_MESSAGE, session.interpretUserInput(Session.END_FIELD).feedbackToUser);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * A stub used to test SessionAddCommand with hardcoded values"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private class SessionAddCommandStub extends SessionAddCommand {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        public SessionAddCommandStub(Command command, EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            super(command, eventsCenter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaxony"
        },
        "content": "            command.setData(new ModelManager(), null, null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaxony"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaxony": 95,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedFoodTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.BACON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedFoodTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@nch\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"0a.3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_RATING \u003d \"9\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#fried\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"#lactose\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BACON.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BACON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BACON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BACON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String VALID_PRICE \u003d BACON.getPrice().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_RATING \u003d BACON.getRating().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BACON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d BACON.getAllergies().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .map(XmlAdaptedAllergy::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(BACON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BACON, food.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_PRICE, VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_PRICE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_PRICE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                VALID_RATING, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, INVALID_RATING,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_RATING_CONSTRAINTS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                null, VALID_TAGS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        invalidTags, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidAllergies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        List\u003cXmlAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        invalidAllergies.add(new XmlAdaptedAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedFood food \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedFood(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_RATING,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        VALID_TAGS, invalidAllergies);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 33,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedUserProfileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.storage.XmlAdaptedUserProfile.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class XmlAdaptedUserProfileTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@nch\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String INVALID_ALLERGY \u003d \"#lactose\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final UserProfile JOHN_DOE \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String VALID_NAME \u003d JOHN_DOE.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String VALID_PHONE \u003d JOHN_DOE.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final String VALID_ADDRESS \u003d JOHN_DOE.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final List\u003cXmlAdaptedAllergy\u003e VALID_ALLERGIES \u003d JOHN_DOE.getAllergies().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .map(XmlAdaptedAllergy::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(JOHN_DOE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(JOHN_DOE, johnDoe.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new XmlAdaptedUserProfile(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(null, VALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(VALID_NAME, null, VALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, null, VALID_ALLERGIES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, johnDoe::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void toModelType_invalidAllergies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        List\u003cXmlAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        invalidAllergies.add(new XmlAdaptedAllergy(INVALID_ALLERGY));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        XmlAdaptedUserProfile johnDoe \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                new XmlAdaptedUserProfile(VALID_NAME, VALID_PHONE, VALID_ADDRESS, invalidAllergies);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, johnDoe::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 81,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFoodDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditFoodDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(food.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(food.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(food.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(food.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPrice(food.getPrice());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setRating(food.getRating());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(food.getAllergies());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Price} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditFoodDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditFoodDescriptorBuilder withAllergies(String... allergies) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(allergySet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 22,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditUserDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class to help with building EditUserDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class EditUserDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private EditUserCommand.EditUserDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder(EditUserCommand.EditUserDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.descriptor \u003d new EditUserCommand.EditUserDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an {@code EditUserDescriptor} with fields containing {@code userProfile}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder(UserProfile userProfile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor \u003d new EditUserCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setName(userProfile.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPhone(userProfile.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAddress(userProfile.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(userProfile.getAllergies());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Name} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Address} of the {@code EditUserDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditUserDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserDescriptorBuilder withAllergies(String... allergies) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        descriptor.setAllergies(allergySet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public EditUserCommand.EditUserDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 66,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Apple Pie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d Email.DEFAULT_EMAIL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d Address.DEFAULT_ADDRESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d Price.DEFAULT_PRICE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_RATING \u003d Rating.DEFAULT_RATING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"fried\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ALLERGIES \u003d \"none\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d SampleDataUtil.getAllergySet(DEFAULT_ALLERGIES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d foodToCopy.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d foodToCopy.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d foodToCopy.getAddress();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        price \u003d foodToCopy.getPrice();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        rating \u003d foodToCopy.getRating();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e(foodToCopy.getAllergies());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Price} of the {@code Food} that we are building"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public FoodBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Rating} of the {@code Food} that we are building"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public FoodBuilder withAllergies(String ... allergies) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new Food(name, phone, email, address, price, rating, tags, allergies);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 25,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getFoodDetails(Food food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + food.getPhone().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + food.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + food.getAddress().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_PRICE + food.getPrice().getValue() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_RATING + food.getRating().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        food.getAllergies().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            s -\u003e sb.append(PREFIX_ALLERGIES + s.allergyName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 6,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFoods.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food ALMOND \u003d new FoodBuilder().withName(\"Almond Biscuits\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"almond@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPhone(\"85355255\").withPrice(\"$1\").withRating(\"0\").withTags(\"fried\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withAllergies(\"lactose\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food BACON \u003d new FoodBuilder().withName(\"Bacon Mousse\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"baconator@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$2\").withRating(\"1\").withTags(\"avoid\", \"fried\").withAllergies(\"lactose\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food CAKE \u003d new FoodBuilder().withName(\"Cake Pops\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"caker@example.com\").withAddress(\"dessert street\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$3\").withRating(\"2\").withAllergies(\"lactose\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food DUMPLING \u003d new FoodBuilder().withName(\"Dumpling Mousse\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"dumper@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$4\").withRating(\"3\").withAllergies(\"lactose\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food EGG \u003d new FoodBuilder().withName(\"Egg Tart\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"yumcha@example.com\").withAddress(\"china ave\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$5\").withRating(\"4\").withAllergies(\"lactose\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food FRIES \u003d new FoodBuilder().withName(\"Fries and Gravy\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"maccas@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPrice(\"$6\").withRating(\"5\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food GRAPE \u003d new FoodBuilder().withName(\"Grape Juice\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"boost@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPrice(\"$7\").withRating(\"5\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food HAM \u003d new FoodBuilder().withName(\"Ham Mousse\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"weird@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPrice(\"$8\").withRating(\"5\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food ICECREAM \u003d new FoodBuilder().withName(\"Ice Cream\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(\"cold@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPrice(\"$9\").withRating(\"5\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food APPLE \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(VALID_EMAIL_APPLE).withAddress(VALID_ADDRESS_APPLE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$0.50\").withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withPrice(\"$0.80\").withRating(VALID_RATING_BANANA).withTags(VALID_TAG_NUTS, VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "            .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MOUSSE \u003d \"Mousse\"; // A keyword that matches MOUSSE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalFoods() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical foods and default user profile"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        ab.initUserProfile(SampleDataUtil.getSampleProfile());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Food food : getTypicalFoods()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addFood(food);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicateFoodException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFoods() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALMOND, BACON, CAKE, DUMPLING, EGG, FRIES, GRAPE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 23,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserProfileBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.allergy.Allergy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class to help with building User Profile objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfileBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_PHONE \u003d \"83449232\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_ADDRESS \u003d \"1 Neo Tiew Road\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static final String DEFAULT_USER_ALLERGIES \u003d \"pollen\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private Set\u003cAllergy\u003e allergies;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name \u003d new Name(DEFAULT_USER_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone \u003d new Phone(DEFAULT_USER_PHONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address \u003d new Address(DEFAULT_USER_ADDRESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d SampleDataUtil.getAllergySet(DEFAULT_USER_ALLERGIES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Initializes the UserProfileBuilder with the data of {@code userProfileToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder(UserProfile userProfileToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        name \u003d userProfileToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        phone \u003d userProfileToCopy.getPhone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        address \u003d userProfileToCopy.getAddress();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        allergies \u003d new HashSet\u003c\u003e(userProfileToCopy.getAllergies());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Name} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Address} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Sets the {@code Phone} of the {@code UserProfile} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code UserProfile}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfileBuilder withAllergies(String ... allergies) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public UserProfile build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return new UserProfile(name, phone, address, allergies);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 71,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserProfileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UserConfigCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " * A utility class for UserProfile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfileUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns an add command string for adding the {@code userProfile}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static String getUserConfigCommand(UserProfile userProfile) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return UserConfigCommand.COMMAND_WORD + \" \" + getUserDetails(userProfile);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Returns the part of command string for the given {@code userProfile}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static String getUserDetails(UserProfile userProfile) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_NAME + userProfile.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_PHONE + userProfile.getPhone().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        sb.append(PREFIX_ADDRESS + userProfile.getAddress().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfile.getAllergies().stream().forEach(s -\u003e sb.append(PREFIX_ALLERGIES + s.allergyName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 29,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UserProfilePanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysUser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import guitests.guihandles.UserProfilePanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.testutil.UserProfileBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "//@@author tohcheryl"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "public class UserProfilePanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final ReadOnlyAddressBook ADDRESS_BOOK \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserProfilePanelTest.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // no allergies"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userWithNoAllergy \u003d new UserProfileBuilder().withAllergies(new String[0]).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfilePanel userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfilePanel.setUserProfile(userWithNoAllergy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        uiPartRule.setUiPart(userProfilePanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertPanelDisplay(userProfilePanel, userWithNoAllergy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // with allergies"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfile userWithAllergies \u003d new UserProfileBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        userProfilePanel.setUserProfile(userWithAllergies);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        uiPartRule.setUiPart(userProfilePanel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertPanelDisplay(userProfilePanel, userWithAllergies);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public void getSquareImage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Image testImage \u003d new Image(\"file:docs/images/StorageClassDiagram.png\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfilePanel userProfilePanel \u003d new UserProfilePanel(ADDRESS_BOOK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Image outputImage \u003d userProfilePanel.getSquareImage(testImage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        int width \u003d (int) outputImage.getWidth();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        int height \u003d (int) outputImage.getHeight();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        Assert.assertEquals(width, height);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Asserts that {@code userProfilePanel} displays the details of {@code userProfile} correctly"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    private void assertPanelDisplay(UserProfilePanel userProfilePanel, UserProfile userProfile) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        UserProfilePanelHandle userProfilePanelHandle \u003d new UserProfilePanelHandle(userProfilePanel.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        // verify user details are displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertPanelDisplaysUser(userProfile, userProfilePanelHandle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 60,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ChatPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.FoodCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.FoodListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import guitests.guihandles.UserProfilePanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(FoodCardHandle expectedCard, FoodCardHandle actualCard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedFood}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysFood(Food expectedFood, FoodCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFood.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code foodListPanelHandle} displays the details of {@code foods} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(FoodListPanelHandle foodListPanelHandle, Food... foods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysFood(foods[i], foodListPanelHandle.getFoodCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code foodListPanelHandle} displays the details of {@code foods} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(FoodListPanelHandle foodListPanelHandle, List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(foodListPanelHandle, foods.toArray(new Food[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code foodListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(FoodListPanelHandle foodListPanelHandle, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d foodListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code chatPanelHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ChatPanelHandle chatPanelHandle, String expected) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, chatPanelHandle.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    //@@author tohcheryl"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Asserts that {@code actualPanel} displays the details of {@code expectedUser}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    public static void assertPanelDisplaysUser(UserProfile userProfile, UserProfilePanelHandle actualPanel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(userProfile.getName().fullName, actualPanel.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(userProfile.getPhone().value, actualPanel.getPhone());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(userProfile.getAddress().value, actualPanel.getAddress());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertEquals(userProfile.getAllergies().stream().map(allergy -\u003e allergy.allergyName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                        .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                actualPanel.getAllergies());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 16,
      "-": 72
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_APPLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_APPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_APPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_APPLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_APPLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_APPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.ALMOND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.APPLE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.BANANA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.CAKE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.HAM;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.ICECREAM;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.KEYWORD_MATCHING_MOUSSE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodUtil;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Food toAdd \u003d APPLE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_APPLE + \"  \" + PHONE_DESC_APPLE + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + EMAIL_DESC_APPLE + \"   \" + ADDRESS_DESC_APPLE + \"   \" + PRICE_DESC_APPLE + \"   \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + RATING_DESC_APPLE + \"  \" + TAG_DESC_FRIED + \" \" + ALLERGY_DESC_LACTOSE + \" \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except name -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BANANA + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except phone -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_BANANA).withEmail(VALID_EMAIL_APPLE)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_BANANA + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except email -\u003e added */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except address -\u003e added */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_BANANA"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except price -\u003e added */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_BANANA).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_BANANA + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with all fields same as another food in HackEat except rating -\u003e added */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_APPLE)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_BANANA)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_BANANA + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllFoods();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALMOND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BANANA;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIED + PHONE_DESC_BANANA + ADDRESS_DESC_BANANA + NAME_DESC_BANANA"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + TAG_DESC_NUTS + EMAIL_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add with missing fields (optional fields) ------------------------------*/"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food, missing tags -\u003e added */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HAM);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food, missing email -\u003e added */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withTags(VALID_TAG_FRIED).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food, missing address -\u003e added */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withPrice(VALID_PRICE_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE  + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /* Case: add a food, missing price -\u003e added */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withRating(VALID_RATING_APPLE).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + RATING_DESC_APPLE  + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a food, missing rating -\u003e added */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new FoodBuilder().withName(VALID_NAME_APPLE).withPhone(VALID_PHONE_APPLE).withEmail(VALID_EMAIL_BANANA)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAddress(VALID_ADDRESS_APPLE).withPrice(VALID_PRICE_APPLE).withTags(VALID_TAG_FRIED)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_BANANA"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + TAG_DESC_FRIED + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the food list before adding -\u003e added */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ICECREAM);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a food card is selected --------------------------- */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the food list, add a food -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        selectFood(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CAKE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate food -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FoodUtil.getAddCommand(HAM);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate food except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalFoods#ALMOND"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addFood(Food)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FoodUtil.getAddCommand(HAM) + \" \" + PREFIX_TAG.getPrefix() + \"fried\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + FoodUtil.getFoodDetails(toAdd);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + INVALID_PHONE_DESC + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + INVALID_ADDRESS_DESC + PRICE_DESC_APPLE + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /* Case: invalid price -\u003e rejected */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + INVALID_PRICE_DESC + RATING_DESC_APPLE + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + ADDRESS_DESC_APPLE + RATING_DESC_APPLE + INVALID_RATING_DESC + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Rating.MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_APPLE + PHONE_DESC_APPLE + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PRICE_DESC_APPLE + RATING_DESC_APPLE + INVALID_TAG_DESC + ALLERGY_DESC_LACTOSE;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    public void addInteractive() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        /* -------------------------- Perform add in interactive mode ------------------------------ */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertCommandSuccessWithoutSync(AddCommand.COMMAND_WORD, getModel(), AddCommand.PROMPTS.get(0).getMessage());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Food toAdd) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(FoodUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Food)}. Executes {@code command}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Food)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Food toAdd) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addFood(toAdd);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException dpe) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Food)} except asserts that"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Food)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author jaxony"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Food)} except asserts that"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code FoodListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * 3. Status bar does not change.\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Food)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jaxony"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    private void assertCommandSuccessWithoutSync(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaxony"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaxony"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaxony"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code FoodListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 54,
      "jaxony": 26,
      "-": 285
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ChatPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.FoodListPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalFoods;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalFoods.getTypicalAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getDataFileLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodListPanelHandle getFoodListPanel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getFoodListPanel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ChatPanelHandle getChatPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getChatPanelHandle();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all foods in HackEat."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllFoods() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getFoodList().size(), getModel().getFilteredFoodList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all foods with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showFoodsWithName(String keyword) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredFoodList().size() \u003c getModel().getAddressBook().getFoodList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the food at {@code index} of the displayed list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectFood(Index index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getFoodListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all foods in HackEat."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllFoods() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getFoodList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same food objects as {@code expectedModel}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the food list panel displays the foods in the model correctly."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getChatPanel().getText());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getFoodListPanel(), expectedModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Calls {@code FoodListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getFoodListPanel().rememberSelectedFoodCard();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Asserts that the previously selected card is now deselected."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getFoodListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FoodListPanelHandle#isSelectedFoodCardChanged()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getFoodListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "     * Asserts that the selected card in the food list panel remain unchanged."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see FoodListPanelHandle#isSelectedFoodCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getFoodListPanel().isSelectedFoodCardChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(null, getChatPanel().getText());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            assertListMatching(getFoodListPanel(), getModel().getFilteredFoodList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 4,
      "-": 258
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_APPLE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_APPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BANANA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_APPLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BANANA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BANANA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_LACTOSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BANANA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BANANA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BANANA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BANANA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NUTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.APPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.BANANA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalFoods.KEYWORD_MATCHING_MOUSSE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.food.Price;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Rating;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.FoodUtil;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BANANA + \"  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                + PHONE_DESC_BANANA + \" \" + EMAIL_DESC_BANANA + \"  \" + ADDRESS_DESC_BANANA"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                +  \"  \" + PRICE_DESC_BANANA + \" \" + RATING_DESC_BANANA + \" \" + TAG_DESC_NUTS + \" \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().withName(VALID_NAME_BANANA).withPhone(VALID_PHONE_BANANA)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                .withEmail(VALID_EMAIL_BANANA).withAddress(VALID_ADDRESS_BANANA).withPrice(VALID_PRICE_BANANA)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRating(VALID_RATING_BANANA).withTags(VALID_TAG_NUTS).withAllergies(VALID_ALLERGY_LACTOSE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedFood);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last food in the list -\u003e last food restored */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last food in the list -\u003e last food edited again */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFood("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased()), editedFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a food with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED + TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BANANA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIED;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Food foodToEdit \u003d getModel().getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        editedFood \u003d new FoodBuilder(foodToEdit).withTags(VALID_TAG_FRIED).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedFood);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        editedFood \u003d new FoodBuilder(foodToEdit).withTags().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedFood);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered food list, edit index within bounds of address book and food list -\u003e edited */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredFoodList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        foodToEdit \u003d getModel().getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        editedFood \u003d new FoodBuilder(foodToEdit).withName(VALID_NAME_BANANA).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedFood);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered food list, edit index within bounds of address book but out of bounds of food list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showFoodsWithName(KEYWORD_MATCHING_MOUSSE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getFoodList().size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a food card is selected -------------------------- */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the food list, edit a food -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllFoods();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        selectFood(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_APPLE + PHONE_DESC_APPLE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_APPLE + ADDRESS_DESC_APPLE + PRICE_DESC_APPLE + RATING_DESC_APPLE + TAG_DESC_FRIED;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new food\u0027s name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, APPLE, index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredFoodList().size() + 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BANANA,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        /* Case: invalid price -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_PRICE_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "                Price.MESSAGE_PRICE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_RATING_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Rating.MESSAGE_RATING_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a food with new values same as another food\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FoodUtil.getAddCommand(BANANA));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getFoodList().contains(BANANA));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredFoodList().get(index.getZeroBased()).equals(BANANA));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIED + TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a food with new values same as another food\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BANANA + PHONE_DESC_BANANA"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_BANANA + ADDRESS_DESC_BANANA + PRICE_DESC_BANANA + RATING_DESC_BANANA"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_NUTS;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Food, Index)} except that"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Food, Index)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Food editedFood) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedFood, null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the food at index {@code toEdit} being"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedFood}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Food editedFood,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFood("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredFoodList().get(toEdit.getZeroBased()), editedFood);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateFoodException | FoodNotFoundException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedFood is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 11,
      "-": 300
    }
  },
  {
    "path": "unused/OrderManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.orderer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.twilio.Twilio;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.twilio.rest.api.v2010.account.Call;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.twilio.twiml.VoiceResponse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.twilio.twiml.voice.Say;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.twilio.type.PhoneNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcheryl"
        },
        "content": "import seedu.address.model.user.UserProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samzx"
        },
        "content": "//@@author samzx"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samzx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samzx"
        },
        "content": " * Orders food in HackEat."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samzx"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samzx"
        },
        "content": "public class OrderManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samzx"
        },
        "content": "    // Find your Account Sid, Token and phone number used at twilio.com/console"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String ACCOUNT_SID \u003d \"AC08ed603e3a4de8c0055e27ed8f5e8a3e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String AUTH_TOKEN \u003d \"97fbd0228fa8419cb931583626039e00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String OUTGOING_PHONE \u003d \"+16123245532\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samzx"
        },
        "content": "    // Country code specific to Singapore at the moment"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String LOCAL_COUNTRY_CODE \u003d \"+65\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CANNED_SPEECH_MESSAGE \u003d \"Hello, my name is %s. Could I order a %s to %s?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String ORDER_PATH \u003d \"order/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String CREATE_PATH \u003d \"create/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public static final String REMOTE_SERVER \u003d \"https://mysterious-temple-83678.herokuapp.com/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private String orderId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private UserProfile user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private Food toOrder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public OrderManager(UserProfile user, Food food) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.toOrder \u003d food;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samzx"
        },
        "content": "        this.orderId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Uses Twilio API to begin call and order {@code Food}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samzx"
        },
        "content": "    public void order() throws URISyntaxException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String to \u003d LOCAL_COUNTRY_CODE + toOrder.getPhone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samzx"
        },
        "content": "        String from \u003d OUTGOING_PHONE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samzx"
        },
        "content": "        createOrder(String.format(CANNED_SPEECH_MESSAGE, user.getName(), toOrder.getName(), user.getAddress()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Call.creator(new PhoneNumber(to), new PhoneNumber(from),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samzx"
        },
        "content": "                new URI(REMOTE_SERVER + ORDER_PATH + orderId)).create();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samzx"
        },
        "content": "     *  Use TwiML to generate speech"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samzx"
        },
        "content": "     *  Say Hello. Wait for response. Say order. Wait for response. Say Thank you."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void createOrder(String speech) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samzx"
        },
        "content": "        Say say  \u003d new Say.Builder("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samzx"
        },
        "content": "                speech)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samzx"
        },
        "content": "        VoiceResponse voiceResponse \u003d new VoiceResponse.Builder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .say(say)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samzx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samzx"
        },
        "content": "        sendOrder(voiceResponse.toXml());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samzx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samzx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samzx"
        },
        "content": "     * Sends order to REST API for TwiML to pick up"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samzx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samzx"
        },
        "content": "    private void sendOrder(String body) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samzx"
        },
        "content": "        URL url \u003d new URL(REMOTE_SERVER + CREATE_PATH + orderId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samzx"
        },
        "content": "        HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.setDoOutput(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.getOutputStream().write(body.getBytes(\"UTF-8\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.getInputStream();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samzx"
        },
        "content": "        con.disconnect();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samzx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samzx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcheryl": 1,
      "-": 18,
      "samzx": 73
    }
  }
]
